name='githublargebeta_metaroot' description="githublargebeta_metaroot() - Get Hypermedia links to resources accessible in GitHub's REST API" args_schema=<class 'pydantic.v1.main.metarootRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b3c4c20>
name='githublargebeta_securityadvisorieslistglobaladvisories' description='githublargebeta_securityadvisorieslistglobaladvisories(ghsa_id: typing.Annotated[str, \'If specified, only advisories with this GHSA (GitHub Security Advisory) identifier will be returned.\'] = None, cve_id: typing.Annotated[str, \'If specified, only advisories with this CVE (Common Vulnerabilities and Exposures) identifier will be returned.\'] = None, ecosystem: typing.Annotated[str, \'If specified, only advisories for these ecosystems will be returned.\'] = None, severity: typing.Annotated[str, \'If specified, only advisories with these severities will be returned.\'] = None, cwes: typing.Annotated[composio_langchain.composio_tool_spec.Cwes, \'If specified, only advisories with these Common Weakness Enumerations (CWEs) will be returned.Example: `cwes=79,284,22` or `cwes[]=79&cwes[]=284&cwes[]=22`\'] = None, is_withdrawn: typing.Annotated[bool, \'Whether to only return advisories that have been withdrawn.\'] = None, affects: typing.Annotated[composio_langchain.composio_tool_spec.Affects, \'If specified, only return advisories that affect any of `package` or `package@version`. A maximum of 1000 packages can be specified.If the query parameter causes the URL to exceed the maximum URL length supported by your client, you must specify fewer packages.Example: `affects=package1,package2@1.0.0,package3@^2.0.0` or `affects[]=package1&affects[]=package2@1.0.0`\'] = None, published: typing.Annotated[str, "If specified, only return advisories that were published on a date or date range.For more information on the syntax of the date range, see \'[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\'"] = None, updated: typing.Annotated[str, "If specified, only return advisories that were updated on a date or date range.For more information on the syntax of the date range, see \'[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\'"] = None, modified: typing.Annotated[str, "If specified, only show advisories that were updated or published on a date or date range.For more information on the syntax of the date range, see \'[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\'"] = None, before: typing.Annotated[str, "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = None, after: typing.Annotated[str, "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = None, type: typing.Annotated[str, \'If specified, only advisories of this type will be returned. By default, a request with no other parameters defined will only return reviewed advisories that are not malware.\'] = \'reviewed\', direction: typing.Annotated[str, \'The direction to sort the results by.\'] = \'desc\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, sort_: typing.Annotated[str, \'The property to sort the results by.\'] = \'published\') - Lists all global security advisories that match the specified parameters. If no other parameters are defined, the request will return only GitHub-reviewed advisories that are not malware.\n\nBy default, all responses will exclude advisories for malware, because malware are not standard vulnerabilities. To list advisories for malware, you must include the `type` parameter in your request, with the value `malware`. For more information about the different types of security advisories, see "[About the GitHub Advisory database](https://docs.github.com/code-security/security-advisories/global-security-advisories/about-the-github-advisory-database#about-types-of-security-advisories)."' args_schema=<class 'pydantic.v1.main.securityadvisorieslistglobaladvisoriesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b3c6200>
name='githublargebeta_securityadvisoriesgetglobaladvisory' description="githublargebeta_securityadvisoriesgetglobaladvisory(ghsa_id: typing.Annotated[str, 'The GHSA (GitHub Security Advisory) identifier of the advisory.']) - Gets a global security advisory using its GitHub Security Advisory (GHSA) identifier." args_schema=<class 'pydantic.v1.main.securityadvisoriesgetglobaladvisoryRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b3c63e0>
name='githublargebeta_appsgetauthenticated' description='githublargebeta_appsgetauthenticated() - Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app\'s installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/apps/apps#list-installations-for-the-authenticated-app)" endpoint.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.' args_schema=<class 'pydantic.v1.main.appsgetauthenticatedRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b3c6160>
name='githublargebeta_appscreatefrommanifest' description="githublargebeta_appscreatefrommanifest(code: typing.Annotated[str, 'code']) - Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`." args_schema=<class 'pydantic.v1.main.appscreatefrommanifestRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b3c6340>
name='githublargebeta_appsgetwebhookconfigforapp' description='githublargebeta_appsgetwebhookconfigforapp() - Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.' args_schema=<class 'pydantic.v1.main.appsgetwebhookconfigforappRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b3c6520>
name='githublargebeta_appsupdatewebhookconfigforapp' description='githublargebeta_appsupdatewebhookconfigforapp(url: typing.Annotated[str, \'The URL to which the payloads will be delivered.\'] = None, content_type: typing.Annotated[str, \'The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.\'] = None, secret: typing.Annotated[str, \'If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).\'] = None, insecure_ssl: typing.Annotated[str, \'Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**\'] = None) - Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.' args_schema=<class 'pydantic.v1.main.appsupdatewebhookconfigforappRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b3c65c0>
name='githublargebeta_appslistwebhookdeliveries' description='githublargebeta_appslistwebhookdeliveries(cursor: typing.Annotated[str, \'Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.\'] = None, redelivery: typing.Annotated[bool, \'redelivery\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Returns a list of webhook deliveries for the webhook configured for a GitHub App.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.' args_schema=<class 'pydantic.v1.main.appslistwebhookdeliveriesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b3c6ac0>
name='githublargebeta_appsgetwebhookdelivery' description="githublargebeta_appsgetwebhookdelivery(delivery_id: typing.Annotated[int, 'delivery_id']) - Returns a delivery for the webhook configured for a GitHub App.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint." args_schema=<class 'pydantic.v1.main.appsgetwebhookdeliveryRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b3c6020>
name='githublargebeta_appsredeliverwebhookdelivery' description="githublargebeta_appsredeliverwebhookdelivery(delivery_id: typing.Annotated[int, 'delivery_id']) - Redeliver a delivery for the webhook configured for a GitHub App.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint." args_schema=<class 'pydantic.v1.main.appsredeliverwebhookdeliveryRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b3c6d40>
name='githublargebeta_appslistinstallationrequestsforauthenticatedapp' description='githublargebeta_appslistinstallationrequestsforauthenticatedapp(per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all the pending installation requests for the authenticated GitHub App.' args_schema=<class 'pydantic.v1.main.appslistinstallationrequestsforauthenticatedappRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b3c60c0>
name='githublargebeta_appslistinstallations' description='githublargebeta_appslistinstallations(since: typing.Annotated[str, \'Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, outdated: typing.Annotated[str, \'outdated\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - The permissions the installation has are included under the `permissions` key.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.' args_schema=<class 'pydantic.v1.main.appslistinstallationsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b3c5ee0>
name='githublargebeta_appsgetinstallation' description="githublargebeta_appsgetinstallation(installation_id: typing.Annotated[int, 'The unique identifier of the installation.']) - Enables an authenticated GitHub App to find an installation's information using the installation id.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint." args_schema=<class 'pydantic.v1.main.appsgetinstallationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b3c5bc0>
name='githublargebeta_appsdeleteinstallation' description='githublargebeta_appsdeleteinstallation(installation_id: typing.Annotated[int, \'The unique identifier of the installation.\']) - Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app\'s access to your account\'s resources, then we recommend the "[Suspend an app installation](https://docs.github.com/rest/apps/apps#suspend-an-app-installation)" endpoint.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.' args_schema=<class 'pydantic.v1.main.appsdeleteinstallationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b3c5940>
name='githublargebeta_appscreateinstallationaccesstoken' description='githublargebeta_appscreateinstallationaccesstoken(installation_id: typing.Annotated[int, \'The unique identifier of the installation.\'], repositories: typing.Annotated[composio_langchain.composio_tool_spec.Repositories, \'List of repository names that the token should have access to\'] = None, repository_ids: typing.Annotated[composio_langchain.composio_tool_spec.RepositoryIds, \'List of repository IDs that the token should have access to\'] = None, permissions__actions: typing.Annotated[str, \'The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.__The permissions granted to the user access token.\'] = None, permissions__administration: typing.Annotated[str, \'The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.__The permissions granted to the user access token.\'] = None, permissions__checks: typing.Annotated[str, \'The level of permission to grant the access token for checks on code.__The permissions granted to the user access token.\'] = None, permissions__codespaces: typing.Annotated[str, \'The level of permission to grant the access token to create, edit, delete, and list Codespaces.__The permissions granted to the user access token.\'] = None, permissions__contents: typing.Annotated[str, \'The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.__The permissions granted to the user access token.\'] = None, permissions__dependabot_secrets: typing.Annotated[str, \'The leve of permission to grant the access token to manage Dependabot secrets.__The permissions granted to the user access token.\'] = None, permissions__deployments: typing.Annotated[str, \'The level of permission to grant the access token for deployments and deployment statuses.__The permissions granted to the user access token.\'] = None, permissions__environments: typing.Annotated[str, \'The level of permission to grant the access token for managing repository environments.__The permissions granted to the user access token.\'] = None, permissions__issues: typing.Annotated[str, \'The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.__The permissions granted to the user access token.\'] = None, permissions__metadata: typing.Annotated[str, \'The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.__The permissions granted to the user access token.\'] = None, permissions__packages: typing.Annotated[str, \'The level of permission to grant the access token for packages published to GitHub Packages.__The permissions granted to the user access token.\'] = None, permissions__pages: typing.Annotated[str, \'The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.__The permissions granted to the user access token.\'] = None, permissions__pull_requests: typing.Annotated[str, \'The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.__The permissions granted to the user access token.\'] = None, permissions__repository_custom_properties: typing.Annotated[str, \'The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.__The permissions granted to the user access token.\'] = None, permissions__repository_hooks: typing.Annotated[str, \'The level of permission to grant the access token to manage the post-receive hooks for a repository.__The permissions granted to the user access token.\'] = None, permissions__repository_projects: typing.Annotated[str, \'The level of permission to grant the access token to manage repository projects, columns, and cards.__The permissions granted to the user access token.\'] = None, permissions__secret_scanning_alerts: typing.Annotated[str, \'The level of permission to grant the access token to view and manage secret scanning alerts.__The permissions granted to the user access token.\'] = None, permissions__secrets: typing.Annotated[str, \'The level of permission to grant the access token to manage repository secrets.__The permissions granted to the user access token.\'] = None, permissions__security_events: typing.Annotated[str, \'The level of permission to grant the access token to view and manage security events like code scanning alerts.__The permissions granted to the user access token.\'] = None, permissions__single_file: typing.Annotated[str, \'The level of permission to grant the access token to manage just a single file.__The permissions granted to the user access token.\'] = None, permissions__statuses: typing.Annotated[str, \'The level of permission to grant the access token for commit statuses.__The permissions granted to the user access token.\'] = None, permissions__vulnerability_alerts: typing.Annotated[str, \'The level of permission to grant the access token to manage Dependabot alerts.__The permissions granted to the user access token.\'] = None, permissions__workflows: typing.Annotated[str, \'The level of permission to grant the access token to update GitHub Actions workflow files.__The permissions granted to the user access token.\'] = None, permissions__members: typing.Annotated[str, \'The level of permission to grant the access token for organization teams and members.__The permissions granted to the user access token.\'] = None, permissions__organization_administration: typing.Annotated[str, \'The level of permission to grant the access token to manage access to an organization.__The permissions granted to the user access token.\'] = None, permissions__organization_custom_roles: typing.Annotated[str, \'The level of permission to grant the access token for custom repository roles management.__The permissions granted to the user access token.\'] = None, permissions__organization_custom_org_roles: typing.Annotated[str, \'The level of permission to grant the access token for custom organization roles management.__The permissions granted to the user access token.\'] = None, permissions__organization_custom_properties: typing.Annotated[str, \'The level of permission to grant the access token for custom property management.__The permissions granted to the user access token.\'] = None, permissions__organization_copilot_seat_management: typing.Annotated[str, \'The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in beta and is subject to change.__The permissions granted to the user access token.\'] = None, permissions__organization_announcement_banners: typing.Annotated[str, \'The level of permission to grant the access token to view and manage announcement banners for an organization.__The permissions granted to the user access token.\'] = None, permissions__organization_events: typing.Annotated[str, \'The level of permission to grant the access token to view events triggered by an activity in an organization.__The permissions granted to the user access token.\'] = None, permissions__organization_hooks: typing.Annotated[str, \'The level of permission to grant the access token to manage the post-receive hooks for an organization.__The permissions granted to the user access token.\'] = None, permissions__organization_personal_access_tokens: typing.Annotated[str, \'The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.__The permissions granted to the user access token.\'] = None, permissions__organization_personal_access_token_requests: typing.Annotated[str, \'The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.__The permissions granted to the user access token.\'] = None, permissions__organization_plan: typing.Annotated[str, "The level of permission to grant the access token for viewing an organization\'s plan.__The permissions granted to the user access token."] = None, permissions__organization_projects: typing.Annotated[str, \'The level of permission to grant the access token to manage organization projects and projects beta (where available).__The permissions granted to the user access token.\'] = None, permissions__organization_packages: typing.Annotated[str, \'The level of permission to grant the access token for organization packages published to GitHub Packages.__The permissions granted to the user access token.\'] = None, permissions__organization_secrets: typing.Annotated[str, \'The level of permission to grant the access token to manage organization secrets.__The permissions granted to the user access token.\'] = None, permissions__organization_self_hosted_runners: typing.Annotated[str, \'The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.__The permissions granted to the user access token.\'] = None, permissions__organization_user_blocking: typing.Annotated[str, \'The level of permission to grant the access token to view and manage users blocked by the organization.__The permissions granted to the user access token.\'] = None, permissions__team_discussions: typing.Annotated[str, \'The level of permission to grant the access token to manage team discussions and related comments.__The permissions granted to the user access token.\'] = None, permissions__email_addresses: typing.Annotated[str, \'The level of permission to grant the access token to manage the email addresses belonging to a user.__The permissions granted to the user access token.\'] = None, permissions__followers: typing.Annotated[str, \'The level of permission to grant the access token to manage the followers belonging to a user.__The permissions granted to the user access token.\'] = None, permissions__git_ssh_keys: typing.Annotated[str, \'The level of permission to grant the access token to manage git SSH keys.__The permissions granted to the user access token.\'] = None, permissions__gpg_keys: typing.Annotated[str, \'The level of permission to grant the access token to view and manage GPG keys belonging to a user.__The permissions granted to the user access token.\'] = None, permissions__interaction_limits: typing.Annotated[str, \'The level of permission to grant the access token to view and manage interaction limits on a repository.__The permissions granted to the user access token.\'] = None, permissions__profile: typing.Annotated[str, \'The level of permission to grant the access token to manage the profile settings belonging to a user.__The permissions granted to the user access token.\'] = None, permissions__starring: typing.Annotated[str, \'The level of permission to grant the access token to list and manage repositories a user is starring.__The permissions granted to the user access token.\'] = None) - Creates an installation access token that enables a GitHub App to make authenticated API requests for the app\'s installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. \n\nOptionally, you can use the `repositories` or `repository_ids` body parameters to specify individual repositories that the installation access token can access. If you don\'t use `repositories` or `repository_ids` to grant access to specific repositories, the installation access token will have access to all repositories that the installation was granted access to. The installation access token cannot be granted access to repositories that the installation was not granted access to. Up to 500 repositories can be listed in this manner.\n\nOptionally, use the `permissions` body parameter to specify the permissions that the installation access token should have. If `permissions` is not specified, the installation access token will have all of the permissions that were granted to the app. The installation access token cannot be granted permissions that the app was not granted.\n\nWhen using the repository or permission parameters to reduce the access of the token, the complexity of the token is increased due to both the number of permissions in the request and the number of repositories the token will have access to. If the complexity is too large, the token will fail to be issued. If this occurs, the error message will indicate the maximum number of repositories that should be requested. For the average application requesting 8 permissions, this limit is around 5000 repositories. With fewer permissions requested, more repositories are supported. \n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.' args_schema=<class 'pydantic.v1.main.appscreateinstallationaccesstokenRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b3c62a0>
name='githublargebeta_appssuspendinstallation' description="githublargebeta_appssuspendinstallation(installation_id: typing.Annotated[int, 'The unique identifier of the installation.']) - Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint." args_schema=<class 'pydantic.v1.main.appssuspendinstallationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b4fd4e0>
name='githublargebeta_appsunsuspendinstallation' description="githublargebeta_appsunsuspendinstallation(installation_id: typing.Annotated[int, 'The unique identifier of the installation.']) - Removes a GitHub App installation suspension.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint." args_schema=<class 'pydantic.v1.main.appsunsuspendinstallationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b4fd260>
name='githublargebeta_appsdeleteauthorization' description="githublargebeta_appsdeleteauthorization(client_id: typing.Annotated[str, 'The client ID of the GitHub app.'], access_token: typing.Annotated[str, 'The OAuth access token used to authenticate to the GitHub API.']) - OAuth and GitHub application owners can revoke a grant for their application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.\nDeleting an application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized)." args_schema=<class 'pydantic.v1.main.appsdeleteauthorizationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b4fd6c0>
name='githublargebeta_appschecktoken' description="githublargebeta_appschecktoken(client_id: typing.Annotated[str, 'The client ID of the GitHub app.'], access_token: typing.Annotated[str, 'The access_token of the OAuth or GitHub application.']) - OAuth applications and GitHub applications with OAuth authorizations can use this API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`." args_schema=<class 'pydantic.v1.main.appschecktokenRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b4fd1c0>
name='githublargebeta_appsresettoken' description='githublargebeta_appsresettoken(client_id: typing.Annotated[str, \'The client ID of the GitHub app.\'], access_token: typing.Annotated[str, \'The access_token of the OAuth or GitHub application.\']) - OAuth applications and GitHub applications with OAuth authorizations can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the application\'s `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.' args_schema=<class 'pydantic.v1.main.appsresettokenRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b4fd440>
name='githublargebeta_appsdeletetoken' description="githublargebeta_appsdeletetoken(client_id: typing.Annotated[str, 'The client ID of the GitHub app.'], access_token: typing.Annotated[str, 'The OAuth access token used to authenticate to the GitHub API.']) - OAuth  or GitHub application owners can revoke a single token for an OAuth application or a GitHub application with an OAuth authorization. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the application's `client_id` and `client_secret` as the username and password." args_schema=<class 'pydantic.v1.main.appsdeletetokenRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b4fd080>
name='githublargebeta_appsscopetoken' description='githublargebeta_appsscopetoken(client_id: typing.Annotated[str, \'The client ID of the GitHub app.\'], access_token: typing.Annotated[str, \'The access token used to authenticate to the GitHub API.\'], target: typing.Annotated[str, \'The name of the user or organization to scope the user access token to. **Required** unless `target_id` is specified.\'] = None, target_id: typing.Annotated[int, \'The ID of the user or organization to scope the user access token to. **Required** unless `target` is specified.\'] = None, repositories: typing.Annotated[composio_langchain.composio_tool_spec.Repositories, \'The list of repository names to scope the user access token to. `repositories` may not be specified if `repository_ids` is specified.\'] = None, repository_ids: typing.Annotated[composio_langchain.composio_tool_spec.RepositoryIds, \'The list of repository IDs to scope the user access token to. `repository_ids` may not be specified if `repositories` is specified.\'] = None, permissions__actions: typing.Annotated[str, \'The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__administration: typing.Annotated[str, \'The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__checks: typing.Annotated[str, \'The level of permission to grant the access token for checks on code.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__codespaces: typing.Annotated[str, \'The level of permission to grant the access token to create, edit, delete, and list Codespaces.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__contents: typing.Annotated[str, \'The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__dependabot_secrets: typing.Annotated[str, \'The leve of permission to grant the access token to manage Dependabot secrets.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__deployments: typing.Annotated[str, \'The level of permission to grant the access token for deployments and deployment statuses.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__environments: typing.Annotated[str, \'The level of permission to grant the access token for managing repository environments.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__issues: typing.Annotated[str, \'The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__metadata: typing.Annotated[str, \'The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__packages: typing.Annotated[str, \'The level of permission to grant the access token for packages published to GitHub Packages.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__pages: typing.Annotated[str, \'The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__pull_requests: typing.Annotated[str, \'The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__repository_custom_properties: typing.Annotated[str, \'The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__repository_hooks: typing.Annotated[str, \'The level of permission to grant the access token to manage the post-receive hooks for a repository.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__repository_projects: typing.Annotated[str, \'The level of permission to grant the access token to manage repository projects, columns, and cards.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__secret_scanning_alerts: typing.Annotated[str, \'The level of permission to grant the access token to view and manage secret scanning alerts.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__secrets: typing.Annotated[str, \'The level of permission to grant the access token to manage repository secrets.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__security_events: typing.Annotated[str, \'The level of permission to grant the access token to view and manage security events like code scanning alerts.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__single_file: typing.Annotated[str, \'The level of permission to grant the access token to manage just a single file.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__statuses: typing.Annotated[str, \'The level of permission to grant the access token for commit statuses.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__vulnerability_alerts: typing.Annotated[str, \'The level of permission to grant the access token to manage Dependabot alerts.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__workflows: typing.Annotated[str, \'The level of permission to grant the access token to update GitHub Actions workflow files.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__members: typing.Annotated[str, \'The level of permission to grant the access token for organization teams and members.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__organization_administration: typing.Annotated[str, \'The level of permission to grant the access token to manage access to an organization.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__organization_custom_roles: typing.Annotated[str, \'The level of permission to grant the access token for custom repository roles management.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__organization_custom_org_roles: typing.Annotated[str, \'The level of permission to grant the access token for custom organization roles management.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__organization_custom_properties: typing.Annotated[str, \'The level of permission to grant the access token for custom property management.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__organization_copilot_seat_management: typing.Annotated[str, \'The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in beta and is subject to change.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__organization_announcement_banners: typing.Annotated[str, \'The level of permission to grant the access token to view and manage announcement banners for an organization.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__organization_events: typing.Annotated[str, \'The level of permission to grant the access token to view events triggered by an activity in an organization.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__organization_hooks: typing.Annotated[str, \'The level of permission to grant the access token to manage the post-receive hooks for an organization.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__organization_personal_access_tokens: typing.Annotated[str, \'The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__organization_personal_access_token_requests: typing.Annotated[str, \'The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__organization_plan: typing.Annotated[str, "The level of permission to grant the access token for viewing an organization\'s plan.__The permissions granted to the user access token.__The permissions granted to the user access token."] = None, permissions__organization_projects: typing.Annotated[str, \'The level of permission to grant the access token to manage organization projects and projects beta (where available).__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__organization_packages: typing.Annotated[str, \'The level of permission to grant the access token for organization packages published to GitHub Packages.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__organization_secrets: typing.Annotated[str, \'The level of permission to grant the access token to manage organization secrets.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__organization_self_hosted_runners: typing.Annotated[str, \'The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__organization_user_blocking: typing.Annotated[str, \'The level of permission to grant the access token to view and manage users blocked by the organization.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__team_discussions: typing.Annotated[str, \'The level of permission to grant the access token to manage team discussions and related comments.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__email_addresses: typing.Annotated[str, \'The level of permission to grant the access token to manage the email addresses belonging to a user.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__followers: typing.Annotated[str, \'The level of permission to grant the access token to manage the followers belonging to a user.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__git_ssh_keys: typing.Annotated[str, \'The level of permission to grant the access token to manage git SSH keys.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__gpg_keys: typing.Annotated[str, \'The level of permission to grant the access token to view and manage GPG keys belonging to a user.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__interaction_limits: typing.Annotated[str, \'The level of permission to grant the access token to view and manage interaction limits on a repository.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__profile: typing.Annotated[str, \'The level of permission to grant the access token to manage the profile settings belonging to a user.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None, permissions__starring: typing.Annotated[str, \'The level of permission to grant the access token to list and manage repositories a user is starring.__The permissions granted to the user access token.__The permissions granted to the user access token.\'] = None) - Use a non-scoped user access token to create a repository-scoped and/or permission-scoped user access token. You can specify\nwhich repositories the token can access and which permissions are granted to the\ntoken.\n\nInvalid tokens will return `404 NOT FOUND`.\n\nYou must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)\nwhen accessing this endpoint, using the `client_id` and `client_secret` of the GitHub App\nas the username and password.' args_schema=<class 'pydantic.v1.main.appsscopetokenRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b4fff60>
name='githublargebeta_appsgetbyslug' description="githublargebeta_appsgetbyslug(app_slug: typing.Annotated[str, 'app_slug']) - **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`)." args_schema=<class 'pydantic.v1.main.appsgetbyslugRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b4ffe20>
name='githublargebeta_classroomgetanassignment' description="githublargebeta_classroomgetanassignment(assignment_id: typing.Annotated[int, 'The unique identifier of the classroom assignment.']) - Gets a GitHub Classroom assignment. Assignment will only be returned if the current user is an administrator of the GitHub Classroom for the assignment." args_schema=<class 'pydantic.v1.main.classroomgetanassignmentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b4ffd80>
name='githublargebeta_classroomlistacceptedassigmentsforanassignment' description='githublargebeta_classroomlistacceptedassigmentsforanassignment(assignment_id: typing.Annotated[int, \'The unique identifier of the classroom assignment.\'], page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Lists any assignment repositories that have been created by students accepting a GitHub Classroom assignment. Accepted assignments will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.' args_schema=<class 'pydantic.v1.main.classroomlistacceptedassigmentsforanassignmentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b4ffb00>
name='githublargebeta_classroomgetassignmentgrades' description="githublargebeta_classroomgetassignmentgrades(assignment_id: typing.Annotated[int, 'The unique identifier of the classroom assignment.']) - Gets grades for a GitHub Classroom assignment. Grades will only be returned if the current user is an administrator of the GitHub Classroom for the assignment." args_schema=<class 'pydantic.v1.main.classroomgetassignmentgradesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b4ffce0>
name='githublargebeta_classroomlistclassrooms' description='githublargebeta_classroomlistclassrooms(page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Lists GitHub Classroom classrooms for the current user. Classrooms will only be returned if the current user is an administrator of one or more GitHub Classrooms.' args_schema=<class 'pydantic.v1.main.classroomlistclassroomsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b4ffec0>
name='githublargebeta_classroomgetaclassroom' description="githublargebeta_classroomgetaclassroom(classroom_id: typing.Annotated[int, 'The unique identifier of the classroom.']) - Gets a GitHub Classroom classroom for the current user. Classroom will only be returned if the current user is an administrator of the GitHub Classroom." args_schema=<class 'pydantic.v1.main.classroomgetaclassroomRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b4ff9c0>
name='githublargebeta_classroomlistassignmentsforaclassroom' description='githublargebeta_classroomlistassignmentsforaclassroom(classroom_id: typing.Annotated[int, \'The unique identifier of the classroom.\'], page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Lists GitHub Classroom assignments for a classroom. Assignments will only be returned if the current user is an administrator of the GitHub Classroom.' args_schema=<class 'pydantic.v1.main.classroomlistassignmentsforaclassroomRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b534180>
name='githublargebeta_codesofconductgetallcodesofconduct' description="githublargebeta_codesofconductgetallcodesofconduct() - Returns array of all GitHub's codes of conduct." args_schema=<class 'pydantic.v1.main.codesofconductgetallcodesofconductRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b534040>
name='githublargebeta_codesofconductgetconductcode' description="githublargebeta_codesofconductgetconductcode(key: typing.Annotated[str, 'key']) - Returns information about the specified GitHub code of conduct." args_schema=<class 'pydantic.v1.main.codesofconductgetconductcodeRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5340e0>
name='githublargebeta_emojisget' description='githublargebeta_emojisget() - Lists all the emojis available to use on GitHub.' args_schema=<class 'pydantic.v1.main.emojisgetRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b534540>
name='githublargebeta_dependabotlistalertsforenterprise' description='githublargebeta_dependabotlistalertsforenterprise(enterprise: typing.Annotated[str, \'The slug version of the enterprise name. You can also substitute this value with the enterprise id.\'], state: typing.Annotated[str, \'A comma-separated list of states. If specified, only alerts with these states will be returned.Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`\'] = None, severity: typing.Annotated[str, \'A comma-separated list of severities. If specified, only alerts with these severities will be returned.Can be: `low`, `medium`, `high`, `critical`\'] = None, ecosystem: typing.Annotated[str, \'A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`\'] = None, package: typing.Annotated[str, \'A comma-separated list of package names. If specified, only alerts for these packages will be returned.\'] = None, scope: typing.Annotated[str, \'The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.\'] = None, before: typing.Annotated[str, "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = None, after: typing.Annotated[str, "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = None, last: typing.Annotated[int, \'**Deprecated**. The number of results per page (max 100), starting from the last matching result.This parameter must not be used in combination with `first`.Instead, use `per_page` in combination with `before` to fetch the last page of results.\'] = None, sort_: typing.Annotated[str, "The property by which to sort the results.`created` means when the alert was created.`updated` means when the alert\'s state last changed."] = \'created\', direction: typing.Annotated[str, \'The direction to sort the results by.\'] = \'desc\', first: typing.Annotated[int, \'**Deprecated**. The number of results per page (max 100), starting from the first matching result.This parameter must not be used in combination with `last`.Instead, use `per_page` in combination with `after` to fetch the first page of results.\'] = 30, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Lists Dependabot alerts for repositories that are owned by the specified enterprise.\n\nThe authenticated user must be a member of the enterprise to use this endpoint.\n\nAlerts are only returned for organizations in the enterprise for which you are an organization owner or a security manager. For more information about security managers, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.dependabotlistalertsforenterpriseRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b534680>
name='githublargebeta_secretscanninglistalertsforenterprise' description='githublargebeta_secretscanninglistalertsforenterprise(enterprise: typing.Annotated[str, \'The slug version of the enterprise name. You can also substitute this value with the enterprise id.\'], state: typing.Annotated[str, \'Set to `open` or `resolved` to only list secret scanning alerts in a specific state.\'] = None, secret_type: typing.Annotated[str, "A comma-separated list of secret types to return. By default all secret types are returned.See \'[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\'for a complete list of secret types."] = None, resolution: typing.Annotated[str, \'A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.\'] = None, before: typing.Annotated[str, "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = None, after: typing.Annotated[str, "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = None, validity: typing.Annotated[str, \'A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`.\'] = None, sort_: typing.Annotated[str, \'The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.\'] = \'created\', direction: typing.Annotated[str, \'The direction to sort the results by.\'] = \'desc\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.\n\nAlerts are only returned for organizations in the enterprise for which the authenticated user is an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\n\nThe authenticated user must be a member of the enterprise in order to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope or `security_events` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.secretscanninglistalertsforenterpriseRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b534400>
name='githublargebeta_activitylistpublicevents' description='githublargebeta_activitylistpublicevents(per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.' args_schema=<class 'pydantic.v1.main.activitylistpubliceventsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b534720>
name='githublargebeta_activitygetfeeds' description='githublargebeta_activitygetfeeds() - Lists the feeds available to the authenticated user. The response provides a URL for each feed. You can then get a specific feed by sending a request to one of the feed URLs.\n\n*   **Timeline**: The GitHub global public timeline\n*   **User**: The public timeline for any user, using `uri_template`. For more information, see "[Hypermedia](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia)."\n*   **Current user public**: The public timeline for the authenticated user\n*   **Current user**: The private timeline for the authenticated user\n*   **Current user actor**: The private timeline for activity created by the authenticated user\n*   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.\n*   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.\n\nBy default, timeline resources are returned in JSON. You can specify the `application/atom+xml` type in the `Accept` header to return timeline resources in Atom format. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n**Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.' args_schema=<class 'pydantic.v1.main.activitygetfeedsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b534fe0>
name='githublargebeta_gistslist' description='githublargebeta_gistslist(since: typing.Annotated[str, \'Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the authenticated user\'s gists or if called anonymously, this endpoint returns all public gists:' args_schema=<class 'pydantic.v1.main.gistslistRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5358a0>
name='githublargebeta_gistscreate' description='githublargebeta_gistscreate(description: typing.Annotated[str, \'Description of the gist\'] = None, public: typing.Annotated[bool, \'Flag indicating whether the gist is public\'] = False) - Allows you to add a new gist with one or more files.\n\n**Note:** Don\'t name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.' args_schema=<class 'pydantic.v1.main.gistscreateRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5356c0>
name='githublargebeta_gistslistpublic' description='githublargebeta_gistslistpublic(since: typing.Annotated[str, \'Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List public gists sorted by most recently updated to least recently updated.\n\nNote: With [pagination](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.' args_schema=<class 'pydantic.v1.main.gistslistpublicRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b535da0>
name='githublargebeta_gistsliststarred' description='githublargebeta_gistsliststarred(since: typing.Annotated[str, \'Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List the authenticated user\'s starred gists:' args_schema=<class 'pydantic.v1.main.gistsliststarredRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b535bc0>
name='githublargebeta_gistsget' description='githublargebeta_gistsget(gist_id: typing.Annotated[str, \'The unique identifier of the gist.\']) - Gets a specified gist.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.' args_schema=<class 'pydantic.v1.main.gistsgetRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b536020>
name='githublargebeta_gistsupdate' description='githublargebeta_gistsupdate(gist_id: typing.Annotated[str, \'The unique identifier of the gist.\'], description: typing.Annotated[str, \'The description of the gist.\'] = None) - Allows you to update a gist\'s description and to update, delete, or rename gist files. Files\nfrom the previous version of the gist that aren\'t explicitly changed during an edit\nare unchanged.\n\nAt least one of `description` or `files` is required.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.' args_schema=<class 'pydantic.v1.main.gistsupdateRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b535940>
name='githublargebeta_gistsdelete' description="githublargebeta_gistsdelete(gist_id: typing.Annotated[str, 'The unique identifier of the gist.']) - Delete a gist" args_schema=<class 'pydantic.v1.main.gistsdeleteRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5363e0>
name='githublargebeta_gistslistcomments' description='githublargebeta_gistslistcomments(gist_id: typing.Annotated[str, \'The unique identifier of the gist.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the comments on a gist.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.' args_schema=<class 'pydantic.v1.main.gistslistcommentsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5365c0>
name='githublargebeta_gistscreatecomment' description='githublargebeta_gistscreatecomment(gist_id: typing.Annotated[str, \'The unique identifier of the gist.\'], body: typing.Annotated[str, \'The comment text.\']) - Creates a comment on a gist.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.' args_schema=<class 'pydantic.v1.main.gistscreatecommentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5362a0>
name='githublargebeta_gistsgetcomment' description='githublargebeta_gistsgetcomment(gist_id: typing.Annotated[str, \'The unique identifier of the gist.\'], comment_id: typing.Annotated[int, \'The unique identifier of the comment.\']) - Gets a comment on a gist.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.' args_schema=<class 'pydantic.v1.main.gistsgetcommentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b536700>
name='githublargebeta_gistsupdatecomment' description='githublargebeta_gistsupdatecomment(gist_id: typing.Annotated[str, \'The unique identifier of the gist.\'], comment_id: typing.Annotated[int, \'The unique identifier of the comment.\'], body: typing.Annotated[str, \'The comment text.\']) - Updates a comment on a gist.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.' args_schema=<class 'pydantic.v1.main.gistsupdatecommentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b536b60>
name='githublargebeta_gistsdeletecomment' description="githublargebeta_gistsdeletecomment(gist_id: typing.Annotated[str, 'The unique identifier of the gist.'], comment_id: typing.Annotated[int, 'The unique identifier of the comment.']) - Delete a gist comment" args_schema=<class 'pydantic.v1.main.gistsdeletecommentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b536980>
name='githublargebeta_gistslistcommits' description='githublargebeta_gistslistcommits(gist_id: typing.Annotated[str, \'The unique identifier of the gist.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List gist commits' args_schema=<class 'pydantic.v1.main.gistslistcommitsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b536fc0>
name='githublargebeta_gistslistforks' description='githublargebeta_gistslistforks(gist_id: typing.Annotated[str, \'The unique identifier of the gist.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List gist forks' args_schema=<class 'pydantic.v1.main.gistslistforksRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5371a0>
name='githublargebeta_gistsfork' description="githublargebeta_gistsfork(gist_id: typing.Annotated[str, 'The unique identifier of the gist.']) - Fork a gist" args_schema=<class 'pydantic.v1.main.gistsforkRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b537420>
name='githublargebeta_gistscheckisstarred' description="githublargebeta_gistscheckisstarred(gist_id: typing.Annotated[str, 'The unique identifier of the gist.']) - Check if a gist is starred" args_schema=<class 'pydantic.v1.main.gistscheckisstarredRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b536d40>
name='githublargebeta_gistsstar' description='githublargebeta_gistsstar(gist_id: typing.Annotated[str, \'The unique identifier of the gist.\']) - Note that you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."' args_schema=<class 'pydantic.v1.main.gistsstarRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5376a0>
name='githublargebeta_gistsunstar' description="githublargebeta_gistsunstar(gist_id: typing.Annotated[str, 'The unique identifier of the gist.']) - Unstar a gist" args_schema=<class 'pydantic.v1.main.gistsunstarRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5379c0>
name='githublargebeta_gistsgetrevision' description='githublargebeta_gistsgetrevision(gist_id: typing.Annotated[str, \'The unique identifier of the gist.\'], sha: typing.Annotated[str, \'sha\']) - Gets a specified gist revision.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.' args_schema=<class 'pydantic.v1.main.gistsgetrevisionRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b537880>
name='githublargebeta_gitignoregetalltemplates' description='githublargebeta_gitignoregetalltemplates() - List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/repos/repos#create-a-repository-for-the-authenticated-user).' args_schema=<class 'pydantic.v1.main.gitignoregetalltemplatesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b537b00>
name='githublargebeta_gitignoregettemplate' description='githublargebeta_gitignoregettemplate(name: typing.Annotated[str, \'name\']) - Get the content of a gitignore template.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw .gitignore contents.' args_schema=<class 'pydantic.v1.main.gitignoregettemplateRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b537c40>
name='githublargebeta_appslistreposaccessibletoinstallation' description='githublargebeta_appslistreposaccessibletoinstallation(per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List repositories that an app installation can access.' args_schema=<class 'pydantic.v1.main.appslistreposaccessibletoinstallationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b537ec0>
name='githublargebeta_appsrevokeinstallationaccesstoken' description='githublargebeta_appsrevokeinstallationaccesstoken() - Revokes the installation token you\'re using to authenticate as an installation and access this endpoint.\n\nOnce an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/rest/apps/apps#create-an-installation-access-token-for-an-app)" endpoint.' args_schema=<class 'pydantic.v1.main.appsrevokeinstallationaccesstokenRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5800e0>
name='githublargebeta_issueslist' description='githublargebeta_issueslist(labels: typing.Annotated[str, \'A list of comma separated label names. Example: `bug,ui,@high`\'] = None, since: typing.Annotated[str, \'Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, collab: typing.Annotated[bool, \'collab\'] = None, orgs: typing.Annotated[bool, \'orgs\'] = None, owned: typing.Annotated[bool, \'owned\'] = None, pulls: typing.Annotated[bool, \'pulls\'] = None, filter: typing.Annotated[str, "Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you\'re subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation."] = \'assigned\', state: typing.Annotated[str, \'Indicates the state of the issues to return.\'] = \'open\', sort_: typing.Annotated[str, \'What to sort results by.\'] = \'created\', direction: typing.Annotated[str, \'The direction to sort the results by.\'] = \'desc\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List issues assigned to the authenticated user across all visible repositories including owned repositories, member\nrepositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not\nnecessarily assigned to you.\n\n**Note**: GitHub\'s REST API considers every pull request an issue, but not every issue is a pull request. For this\nreason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull\nrequest id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.issueslistRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b580040>
name='githublargebeta_licensesgetallcommonlyused' description='githublargebeta_licensesgetallcommonlyused(featured: typing.Annotated[bool, \'featured\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the most commonly used licenses on GitHub. For more information, see "[Licensing a repository ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository)."' args_schema=<class 'pydantic.v1.main.licensesgetallcommonlyusedRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b580220>
name='githublargebeta_licensesget' description='githublargebeta_licensesget(license: typing.Annotated[str, \'license\']) - Gets information about a specific license. For more information, see "[Licensing a repository ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository)."' args_schema=<class 'pydantic.v1.main.licensesgetRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5802c0>
name='githublargebeta_markdownrender' description="githublargebeta_markdownrender(text: typing.Annotated[str, 'The Markdown text to render in HTML.'], context: typing.Annotated[str, 'The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository.'] = None, mode: typing.Annotated[str, 'The rendering mode.'] = 'markdown') - Render a Markdown document" args_schema=<class 'pydantic.v1.main.markdownrenderRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b580d60>
name='githublargebeta_markdownrenderraw' description='githublargebeta_markdownrenderraw() - You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.' args_schema=<class 'pydantic.v1.main.markdownrenderrawRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b580ae0>
name='githublargebeta_appsgetsubscriptionplanforaccount' description="githublargebeta_appsgetsubscriptionplanforaccount(account_id: typing.Annotated[int, 'account_id parameter']) - Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint." args_schema=<class 'pydantic.v1.main.appsgetsubscriptionplanforaccountRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b581120>
name='githublargebeta_appslistplans' description='githublargebeta_appslistplans(per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all plans that are part of your GitHub Marketplace listing.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.' args_schema=<class 'pydantic.v1.main.appslistplansRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b580ea0>
name='githublargebeta_appslistaccountsforplan' description='githublargebeta_appslistaccountsforplan(plan_id: typing.Annotated[int, \'The unique identifier of the plan.\'], direction: typing.Annotated[str, \'To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter.\'] = None, sort_: typing.Annotated[str, \'The property to sort the results by.\'] = \'created\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won\'t be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.' args_schema=<class 'pydantic.v1.main.appslistaccountsforplanRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b581300>
name='githublargebeta_appsgetsubscriptionplanforaccountstubbed' description="githublargebeta_appsgetsubscriptionplanforaccountstubbed(account_id: typing.Annotated[int, 'account_id parameter']) - Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint." args_schema=<class 'pydantic.v1.main.appsgetsubscriptionplanforaccountstubbedRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5814e0>
name='githublargebeta_appslistplansstubbed' description='githublargebeta_appslistplansstubbed(per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all plans that are part of your GitHub Marketplace listing.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.' args_schema=<class 'pydantic.v1.main.appslistplansstubbedRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5811c0>
name='githublargebeta_appslistaccountsforplanstubbed' description='githublargebeta_appslistaccountsforplanstubbed(plan_id: typing.Annotated[int, \'The unique identifier of the plan.\'], direction: typing.Annotated[str, \'To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter.\'] = None, sort_: typing.Annotated[str, \'The property to sort the results by.\'] = \'created\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won\'t be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.' args_schema=<class 'pydantic.v1.main.appslistaccountsforplanstubbedRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5819e0>
name='githublargebeta_metaget' description='githublargebeta_metaget() - Returns meta information about GitHub, including a list of GitHub\'s IP addresses. For more information, see "[About GitHub\'s IP addresses](https://docs.github.com/articles/about-github-s-ip-addresses/)."\n\nThe API\'s response also includes a list of GitHub\'s domain names.\n\nThe values shown in the documentation\'s response are example values. You must always query the API directly to get the latest values.\n\n**Note:** This endpoint returns both IPv4 and IPv6 addresses. However, not all features support IPv6. You should refer to the specific documentation for each feature to determine if IPv6 is supported.' args_schema=<class 'pydantic.v1.main.metagetRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5818a0>
name='githublargebeta_activitylistpubliceventsforreponetwork' description='githublargebeta_activitylistpubliceventsforreponetwork(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List public events for a network of repositories' args_schema=<class 'pydantic.v1.main.activitylistpubliceventsforreponetworkRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b581bc0>
name='githublargebeta_activitylistnotificationsforauthenticateduser' description='githublargebeta_activitylistnotificationsforauthenticateduser(since: typing.Annotated[str, \'Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, before: typing.Annotated[str, \'Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, all: typing.Annotated[bool, \'If `true`, show notifications marked as read.\'] = False, participating: typing.Annotated[bool, \'If `true`, only shows notifications in which the user is directly participating or mentioned.\'] = False, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, per_page: typing.Annotated[int, "The number of results per page (max 50). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 50) - List all notifications for the current user, sorted by most recently updated.' args_schema=<class 'pydantic.v1.main.activitylistnotificationsforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b581f80>
name='githublargebeta_activitymarknotificationsasread' description='githublargebeta_activitymarknotificationsasread(last_read_at: typing.Annotated[str, \'Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.\'] = None, read: typing.Annotated[bool, \'Whether the notification has been read.\'] = None) - Marks all notifications as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.' args_schema=<class 'pydantic.v1.main.activitymarknotificationsasreadRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b582020>
name='githublargebeta_activitygetthread' description="githublargebeta_activitygetthread(thread_id: typing.Annotated[int, 'The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).']) - Gets information about a notification thread." args_schema=<class 'pydantic.v1.main.activitygetthreadRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b582340>
name='githublargebeta_activitymarkthreadasread' description='githublargebeta_activitymarkthreadasread(thread_id: typing.Annotated[int, \'The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).\']) - Marks a thread as "read." Marking a thread as "read" is equivalent to clicking a notification in your notification inbox on GitHub: https://github.com/notifications.' args_schema=<class 'pydantic.v1.main.activitymarkthreadasreadRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b582980>
name='githublargebeta_activitymarkthreadasdone' description='githublargebeta_activitymarkthreadasdone(thread_id: typing.Annotated[int, \'The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).\']) - Marks a thread as "done." Marking a thread as "done" is equivalent to marking a notification in your notification inbox on GitHub as done: https://github.com/notifications.' args_schema=<class 'pydantic.v1.main.activitymarkthreadasdoneRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b582ac0>
name='githublargebeta_activitygetthreadsubscriptionforauthenticateduser' description="githublargebeta_activitygetthreadsubscriptionforauthenticateduser(thread_id: typing.Annotated[int, 'The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).']) - This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/activity/watching#get-a-repository-subscription).\n\nNote that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread." args_schema=<class 'pydantic.v1.main.activitygetthreadsubscriptionforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b582c00>
name='githublargebeta_activitysetthreadsubscription' description="githublargebeta_activitysetthreadsubscription(thread_id: typing.Annotated[int, 'The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).'], ignored: typing.Annotated[bool, 'Whether to block all notifications from a thread.'] = False) - If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.\n\nYou can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.\n\nUnsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/activity/notifications#delete-a-thread-subscription) endpoint." args_schema=<class 'pydantic.v1.main.activitysetthreadsubscriptionRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5827a0>
name='githublargebeta_activitydeletethreadsubscription' description="githublargebeta_activitydeletethreadsubscription(thread_id: typing.Annotated[int, 'The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)).']) - Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/activity/notifications#set-a-thread-subscription) endpoint and set `ignore` to `true`." args_schema=<class 'pydantic.v1.main.activitydeletethreadsubscriptionRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b583060>
name='githublargebeta_metagetoctocat' description='githublargebeta_metagetoctocat(s: typing.Annotated[str, "The words to show in Octocat\'s speech bubble"] = None) - Get the octocat as ASCII art' args_schema=<class 'pydantic.v1.main.metagetoctocatRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b582e80>
name='githublargebeta_orgslist' description='githublargebeta_orgslist(since: typing.Annotated[int, \'An organization ID. Only return organizations with an ID greater than this ID.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Lists all organizations, in the order that they were created.\n\n**Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of organizations.' args_schema=<class 'pydantic.v1.main.orgslistRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b582d40>
name='githublargebeta_orgsget' description="githublargebeta_orgsget(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.']) - Gets information about an organization.\n\nWhen the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).\n\nTo see the full details about an organization, the authenticated user must be an organization owner.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to see the full details about an organization.\n\nTo see information about an organization's GitHub plan, GitHub Apps need the `Organization plan` permission." args_schema=<class 'pydantic.v1.main.orgsgetRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5832e0>
name='githublargebeta_orgsupdate' description='githublargebeta_orgsupdate(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], billing_email: typing.Annotated[str, \'Billing email address. This address is not publicized.\'] = None, company: typing.Annotated[str, \'The company name.\'] = None, email: typing.Annotated[str, \'The publicly visible email address.\'] = None, twitter_username: typing.Annotated[str, \'The Twitter username of the company.\'] = None, location: typing.Annotated[str, \'The location.\'] = None, name: typing.Annotated[str, \'The shorthand name of the company.\'] = None, description: typing.Annotated[str, \'The description of the company.\'] = None, has_organization_projects: typing.Annotated[bool, \'Whether an organization can use organization projects.\'] = None, has_repository_projects: typing.Annotated[bool, \'Whether repositories that belong to the organization can use repository projects.\'] = None, members_can_create_internal_repositories: typing.Annotated[bool, "Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see \'[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\' in the GitHub Help documentation."] = None, members_can_create_private_repositories: typing.Annotated[bool, "Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see \'[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\' in the GitHub Help documentation."] = None, members_can_create_public_repositories: typing.Annotated[bool, "Whether organization members can create public repositories, which are visible to anyone. For more information, see \'[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\' in the GitHub Help documentation."] = None, members_allowed_repository_creation_type: typing.Annotated[str, \'Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud. **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.\'] = None, blog: typing.Annotated[str, \'blog__\'] = None, advanced_security_enabled_for_new_repositories: typing.Annotated[bool, "Whether GitHub Advanced Security is automatically enabled for new repositories.To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \'[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\'You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request."] = None, dependabot_alerts_enabled_for_new_repositories: typing.Annotated[bool, "Whether Dependabot alerts is automatically enabled for new repositories.To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \'[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\'You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request."] = None, dependabot_security_updates_enabled_for_new_repositories: typing.Annotated[bool, "Whether Dependabot security updates is automatically enabled for new repositories.To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \'[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\'You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request."] = None, dependency_graph_enabled_for_new_repositories: typing.Annotated[bool, "Whether dependency graph is automatically enabled for new repositories.To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \'[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\'You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request."] = None, secret_scanning_enabled_for_new_repositories: typing.Annotated[bool, "Whether secret scanning is automatically enabled for new repositories.To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \'[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\'You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request."] = None, secret_scanning_push_protection_enabled_for_new_repositories: typing.Annotated[bool, "Whether secret scanning push protection is automatically enabled for new repositories.To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \'[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\'You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request."] = None, secret_scanning_push_protection_custom_link_enabled: typing.Annotated[bool, \'Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.\'] = None, secret_scanning_push_protection_custom_link: typing.Annotated[str, \'If `secret_scanning_push_protection_custom_link_enabled` is true, the URL that will be displayed to contributors who are blocked from pushing a secret.\'] = None, default_repository_permission: typing.Annotated[str, \'Default permission level members have for organization repositories.\'] = \'read\', members_can_create_repositories: typing.Annotated[bool, \'Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.\'] = True, members_can_create_pages: typing.Annotated[bool, \'Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.\'] = True, members_can_create_public_pages: typing.Annotated[bool, \'Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.\'] = True, members_can_create_private_pages: typing.Annotated[bool, \'Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.\'] = True, members_can_fork_private_repositories: typing.Annotated[bool, \'Whether organization members can fork private organization repositories.\'] = False, web_commit_signoff_required: typing.Annotated[bool, "Whether contributors to organization repositories are required to sign off on commits they make through GitHub\'s web interface."] = False) - **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).\n\nUpdates the organization\'s profile and member privileges.\n\nThe authenticated user must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` or `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.orgsupdateRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5834c0>
name='githublargebeta_orgsdelete' description="githublargebeta_orgsdelete(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.']) - Deletes an organization and all its repositories.\n\nThe organization login will be unavailable for 90 days after deletion.\n\nPlease review the Terms of Service regarding account deletion before using this endpoint:\n\nhttps://docs.github.com/site-policy/github-terms/github-terms-of-service" args_schema=<class 'pydantic.v1.main.orgsdeleteRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5c4040>
name='githublargebeta_actionsgetactionscacheusagefororg' description="githublargebeta_actionsgetactionscacheusagefororg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.']) - Gets the total GitHub Actions cache usage for an organization.\nThe data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.\n\nOAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsgetactionscacheusagefororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5c4ae0>
name='githublargebeta_actionsgetactionscacheusagebyrepofororg' description='githublargebeta_actionsgetactionscacheusagebyrepofororg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists repositories and their GitHub Actions cache usage for an organization.\nThe data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.\n\nOAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionsgetactionscacheusagebyrepofororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5c4c20>
name='githublargebeta_oidcgetoidccustomsubtemplatefororg' description="githublargebeta_oidcgetoidccustomsubtemplatefororg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.']) - Gets the customization template for an OpenID Connect (OIDC) subject claim.\n\nOAuth app tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.oidcgetoidccustomsubtemplatefororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5c49a0>
name='githublargebeta_oidcupdateoidccustomsubtemplatefororg' description="githublargebeta_oidcupdateoidccustomsubtemplatefororg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], include_claim_keys: typing.Annotated[composio_langchain.composio_tool_spec.IncludeClaimKeys, 'Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.__Actions OIDC Subject customization']) - Creates or updates the customization template for an OpenID Connect (OIDC) subject claim.\n\nOAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.oidcupdateoidccustomsubtemplatefororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5c5620>
name='githublargebeta_actionsgetgithubactionspermissionsorganization' description="githublargebeta_actionsgetgithubactionspermissionsorganization(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.']) - Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsgetgithubactionspermissionsorganizationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5c5760>
name='githublargebeta_actionssetgithubactionspermissionsorganization' description="githublargebeta_actionssetgithubactionspermissionsorganization(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], enabled_repositories: typing.Annotated[str, 'The policy that controls the repositories in the organization that are allowed to run GitHub Actions.'], allowed_actions: typing.Annotated[str, 'The permissions policy that controls the actions and reusable workflows that are allowed to run.'] = None) - Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionssetgithubactionspermissionsorganizationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5c5940>
name='githublargebeta_actionslistselectedrepositoriesenabledgithubactionsorganization' description='githublargebeta_actionslistselectedrepositoriesenabledgithubactionsorganization(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionslistselectedrepositoriesenabledgithubactionsorganizationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5c54e0>
name='githublargebeta_actionssetselectedrepositoriesenabledgithubactionsorganization' description='githublargebeta_actionssetselectedrepositoriesenabledgithubactionsorganization(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], selected_repository_ids: typing.Annotated[composio_langchain.composio_tool_spec.SelectedRepositoryIds, \'List of repository IDs to enable for GitHub Actions.\']) - Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."\n\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionssetselectedrepositoriesenabledgithubactionsorganizationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5c5e40>
name='githublargebeta_actionsenableselectedrepositorygithubactionsorganization' description='githublargebeta_actionsenableselectedrepositorygithubactionsorganization(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], repository_id: typing.Annotated[int, \'The unique identifier of the repository.\']) - Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionsenableselectedrepositorygithubactionsorganizationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5c5da0>
name='githublargebeta_actionsdisableselectedrepositorygithubactionsorganization' description='githublargebeta_actionsdisableselectedrepositorygithubactionsorganization(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], repository_id: typing.Annotated[int, \'The unique identifier of the repository.\']) - Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionsdisableselectedrepositorygithubactionsorganizationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5c5f80>
name='githublargebeta_actionsgetallowedactionsorganization' description='githublargebeta_actionsgetallowedactionsorganization(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\']) - Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionsgetallowedactionsorganizationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5c63e0>
name='githublargebeta_actionssetallowedactionsorganization' description='githublargebeta_actionssetallowedactionsorganization(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], github_owned_allowed: typing.Annotated[bool, \'Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.\'] = None, verified_allowed: typing.Annotated[bool, \'Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators.\'] = None, patterns_allowed: typing.Annotated[composio_langchain.composio_tool_spec.PatternsAllowed, \'Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.**Note**: The `patterns_allowed` setting only applies to public repositories.\'] = None) - Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionssetallowedactionsorganizationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5c6ca0>
name='githublargebeta_actionsgetgithubactionsdefaultworkflowpermissionsorganization' description='githublargebeta_actionsgetgithubactionsdefaultworkflowpermissionsorganization(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\']) - Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization,\nas well as whether GitHub Actions can submit approving pull request reviews. For more information, see\n"[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionsgetgithubactionsdefaultworkflowpermissionsorganizationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5c6de0>
name='githublargebeta_actionssetgithubactionsdefaultworkflowpermissionsorganization' description='githublargebeta_actionssetgithubactionsdefaultworkflowpermissionsorganization(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], default_workflow_permissions: typing.Annotated[str, \'The default workflow permissions granted to the GITHUB_TOKEN when running workflows.\'] = None, can_approve_pull_request_reviews: typing.Annotated[bool, \'Whether GitHub Actions can approve pull requests. Enabling this can be a security risk.\'] = None) - Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions\ncan submit approving pull request reviews. For more information, see\n"[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionssetgithubactionsdefaultworkflowpermissionsorganizationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5c6d40>
name='githublargebeta_actionslistselfhostedrunnersfororg' description='githublargebeta_actionslistselfhostedrunnersfororg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], name: typing.Annotated[str, \'The name of a self-hosted runner.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all self-hosted runners configured in an organization.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.' args_schema=<class 'pydantic.v1.main.actionslistselfhostedrunnersfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5c6b60>
name='githublargebeta_actionslistrunnerapplicationsfororg' description="githublargebeta_actionslistrunnerapplicationsfororg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.']) - Lists binaries for the runner application that you can download and run.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.  If the repository is private, the `repo` scope is also required." args_schema=<class 'pydantic.v1.main.actionslistrunnerapplicationsfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5c6840>
name='githublargebeta_actionsgeneraterunnerjitconfigfororg' description="githublargebeta_actionsgeneraterunnerjitconfigfororg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], name: typing.Annotated[str, 'The name of the new runner.'], runner_group_id: typing.Annotated[int, 'The ID of the runner group to register the runner to.'], labels: typing.Annotated[composio_langchain.composio_tool_spec.Labels, 'The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100.'], work_folder: typing.Annotated[str, 'The working directory to be used for job execution, relative to the runner install directory.'] = '_work') - Generates a configuration that can be passed to the runner application at startup.\n\nThe authenticated user must have admin access to the organization.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsgeneraterunnerjitconfigfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5c7240>
name='githublargebeta_actionscreateregistrationtokenfororg' description="githublargebeta_actionscreateregistrationtokenfororg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.']) - Returns a token that you can pass to the `config` script. The token expires after one hour.\n\nFor example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:\n\n```\n./config.sh --url https://github.com/octo-org --token TOKEN\n```\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionscreateregistrationtokenfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5c7380>
name='githublargebeta_actionscreateremovetokenfororg' description="githublargebeta_actionscreateremovetokenfororg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.']) - Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.\n\nFor example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:\n\n```\n./config.sh remove --token TOKEN\n```\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionscreateremovetokenfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5c7560>
name='githublargebeta_actionsgetselfhostedrunnerfororg' description="githublargebeta_actionsgetselfhostedrunnerfororg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], runner_id: typing.Annotated[int, 'Unique identifier of the self-hosted runner.']) - Gets a specific self-hosted runner configured in an organization.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required." args_schema=<class 'pydantic.v1.main.actionsgetselfhostedrunnerfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5c74c0>
name='githublargebeta_actionsdeleteselfhostedrunnerfromorg' description="githublargebeta_actionsdeleteselfhostedrunnerfromorg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], runner_id: typing.Annotated[int, 'Unique identifier of the self-hosted runner.']) - Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsdeleteselfhostedrunnerfromorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5c76a0>
name='githublargebeta_actionslistlabelsforselfhostedrunnerfororg' description="githublargebeta_actionslistlabelsforselfhostedrunnerfororg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], runner_id: typing.Annotated[int, 'Unique identifier of the self-hosted runner.']) - Lists all labels for a self-hosted runner configured in an organization.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required." args_schema=<class 'pydantic.v1.main.actionslistlabelsforselfhostedrunnerfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5c72e0>
name='githublargebeta_actionsaddcustomlabelstoselfhostedrunnerfororg' description="githublargebeta_actionsaddcustomlabelstoselfhostedrunnerfororg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], runner_id: typing.Annotated[int, 'Unique identifier of the self-hosted runner.'], labels: typing.Annotated[composio_langchain.composio_tool_spec.Labels, 'The names of the custom labels to add to the runner.']) - Adds custom labels to a self-hosted runner configured in an organization.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsaddcustomlabelstoselfhostedrunnerfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5c7ce0>
name='githublargebeta_actionssetcustomlabelsforselfhostedrunnerfororg' description="githublargebeta_actionssetcustomlabelsforselfhostedrunnerfororg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], runner_id: typing.Annotated[int, 'Unique identifier of the self-hosted runner.'], labels: typing.Annotated[composio_langchain.composio_tool_spec.Labels, 'The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.']) - Remove all previous custom labels and set the new custom labels for a specific\nself-hosted runner configured in an organization.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required." args_schema=<class 'pydantic.v1.main.actionssetcustomlabelsforselfhostedrunnerfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7085e0>
name='githublargebeta_actionsremoveallcustomlabelsfromselfhostedrunnerfororg' description="githublargebeta_actionsremoveallcustomlabelsfromselfhostedrunnerfororg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], runner_id: typing.Annotated[int, 'Unique identifier of the self-hosted runner.']) - Remove all custom labels from a self-hosted runner configured in an\norganization. Returns the remaining read-only labels from the runner.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required." args_schema=<class 'pydantic.v1.main.actionsremoveallcustomlabelsfromselfhostedrunnerfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b708540>
name='githublargebeta_actionsremovecustomlabelfromselfhostedrunnerfororg' description='githublargebeta_actionsremovecustomlabelfromselfhostedrunnerfororg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], runner_id: typing.Annotated[int, \'Unique identifier of the self-hosted runner.\'], name: typing.Annotated[str, "The name of a self-hosted runner\'s custom label."]) - Remove a custom label from a self-hosted runner configured\nin an organization. Returns the remaining labels from the runner.\n\nThis endpoint returns a `404 Not Found` status if the custom label is not\npresent on the runner.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.' args_schema=<class 'pydantic.v1.main.actionsremovecustomlabelfromselfhostedrunnerfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7089a0>
name='githublargebeta_actionslistorgsecrets' description='githublargebeta_actionslistorgsecrets(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all secrets available in an organization without revealing their\nencrypted values.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.' args_schema=<class 'pydantic.v1.main.actionslistorgsecretsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b708c20>
name='githublargebeta_actionsgetorgpublickey' description="githublargebeta_actionsgetorgpublickey(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.']) - Gets your public key, which you need to encrypt secrets. You need to\nencrypt a secret before you can create or update secrets.\n\nThe authenticated user must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsgetorgpublickeyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b708720>
name='githublargebeta_actionsgetorgsecret' description="githublargebeta_actionsgetorgsecret(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], secret_name: typing.Annotated[str, 'The name of the secret.']) - Gets a single organization secret without revealing its encrypted value.\n\nThe authenticated user must have collaborator access to a repository to create, update, or read secrets\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsgetorgsecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5c7ec0>
name='githublargebeta_actionscreateorupdateorgsecret' description='githublargebeta_actionscreateorupdateorgsecret(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], secret_name: typing.Annotated[str, \'The name of the secret.\'], visibility: typing.Annotated[str, \'Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.\'], encrypted_value: typing.Annotated[str, \'Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/actions/secrets#get-an-organization-public-key) endpoint.\'] = None, key_id: typing.Annotated[str, \'ID of the key you used to encrypt the secret.\'] = None, selected_repository_ids: typing.Annotated[composio_langchain.composio_tool_spec.SelectedRepositoryIds, \'An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/actions/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/actions/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints.\'] = None) - Creates or updates an organization secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionscreateorupdateorgsecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b708360>
name='githublargebeta_actionsdeleteorgsecret' description="githublargebeta_actionsdeleteorgsecret(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], secret_name: typing.Annotated[str, 'The name of the secret.']) - Deletes a secret in an organization using the secret name.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsdeleteorgsecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7080e0>
name='githublargebeta_actionslistselectedreposfororgsecret' description='githublargebeta_actionslistselectedreposfororgsecret(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], secret_name: typing.Annotated[str, \'The name of the secret.\'], page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Lists all repositories that have been selected when the `visibility`\nfor repository access to a secret is set to `selected`.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.' args_schema=<class 'pydantic.v1.main.actionslistselectedreposfororgsecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b708220>
name='githublargebeta_actionssetselectedreposfororgsecret' description="githublargebeta_actionssetselectedreposfororgsecret(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], secret_name: typing.Annotated[str, 'The name of the secret.'], selected_repository_ids: typing.Annotated[composio_langchain.composio_tool_spec.SelectedRepositoryIds, 'An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Add selected repository to an organization secret](https://docs.github.com/rest/actions/secrets#add-selected-repository-to-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints.']) - Replaces all repositories for an organization secret when the `visibility`\nfor repository access is set to `selected`. The visibility is set when you [Create\nor update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required." args_schema=<class 'pydantic.v1.main.actionssetselectedreposfororgsecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b709bc0>
name='githublargebeta_actionsaddselectedrepotoorgsecret' description="githublargebeta_actionsaddselectedrepotoorgsecret(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], secret_name: typing.Annotated[str, 'The name of the secret.'], repository_id: typing.Annotated[int, 'repository_id']) - Adds a repository to an organization secret when the `visibility` for\nrepository access is set to `selected`. For more information about setting the visibility, see [Create or\nupdate an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsaddselectedrepotoorgsecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b709d00>
name='githublargebeta_actionsremoveselectedrepofromorgsecret' description="githublargebeta_actionsremoveselectedrepofromorgsecret(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], secret_name: typing.Annotated[str, 'The name of the secret.'], repository_id: typing.Annotated[int, 'repository_id']) - Removes a repository from an organization secret when the `visibility`\nfor repository access is set to `selected`. The visibility is set when you [Create\nor update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required." args_schema=<class 'pydantic.v1.main.actionsremoveselectedrepofromorgsecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5c7100>
name='githublargebeta_actionslistorgvariables' description='githublargebeta_actionslistorgvariables(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 30). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 10, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all organization variables.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.' args_schema=<class 'pydantic.v1.main.actionslistorgvariablesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b5c7420>
name='githublargebeta_actionscreateorgvariable' description="githublargebeta_actionscreateorgvariable(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], name: typing.Annotated[str, 'The name of the variable.'], value: typing.Annotated[str, 'The value of the variable.'], visibility: typing.Annotated[str, 'The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.'], selected_repository_ids: typing.Annotated[composio_langchain.composio_tool_spec.SelectedRepositoryIds, 'An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.'] = None) - Creates an organization variable that you can reference in a GitHub Actions workflow.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionscreateorgvariableRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b708680>
name='githublargebeta_actionsgetorgvariable' description="githublargebeta_actionsgetorgvariable(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], name: typing.Annotated[str, 'The name of the variable.']) - Gets a specific variable in an organization.\n\nThe authenticated user must have collaborator access to a repository to create, update, or read variables.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsgetorgvariableRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7087c0>
name='githublargebeta_actionsupdateorgvariable' description="githublargebeta_actionsupdateorgvariable(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], name: typing.Annotated[str, 'The name of the variable.'] = None, value: typing.Annotated[str, 'The value of the variable.'] = None, visibility: typing.Annotated[str, 'The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.'] = None, selected_repository_ids: typing.Annotated[composio_langchain.composio_tool_spec.SelectedRepositoryIds, 'An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.'] = None) - Updates an organization variable that you can reference in a GitHub Actions workflow.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required." args_schema=<class 'pydantic.v1.main.actionsupdateorgvariableRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b70aca0>
name='githublargebeta_actionsdeleteorgvariable' description="githublargebeta_actionsdeleteorgvariable(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], name: typing.Annotated[str, 'The name of the variable.']) - Deletes an organization variable using the variable name.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsdeleteorgvariableRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b70ac00>
name='githublargebeta_actionslistselectedreposfororgvariable' description='githublargebeta_actionslistselectedreposfororgvariable(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], name: typing.Annotated[str, \'The name of the variable.\'], page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Lists all repositories that can access an organization variable\nthat is available to selected repositories.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.' args_schema=<class 'pydantic.v1.main.actionslistselectedreposfororgvariableRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b70ad40>
name='githublargebeta_actionssetselectedreposfororgvariable' description="githublargebeta_actionssetselectedreposfororgvariable(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], name: typing.Annotated[str, 'The name of the variable.'], selected_repository_ids: typing.Annotated[composio_langchain.composio_tool_spec.SelectedRepositoryIds, 'The IDs of the repositories that can access the organization variable.']) - Replaces all repositories for an organization variable that is available\nto selected repositories. Organization variables that are available to selected\nrepositories have their `visibility` field set to `selected`.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required." args_schema=<class 'pydantic.v1.main.actionssetselectedreposfororgvariableRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b708180>
name='githublargebeta_actionsaddselectedrepotoorgvariable' description="githublargebeta_actionsaddselectedrepotoorgvariable(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], name: typing.Annotated[str, 'The name of the variable.'], repository_id: typing.Annotated[int, 'repository_id']) - Adds a repository to an organization variable that is available to selected repositories.\nOrganization variables that are available to selected repositories have their `visibility` field set to `selected`.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsaddselectedrepotoorgvariableRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b708040>
name='githublargebeta_actionsremoveselectedrepofromorgvariable' description="githublargebeta_actionsremoveselectedrepofromorgvariable(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], name: typing.Annotated[str, 'The name of the variable.'], repository_id: typing.Annotated[int, 'repository_id']) - Removes a repository from an organization variable that is\navailable to selected repositories. Organization variables that are available to\nselected repositories have their `visibility` field set to `selected`.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required." args_schema=<class 'pydantic.v1.main.actionsremoveselectedrepofromorgvariableRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7094e0>
name='githublargebeta_orgslistblockedusers' description='githublargebeta_orgslistblockedusers(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List the users blocked by an organization.' args_schema=<class 'pydantic.v1.main.orgslistblockedusersRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b70ae80>
name='githublargebeta_orgscheckblockeduser' description="githublargebeta_orgscheckblockeduser(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], username: typing.Annotated[str, 'The handle for the GitHub user account.']) - Returns a 204 if the given user is blocked by the given organization. Returns a 404 if the organization is not blocking the user, or if the user account has been identified as spam by GitHub." args_schema=<class 'pydantic.v1.main.orgscheckblockeduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7082c0>
name='githublargebeta_orgsblockuser' description="githublargebeta_orgsblockuser(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], username: typing.Annotated[str, 'The handle for the GitHub user account.']) - Blocks the given user on behalf of the specified organization and returns a 204. If the organization cannot block the given user a 422 is returned." args_schema=<class 'pydantic.v1.main.orgsblockuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b70b4c0>
name='githublargebeta_orgsunblockuser' description="githublargebeta_orgsunblockuser(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], username: typing.Annotated[str, 'The handle for the GitHub user account.']) - Unblocks the given user on behalf of the specified organization." args_schema=<class 'pydantic.v1.main.orgsunblockuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b70b920>
name='githublargebeta_codescanninglistalertsfororg' description='githublargebeta_codescanninglistalertsfororg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], tool_name: typing.Annotated[str, \'The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.\'] = None, tool_guid: typing.Annotated[str, \'The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.\'] = None, before: typing.Annotated[str, "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = None, after: typing.Annotated[str, "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = None, state: typing.Annotated[str, \'If specified, only code scanning alerts with this state will be returned.\'] = None, severity: typing.Annotated[str, \'If specified, only code scanning alerts with this severity will be returned.\'] = None, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, direction: typing.Annotated[str, \'The direction to sort the results by.\'] = \'desc\', sort_: typing.Annotated[str, \'The property by which to sort the results.\'] = \'created\') - Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nThe authenticated user must be an owner or security manager for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` or `repo`s cope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.' args_schema=<class 'pydantic.v1.main.codescanninglistalertsfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b708400>
name='githublargebeta_codespaceslistinorganization' description='githublargebeta_codespaceslistinorganization(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the codespaces associated to a specified organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.codespaceslistinorganizationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b70ab60>
name='githublargebeta_codespacessetcodespacesaccess' description="githublargebeta_codespacessetcodespacesaccess(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], visibility: typing.Annotated[str, 'Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization.'], selected_usernames: typing.Annotated[composio_langchain.composio_tool_spec.SelectedUsernames, 'The usernames of the organization members who should have access to codespaces in the organization. Required when `visibility` is `selected_members`. The provided list of usernames will replace any existing value.'] = None) - Sets which users can access codespaces in an organization. This is synonymous with granting or revoking codespaces access permissions for users according to the visibility.\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacessetcodespacesaccessRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7607c0>
name='githublargebeta_codespacessetcodespacesaccessusers' description='githublargebeta_codespacessetcodespacesaccessusers(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], selected_usernames: typing.Annotated[composio_langchain.composio_tool_spec.SelectedUsernames, \'The usernames of the organization members whose codespaces be billed to the organization.\']) - Codespaces for the specified users will be billed to the organization.\n\nTo use this endpoint, the access settings for the organization must be set to `selected_members`.\nFor information on how to change this setting, see "[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces)."\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.codespacessetcodespacesaccessusersRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b760fe0>
name='githublargebeta_codespacesdeletecodespacesaccessusers' description='githublargebeta_codespacesdeletecodespacesaccessusers(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], selected_usernames: typing.Annotated[composio_langchain.composio_tool_spec.SelectedUsernames, \'The usernames of the organization members whose codespaces should not be billed to the organization.\']) - Codespaces for the specified users will no longer be billed to the organization.\n\nTo use this endpoint, the access settings for the organization must be set to `selected_members`.\nFor information on how to change this setting, see "[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces)."\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.codespacesdeletecodespacesaccessusersRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b761800>
name='githublargebeta_codespaceslistorgsecrets' description='githublargebeta_codespaceslistorgsecrets(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all Codespaces development environment secrets available at the organization-level without revealing their encrypted\nvalues.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.codespaceslistorgsecretsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7091c0>
name='githublargebeta_codespacesgetorgpublickey' description="githublargebeta_codespacesgetorgpublickey(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.']) - Gets a public key for an organization, which is required in order to encrypt secrets. You need to encrypt the value of a secret before you can create or update secrets.\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacesgetorgpublickeyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7616c0>
name='githublargebeta_codespacesgetorgsecret' description="githublargebeta_codespacesgetorgsecret(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], secret_name: typing.Annotated[str, 'The name of the secret.']) - Gets an organization development environment secret without revealing its encrypted value.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacesgetorgsecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7618a0>
name='githublargebeta_codespacescreateorupdateorgsecret' description='githublargebeta_codespacescreateorupdateorgsecret(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], secret_name: typing.Annotated[str, \'The name of the secret.\'], visibility: typing.Annotated[str, \'Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.\'], encrypted_value: typing.Annotated[str, \'The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/codespaces/organization-secrets#get-an-organization-public-key) endpoint.\'] = None, key_id: typing.Annotated[str, \'The ID of the key you used to encrypt the secret.\'] = None, selected_repository_ids: typing.Annotated[composio_langchain.composio_tool_spec.SelectedRepositoryIds, \'An array of repository IDs that can access the organization secret. You can only provide a list of repository IDs when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints.\'] = None) - Creates or updates an organization development environment secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.codespacescreateorupdateorgsecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b760400>
name='githublargebeta_codespacesdeleteorgsecret' description="githublargebeta_codespacesdeleteorgsecret(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], secret_name: typing.Annotated[str, 'The name of the secret.']) - Deletes an organization development environment secret using the secret name.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacesdeleteorgsecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b760360>
name='githublargebeta_codespaceslistselectedreposfororgsecret' description='githublargebeta_codespaceslistselectedreposfororgsecret(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], secret_name: typing.Annotated[str, \'The name of the secret.\'], page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Lists all repositories that have been selected when the `visibility`\nfor repository access to a secret is set to `selected`.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.codespaceslistselectedreposfororgsecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7604a0>
name='githublargebeta_codespacessetselectedreposfororgsecret' description="githublargebeta_codespacessetselectedreposfororgsecret(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], secret_name: typing.Annotated[str, 'The name of the secret.'], selected_repository_ids: typing.Annotated[composio_langchain.composio_tool_spec.SelectedRepositoryIds, 'An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints.']) - Replaces all repositories for an organization development environment secret when the `visibility`\nfor repository access is set to `selected`. The visibility is set when you [Create\nor update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacessetselectedreposfororgsecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b760040>
name='githublargebeta_codespacesaddselectedrepotoorgsecret' description="githublargebeta_codespacesaddselectedrepotoorgsecret(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], secret_name: typing.Annotated[str, 'The name of the secret.'], repository_id: typing.Annotated[int, 'repository_id']) - Adds a repository to an organization development environment secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacesaddselectedrepotoorgsecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b760680>
name='githublargebeta_codespacesremoveselectedrepofromorgsecret' description="githublargebeta_codespacesremoveselectedrepofromorgsecret(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], secret_name: typing.Annotated[str, 'The name of the secret.'], repository_id: typing.Annotated[int, 'repository_id']) - Removes a repository from an organization development environment secret when the `visibility`\nfor repository access is set to `selected`. The visibility is set when you [Create\nor update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacesremoveselectedrepofromorgsecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b760860>
name='githublargebeta_copilotgetcopilotorganizationdetails' description='githublargebeta_copilotgetcopilotorganizationdetails(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\']) - **Note**: This endpoint is in beta and is subject to change.\n\nGets information about an organization\'s Copilot subscription, including seat breakdown\nand code matching policies. To configure these settings, go to your organization\'s settings on GitHub.com.\nFor more information, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-copilot-business-in-your-organization)".\n\nOnly organization owners can configure and view details about the organization\'s Copilot Business subscription.\n\nOAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.copilotgetcopilotorganizationdetailsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b761120>
name='githublargebeta_copilotlistcopilotseats' description='githublargebeta_copilotlistcopilotseats(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 50) - **Note**: This endpoint is in beta and is subject to change.\n\nLists all Copilot seat assignments for an organization that are currently being billed (either active or pending cancellation at the start of the next billing cycle).\n\nOnly organization owners can configure and view details about the organization\'s Copilot Business or Enterprise subscription.\n\nOAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.copilotlistcopilotseatsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7622a0>
name='githublargebeta_copilotaddcopilotseatsforteams' description='githublargebeta_copilotaddcopilotseatsforteams(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], selected_teams: typing.Annotated[composio_langchain.composio_tool_spec.SelectedTeams, \'List of team names within the organization to which to grant access to GitHub Copilot.\']) - **Note**: This endpoint is in beta and is subject to change.\n\nPurchases a GitHub Copilot seat for all users within each specified team.\nThe organization will be billed accordingly. For more information about Copilot pricing, see "[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)".\n\nOnly organization owners can configure GitHub Copilot in their organization.\n\nIn order for an admin to use this endpoint, the organization must have a Copilot Business or Enterprise subscription and a configured suggestion matching policy.\nFor more information about setting up a Copilot subscription, see "[Setting up a Copilot subscription for your organization](https://docs.github.com/billing/managing-billing-for-github-copilot/managing-your-github-copilot-subscription-for-your-organization-or-enterprise)".\nFor more information about setting a suggestion matching policy, see "[Configuring suggestion matching policies for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-github-copilot-in-your-organization#configuring-suggestion-matching-policies-for-github-copilot-in-your-organization)".\n\nOAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.copilotaddcopilotseatsforteamsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b762b60>
name='githublargebeta_copilotcancelcopilotseatassignmentforteams' description='githublargebeta_copilotcancelcopilotseatassignmentforteams(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], selected_teams: typing.Annotated[composio_langchain.composio_tool_spec.SelectedTeams, \'The names of teams from which to revoke access to GitHub Copilot.\']) - **Note**: This endpoint is in beta and is subject to change.\n\nCancels the Copilot seat assignment for all members of each team specified.\nThis will cause the members of the specified team(s) to lose access to GitHub Copilot at the end of the current billing cycle, and the organization will not be billed further for those users.\n\nFor more information about Copilot pricing, see "[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)".\n\nFor more information about disabling access to Copilot Business or Enterprise, see "[Revoking access to GitHub Copilot for specific users in your organization](https://docs.github.com/copilot/managing-copilot/managing-access-for-copilot-in-your-organization#revoking-access-to-github-copilot-for-specific-users-in-your-organization)".\n\nOnly organization owners can configure GitHub Copilot in their organization.\n\nOAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.copilotcancelcopilotseatassignmentforteamsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b763380>
name='githublargebeta_copilotaddcopilotseatsforusers' description='githublargebeta_copilotaddcopilotseatsforusers(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], selected_usernames: typing.Annotated[composio_langchain.composio_tool_spec.SelectedUsernames, \'The usernames of the organization members to be granted access to GitHub Copilot.\']) - **Note**: This endpoint is in beta and is subject to change.\n\nPurchases a GitHub Copilot seat for each user specified.\nThe organization will be billed accordingly. For more information about Copilot pricing, see "[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)".\n\nOnly organization owners can configure GitHub Copilot in their organization.\n\nIn order for an admin to use this endpoint, the organization must have a Copilot Business or Enterprise subscription and a configured suggestion matching policy.\nFor more information about setting up a Copilot subscription, see "[Setting up a Copilot subscription for your organization](https://docs.github.com/billing/managing-billing-for-github-copilot/managing-your-github-copilot-subscription-for-your-organization-or-enterprise)".\nFor more information about setting a suggestion matching policy, see "[Configuring suggestion matching policies for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-github-copilot-in-your-organization#configuring-suggestion-matching-policies-for-github-copilot-in-your-organization)".\n\nOAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.copilotaddcopilotseatsforusersRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b762980>
name='githublargebeta_copilotcancelcopilotseatassignmentforusers' description='githublargebeta_copilotcancelcopilotseatassignmentforusers(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], selected_usernames: typing.Annotated[composio_langchain.composio_tool_spec.SelectedUsernames, \'The usernames of the organization members for which to revoke access to GitHub Copilot.\']) - **Note**: This endpoint is in beta and is subject to change.\n\nCancels the Copilot seat assignment for each user specified.\nThis will cause the specified users to lose access to GitHub Copilot at the end of the current billing cycle, and the organization will not be billed further for those users.\n\nFor more information about Copilot pricing, see "[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)".\n\nFor more information about disabling access to Copilot Business or Enterprise, see "[Revoking access to GitHub Copilot for specific users in your organization](https://docs.github.com/copilot/managing-copilot/managing-access-for-copilot-in-your-organization#revoking-access-to-github-copilot-for-specific-users-in-your-organization)".\n\nOnly organization owners can configure GitHub Copilot in their organization.\n\nOAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.copilotcancelcopilotseatassignmentforusersRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b763560>
name='githublargebeta_dependabotlistalertsfororg' description='githublargebeta_dependabotlistalertsfororg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], state: typing.Annotated[str, \'A comma-separated list of states. If specified, only alerts with these states will be returned.Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`\'] = None, severity: typing.Annotated[str, \'A comma-separated list of severities. If specified, only alerts with these severities will be returned.Can be: `low`, `medium`, `high`, `critical`\'] = None, ecosystem: typing.Annotated[str, \'A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`\'] = None, package: typing.Annotated[str, \'A comma-separated list of package names. If specified, only alerts for these packages will be returned.\'] = None, scope: typing.Annotated[str, \'The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.\'] = None, before: typing.Annotated[str, "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = None, after: typing.Annotated[str, "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = None, last: typing.Annotated[int, \'**Deprecated**. The number of results per page (max 100), starting from the last matching result.This parameter must not be used in combination with `first`.Instead, use `per_page` in combination with `before` to fetch the last page of results.\'] = None, sort_: typing.Annotated[str, "The property by which to sort the results.`created` means when the alert was created.`updated` means when the alert\'s state last changed."] = \'created\', direction: typing.Annotated[str, \'The direction to sort the results by.\'] = \'desc\', first: typing.Annotated[int, \'**Deprecated**. The number of results per page (max 100), starting from the first matching result.This parameter must not be used in combination with `last`.Instead, use `per_page` in combination with `after` to fetch the first page of results.\'] = 30, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Lists Dependabot alerts for an organization.\n\nThe authenticated user must be an owner or security manager for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.' args_schema=<class 'pydantic.v1.main.dependabotlistalertsfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b763880>
name='githublargebeta_dependabotlistorgsecrets' description='githublargebeta_dependabotlistorgsecrets(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all secrets available in an organization without revealing their\nencrypted values.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.dependabotlistorgsecretsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b79c0e0>
name='githublargebeta_dependabotgetorgpublickey' description="githublargebeta_dependabotgetorgpublickey(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.']) - Gets your public key, which you need to encrypt secrets. You need to\nencrypt a secret before you can create or update secrets.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.dependabotgetorgpublickeyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b79c040>
name='githublargebeta_dependabotgetorgsecret' description="githublargebeta_dependabotgetorgsecret(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], secret_name: typing.Annotated[str, 'The name of the secret.']) - Gets a single organization secret without revealing its encrypted value.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.dependabotgetorgsecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b79c180>
name='githublargebeta_dependabotcreateorupdateorgsecret' description='githublargebeta_dependabotcreateorupdateorgsecret(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], secret_name: typing.Annotated[str, \'The name of the secret.\'], visibility: typing.Annotated[str, \'Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.\'], encrypted_value: typing.Annotated[str, \'Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/dependabot/secrets#get-an-organization-public-key) endpoint.\'] = None, key_id: typing.Annotated[str, \'ID of the key you used to encrypt the secret.\'] = None, selected_repository_ids: typing.Annotated[composio_langchain.composio_tool_spec.SelectedRepositoryIds, \'An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints.\'] = None) - Creates or updates an organization secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.dependabotcreateorupdateorgsecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b762fc0>
name='githublargebeta_dependabotdeleteorgsecret' description="githublargebeta_dependabotdeleteorgsecret(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], secret_name: typing.Annotated[str, 'The name of the secret.']) - Deletes a secret in an organization using the secret name.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.dependabotdeleteorgsecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b763060>
name='githublargebeta_dependabotlistselectedreposfororgsecret' description='githublargebeta_dependabotlistselectedreposfororgsecret(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], secret_name: typing.Annotated[str, \'The name of the secret.\'], page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Lists all repositories that have been selected when the `visibility`\nfor repository access to a secret is set to `selected`.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.dependabotlistselectedreposfororgsecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b79c720>
name='githublargebeta_dependabotsetselectedreposfororgsecret' description="githublargebeta_dependabotsetselectedreposfororgsecret(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], secret_name: typing.Annotated[str, 'The name of the secret.'], selected_repository_ids: typing.Annotated[composio_langchain.composio_tool_spec.SelectedRepositoryIds, 'An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints.']) - Replaces all repositories for an organization secret when the `visibility`\nfor repository access is set to `selected`. The visibility is set when you [Create\nor update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.dependabotsetselectedreposfororgsecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b79d120>
name='githublargebeta_dependabotaddselectedrepotoorgsecret' description="githublargebeta_dependabotaddselectedrepotoorgsecret(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], secret_name: typing.Annotated[str, 'The name of the secret.'], repository_id: typing.Annotated[int, 'repository_id']) - Adds a repository to an organization secret when the `visibility` for\nrepository access is set to `selected`. The visibility is set when you [Create or\nupdate an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.dependabotaddselectedrepotoorgsecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b79d260>
name='githublargebeta_dependabotremoveselectedrepofromorgsecret' description="githublargebeta_dependabotremoveselectedrepofromorgsecret(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], secret_name: typing.Annotated[str, 'The name of the secret.'], repository_id: typing.Annotated[int, 'repository_id']) - Removes a repository from an organization secret when the `visibility`\nfor repository access is set to `selected`. The visibility is set when you [Create\nor update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.dependabotremoveselectedrepofromorgsecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b79d300>
name='githublargebeta_packageslistdockermigrationconflictingpackagesfororganization' description="githublargebeta_packageslistdockermigrationconflictingpackagesfororganization(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.']) - Lists all packages that are in a specific organization, are readable by the requesting user, and that encountered a conflict during a Docker migration.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.packageslistdockermigrationconflictingpackagesfororganizationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b762ac0>
name='githublargebeta_activitylistpublicorgevents' description='githublargebeta_activitylistpublicorgevents(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List public organization events' args_schema=<class 'pydantic.v1.main.activitylistpublicorgeventsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b762ca0>
name='githublargebeta_orgslistfailedinvitations' description='githublargebeta_orgslistfailedinvitations(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.' args_schema=<class 'pydantic.v1.main.orgslistfailedinvitationsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b762c00>
name='githublargebeta_orgslistwebhooks' description='githublargebeta_orgslistwebhooks(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - You must be an organization owner to use this endpoint. \n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit \nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.' args_schema=<class 'pydantic.v1.main.orgslistwebhooksRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b762160>
name='githublargebeta_orgscreatewebhook' description='githublargebeta_orgscreatewebhook(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], name: typing.Annotated[str, "Must be passed as \'web\'."], config__url: typing.Annotated[str, \'The URL to which the payloads will be delivered.__Key/value pairs to provide settings for this webhook.\'], config__content_type: typing.Annotated[str, \'The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.__Key/value pairs to provide settings for this webhook.\'], config__secret: typing.Annotated[str, \'If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).__Key/value pairs to provide settings for this webhook.\'], config__insecure_ssl: typing.Annotated[str, \'Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**__Key/value pairs to provide settings for this webhook.\'], config__username: typing.Annotated[str, \'username__Key/value pairs to provide settings for this webhook.\'], config__password: typing.Annotated[str, \'password__Key/value pairs to provide settings for this webhook.\'], events: typing.Annotated[composio_langchain.composio_tool_spec.Events, "Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. Set to `[\'*\']` to receive all possible events."] = [\'push\'], active: typing.Annotated[bool, \'Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.\'] = True) - Create a hook that posts payloads in JSON format.\n\nYou must be an organization owner to use this endpoint. \n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or \nedit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.' args_schema=<class 'pydantic.v1.main.orgscreatewebhookRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b79df80>
name='githublargebeta_orgsgetwebhook' description='githublargebeta_orgsgetwebhook(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], hook_id: typing.Annotated[int, \'The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.\']) - Returns a webhook configured in an organization. To get only the webhook\n`config` properties, see "[Get a webhook configuration for an organization](/rest/orgs/webhooks#get-a-webhook-configuration-for-an-organization). \n\nYou must be an organization owner to use this endpoint. \n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit \nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.' args_schema=<class 'pydantic.v1.main.orgsgetwebhookRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b79e0c0>
name='githublargebeta_orgsupdatewebhook' description='githublargebeta_orgsupdatewebhook(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], hook_id: typing.Annotated[int, \'The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.\'], config__url: typing.Annotated[str, \'The URL to which the payloads will be delivered.__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.\'], config__content_type: typing.Annotated[str, \'The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.\'], config__secret: typing.Annotated[str, \'If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.\'], config__insecure_ssl: typing.Annotated[str, \'Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.\'], name: typing.Annotated[str, \'name__\'] = None, events: typing.Annotated[composio_langchain.composio_tool_spec.Events, \'Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.\'] = [\'push\'], active: typing.Annotated[bool, \'Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.\'] = True) - Updates a webhook configured in an organization. When you update a webhook,\nthe `secret` will be overwritten. If you previously had a `secret` set, you must\nprovide the same `secret` or set a new `secret` or the secret will be removed. If\nyou are only updating individual webhook `config` properties, use "[Update a webhook\nconfiguration for an organization](/rest/orgs/webhooks#update-a-webhook-configuration-for-an-organization)". \n\nYou must be an organization owner to use this endpoint. \n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit \nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.' args_schema=<class 'pydantic.v1.main.orgsupdatewebhookRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b79db20>
name='githublargebeta_orgsdeletewebhook' description="githublargebeta_orgsdeletewebhook(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], hook_id: typing.Annotated[int, 'The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.']) - You must be an organization owner to use this endpoint. \n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit \nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps." args_schema=<class 'pydantic.v1.main.orgsdeletewebhookRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b79dd00>
name='githublargebeta_orgsgetwebhookconfigfororg' description='githublargebeta_orgsgetwebhookconfigfororg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], hook_id: typing.Annotated[int, \'The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.\']) - Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/orgs/webhooks#get-an-organization-webhook)."\n\nYou must be an organization owner to use this endpoint. \n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit \nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.' args_schema=<class 'pydantic.v1.main.orgsgetwebhookconfigfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b79d080>
name='githublargebeta_orgsupdatewebhookconfigfororg' description='githublargebeta_orgsupdatewebhookconfigfororg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], hook_id: typing.Annotated[int, \'The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.\'], url: typing.Annotated[str, \'The URL to which the payloads will be delivered.__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.\'], content_type: typing.Annotated[str, \'The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.\'], secret: typing.Annotated[str, \'If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.\'], insecure_ssl: typing.Annotated[str, \'Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.\']) - Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/orgs/webhooks#update-an-organization-webhook)."\n\nYou must be an organization owner to use this endpoint. \n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit \nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.' args_schema=<class 'pydantic.v1.main.orgsupdatewebhookconfigfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b79d1c0>
name='githublargebeta_orgslistwebhookdeliveries' description='githublargebeta_orgslistwebhookdeliveries(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], hook_id: typing.Annotated[int, \'The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.\'], cursor: typing.Annotated[str, \'Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.\'] = None, redelivery: typing.Annotated[bool, \'redelivery\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Returns a list of webhook deliveries for a webhook configured in an organization.\n\nYou must be an organization owner to use this endpoint. \n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit \nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.' args_schema=<class 'pydantic.v1.main.orgslistwebhookdeliveriesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b79ea20>
name='githublargebeta_orgsgetwebhookdelivery' description="githublargebeta_orgsgetwebhookdelivery(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], hook_id: typing.Annotated[int, 'The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.'], delivery_id: typing.Annotated[int, 'delivery_id']) - Returns a delivery for a webhook configured in an organization.\n\nYou must be an organization owner to use this endpoint. \n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit \nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps." args_schema=<class 'pydantic.v1.main.orgsgetwebhookdeliveryRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b79ee80>
name='githublargebeta_orgsredeliverwebhookdelivery' description="githublargebeta_orgsredeliverwebhookdelivery(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], hook_id: typing.Annotated[int, 'The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.'], delivery_id: typing.Annotated[int, 'delivery_id']) - Redeliver a delivery for a webhook configured in an organization.\n\nYou must be an organization owner to use this endpoint. \n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit \nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps." args_schema=<class 'pydantic.v1.main.orgsredeliverwebhookdeliveryRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b79f240>
name='githublargebeta_orgspingwebhook' description="githublargebeta_orgspingwebhook(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], hook_id: typing.Annotated[int, 'The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.']) - This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event)\nto be sent to the hook.\n\nYou must be an organization owner to use this endpoint. \n\nOAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit \nwebhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps." args_schema=<class 'pydantic.v1.main.orgspingwebhookRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b761ee0>
name='githublargebeta_appsgetorginstallation' description="githublargebeta_appsgetorginstallation(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.']) - Enables an authenticated GitHub App to find the organization's installation information.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint." args_schema=<class 'pydantic.v1.main.appsgetorginstallationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b79f740>
name='githublargebeta_orgslistappinstallations' description='githublargebeta_orgslistappinstallations(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all GitHub Apps in an organization. The installation count includes\nall GitHub Apps installed on repositories in the organization.\n\nThe authenticated user must be an organization owner to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:read` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.orgslistappinstallationsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b79de40>
name='githublargebeta_interactionsgetrestrictionsfororg' description="githublargebeta_interactionsgetrestrictionsfororg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.']) - Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response." args_schema=<class 'pydantic.v1.main.interactionsgetrestrictionsfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b79dbc0>
name='githublargebeta_interactionssetrestrictionsfororg' description="githublargebeta_interactionssetrestrictionsfororg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], limit: typing.Annotated[str, 'The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect.__Limit interactions to a specific type of user for a specified duration'], expiry: typing.Annotated[str, 'The duration of the interaction restriction. Default: `one_day`.__Limit interactions to a specific type of user for a specified duration'] = None) - Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization." args_schema=<class 'pydantic.v1.main.interactionssetrestrictionsfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b79f4c0>
name='githublargebeta_interactionsremoverestrictionsfororg' description="githublargebeta_interactionsremoverestrictionsfororg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.']) - Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions." args_schema=<class 'pydantic.v1.main.interactionsremoverestrictionsfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b79f7e0>
name='githublargebeta_orgslistpendinginvitations' description='githublargebeta_orgslistpendinginvitations(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, role: typing.Annotated[str, \'Filter invitations by their member role.\'] = \'all\', invitation_source: typing.Annotated[str, \'Filter invitations by their invitation source.\'] = \'all\') - The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, or `hiring_manager`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.' args_schema=<class 'pydantic.v1.main.orgslistpendinginvitationsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b79fba0>
name='githublargebeta_orgscreateinvitation' description='githublargebeta_orgscreateinvitation(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], invitee_id: typing.Annotated[int, \'**Required unless you provide `email`**. GitHub user ID for the person you are inviting.\'] = None, email: typing.Annotated[str, \'**Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.\'] = None, team_ids: typing.Annotated[composio_langchain.composio_tool_spec.TeamIds, \'Specify IDs for the teams you want to invite new members to.\'] = None, role: typing.Annotated[str, \'The role for the new member.  * `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.   * `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.   * `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.  * `reinstate` - The previous role assigned to the invitee before they were removed from your organization. Can be one of the roles listed above. Only works if the invitee was previously part of your organization.\'] = \'direct_member\') - Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"\nand "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."' args_schema=<class 'pydantic.v1.main.orgscreateinvitationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7f07c0>
name='githublargebeta_orgscancelinvitation' description="githublargebeta_orgscancelinvitation(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], invitation_id: typing.Annotated[int, 'The unique identifier of the invitation.']) - Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications)." args_schema=<class 'pydantic.v1.main.orgscancelinvitationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7f0860>
name='githublargebeta_orgslistinvitationteams' description='githublargebeta_orgslistinvitationteams(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], invitation_id: typing.Annotated[int, \'The unique identifier of the invitation.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.' args_schema=<class 'pydantic.v1.main.orgslistinvitationteamsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7f05e0>
name='githublargebeta_issueslistfororg' description='githublargebeta_issueslistfororg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], labels: typing.Annotated[str, \'A list of comma separated label names. Example: `bug,ui,@high`\'] = None, since: typing.Annotated[str, \'Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, filter: typing.Annotated[str, "Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you\'re subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation."] = \'assigned\', state: typing.Annotated[str, \'Indicates the state of the issues to return.\'] = \'open\', sort_: typing.Annotated[str, \'What to sort results by.\'] = \'created\', direction: typing.Annotated[str, \'The direction to sort the results by.\'] = \'desc\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List issues in an organization assigned to the authenticated user.\n\n**Note**: GitHub\'s REST API considers every pull request an issue, but not every issue is a pull request. For this\nreason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull\nrequest id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.issueslistfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7f0680>
name='githublargebeta_orgslistmembers' description='githublargebeta_orgslistmembers(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], filter: typing.Annotated[str, \'Filter members returned in the list. `2fa_disabled` means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. This options is only available for organization owners.\'] = \'all\', role: typing.Annotated[str, \'Filter members returned by their role.\'] = \'all\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.' args_schema=<class 'pydantic.v1.main.orgslistmembersRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7f0400>
name='githublargebeta_orgscheckmembershipforuser' description="githublargebeta_orgscheckmembershipforuser(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], username: typing.Annotated[str, 'The handle for the GitHub user account.']) - Check if a user is, publicly or privately, a member of the organization." args_schema=<class 'pydantic.v1.main.orgscheckmembershipforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7f0f40>
name='githublargebeta_orgsremovemember' description="githublargebeta_orgsremovemember(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], username: typing.Annotated[str, 'The handle for the GitHub user account.']) - Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories." args_schema=<class 'pydantic.v1.main.orgsremovememberRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7f0ea0>
name='githublargebeta_codespacesgetcodespacesforuserinorg' description='githublargebeta_codespacesgetcodespacesforuserinorg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], username: typing.Annotated[str, \'The handle for the GitHub user account.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the codespaces that a member of an organization has for repositories in that organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.codespacesgetcodespacesforuserinorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7f1440>
name='githublargebeta_codespacesdeletefromorganization' description="githublargebeta_codespacesdeletefromorganization(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], username: typing.Annotated[str, 'The handle for the GitHub user account.'], codespace_name: typing.Annotated[str, 'The name of the codespace.']) - Deletes a user's codespace.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacesdeletefromorganizationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7f1260>
name='githublargebeta_codespacesstopinorganization' description="githublargebeta_codespacesstopinorganization(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], username: typing.Annotated[str, 'The handle for the GitHub user account.'], codespace_name: typing.Annotated[str, 'The name of the codespace.']) - Stops a user's codespace.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacesstopinorganizationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7f1940>
name='githublargebeta_copilotgetcopilotseatdetailsforuser' description="githublargebeta_copilotgetcopilotseatdetailsforuser(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], username: typing.Annotated[str, 'The handle for the GitHub user account.']) - **Note**: This endpoint is in beta and is subject to change.\n\nGets the GitHub Copilot seat assignment details for a member of an organization who currently has access to GitHub Copilot.\n\nOrganization owners can view GitHub Copilot seat assignment details for members in their organization.\n\nOAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.copilotgetcopilotseatdetailsforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7f1620>
name='githublargebeta_orgsgetmembershipforuser' description="githublargebeta_orgsgetmembershipforuser(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], username: typing.Annotated[str, 'The handle for the GitHub user account.']) - In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status." args_schema=<class 'pydantic.v1.main.orgsgetmembershipforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7f1bc0>
name='githublargebeta_orgssetmembershipforuser' description="githublargebeta_orgssetmembershipforuser(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], username: typing.Annotated[str, 'The handle for the GitHub user account.'], role: typing.Annotated[str, 'The role to give the user in the organization. Can be one of:   * `admin` - The user will become an owner of the organization.   * `member` - The user will become a non-owner member of the organization.'] = 'member') - Only authenticated organization owners can add a member to the organization or update the member's role.\n\n*   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/orgs/members#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.\n    \n*   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.\n\n**Rate limits**\n\nTo prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period." args_schema=<class 'pydantic.v1.main.orgssetmembershipforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7f2200>
name='githublargebeta_orgsremovemembershipforuser' description="githublargebeta_orgsremovemembershipforuser(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], username: typing.Annotated[str, 'The handle for the GitHub user account.']) - In order to remove a user's membership with an organization, the authenticated user must be an organization owner.\n\nIf the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases." args_schema=<class 'pydantic.v1.main.orgsremovemembershipforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7f2020>
name='githublargebeta_migrationslistfororg' description='githublargebeta_migrationslistfororg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], exclude: typing.Annotated[composio_langchain.composio_tool_spec.Exclude, \'Exclude attributes from the API response to improve performance\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).\n\nA list of `repositories` is only returned for export migrations.' args_schema=<class 'pydantic.v1.main.migrationslistfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7f2de0>
name='githublargebeta_migrationsstartfororg' description="githublargebeta_migrationsstartfororg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], repositories: typing.Annotated[composio_langchain.composio_tool_spec.Repositories, 'A list of arrays indicating which repositories should be migrated.'], exclude: typing.Annotated[composio_langchain.composio_tool_spec.Exclude, 'Exclude related items from being returned in the response in order to improve performance of the request.'] = None, lock_repositories: typing.Annotated[bool, 'Indicates whether repositories should be locked (to prevent manipulation) while migrating data.'] = False, exclude_metadata: typing.Annotated[bool, 'Indicates whether metadata should be excluded and only git source should be included for the migration.'] = False, exclude_git_data: typing.Annotated[bool, 'Indicates whether the repository git data should be excluded from the migration.'] = False, exclude_attachments: typing.Annotated[bool, 'Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).'] = False, exclude_releases: typing.Annotated[bool, 'Indicates whether releases should be excluded from the migration (to reduce migration archive file size).'] = False, exclude_owner_projects: typing.Annotated[bool, 'Indicates whether projects owned by the organization or users should be excluded. from the migration.'] = False, org_metadata_only: typing.Annotated[bool, 'Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).'] = False) - Initiates the generation of a migration archive." args_schema=<class 'pydantic.v1.main.migrationsstartfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7f3b00>
name='githublargebeta_migrationsgetstatusfororg' description="githublargebeta_migrationsgetstatusfororg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], migration_id: typing.Annotated[int, 'The unique identifier of the migration.'], exclude: typing.Annotated[composio_langchain.composio_tool_spec.Exclude, 'Exclude attributes from the API response to improve performance'] = None) - Fetches the status of a migration.\n\nThe `state` of a migration can be one of the following values:\n\n*   `pending`, which means the migration hasn't started yet.\n*   `exporting`, which means the migration is in progress.\n*   `exported`, which means the migration finished successfully.\n*   `failed`, which means the migration failed." args_schema=<class 'pydantic.v1.main.migrationsgetstatusfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b928400>
name='githublargebeta_migrationsdownloadarchivefororg' description="githublargebeta_migrationsdownloadarchivefororg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], migration_id: typing.Annotated[int, 'The unique identifier of the migration.']) - Fetches the URL to a migration archive." args_schema=<class 'pydantic.v1.main.migrationsdownloadarchivefororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b928360>
name='githublargebeta_migrationsdeletearchivefororg' description="githublargebeta_migrationsdeletearchivefororg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], migration_id: typing.Annotated[int, 'The unique identifier of the migration.']) - Deletes a previous migration archive. Migration archives are automatically deleted after seven days." args_schema=<class 'pydantic.v1.main.migrationsdeletearchivefororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b928540>
name='githublargebeta_migrationsunlockrepofororg' description="githublargebeta_migrationsunlockrepofororg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], migration_id: typing.Annotated[int, 'The unique identifier of the migration.'], repo_name: typing.Annotated[str, 'repo_name parameter']) - Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/repos/repos#delete-a-repository) when the migration is complete and you no longer need the source data." args_schema=<class 'pydantic.v1.main.migrationsunlockrepofororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9289a0>
name='githublargebeta_migrationslistreposfororg' description='githublargebeta_migrationslistreposfororg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], migration_id: typing.Annotated[int, \'The unique identifier of the migration.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List all the repositories for this organization migration.' args_schema=<class 'pydantic.v1.main.migrationslistreposfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7f3ce0>
name='githublargebeta_orgslistorganizationfinegrainedpermissions' description='githublargebeta_orgslistorganizationfinegrainedpermissions(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\']) - Lists the fine-grained permissions that can be used in custom organization roles for an organization. For more information, see "[Managing people\'s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."\n\nTo list the fine-grained permissions that can be used in custom repository roles for an organization, see "[List repository fine-grained permissions for an organization](https://docs.github.com/rest/orgs/organization-roles#list-repository-fine-grained-permissions-for-an-organization)."\n\nTo use this endpoint, the authenticated user must be one of:\n\n- An administrator for the organization.\n- A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.orgslistorganizationfinegrainedpermissionsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7f37e0>
name='githublargebeta_orgslistorgroles' description='githublargebeta_orgslistorgroles(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\']) - Lists the organization roles available in this organization. For more information on organization roles, see "[Managing people\'s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."\n\nTo use this endpoint, the authenticated user must be one of:\n\n- An administrator for the organization.\n- A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.orgslistorgrolesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7f36a0>
name='githublargebeta_orgscreatecustomorganizationrole' description='githublargebeta_orgscreatecustomorganizationrole(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], name: typing.Annotated[str, \'The name of the custom role.\'], permissions: typing.Annotated[composio_langchain.composio_tool_spec.Permissions, \'A list of additional permissions included in this role.\'], description: typing.Annotated[str, \'A short description about the intended usage of this role or what permissions it grants.\'] = None) - Creates a custom organization role that can be assigned to users and teams, granting them specific permissions over the organization. For more information on custom organization roles, see "[Managing people\'s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."\n\nTo use this endpoint, the authenticated user must be one of:\n\n- An administrator for the organization.\n- A user, or a user on a team, with the fine-grained permissions of `write_organization_custom_org_role` in the organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.orgscreatecustomorganizationroleRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7f2e80>
name='githublargebeta_orgsrevokeallorgrolesteam' description='githublargebeta_orgsrevokeallorgrolesteam(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], team_slug: typing.Annotated[str, \'The slug of the team name.\']) - Removes all assigned organization roles from a team. For more information on organization roles, see "[Managing people\'s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."\n\nThe authenticated user must be an administrator for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.orgsrevokeallorgrolesteamRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9284a0>
name='githublargebeta_orgsassignteamtoorgrole' description='githublargebeta_orgsassignteamtoorgrole(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], team_slug: typing.Annotated[str, \'The slug of the team name.\'], role_id: typing.Annotated[int, \'The unique identifier of the role.\']) - Assigns an organization role to a team in an organization. For more information on organization roles, see "[Managing people\'s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."\n\nThe authenticated user must be an administrator for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.orgsassignteamtoorgroleRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9282c0>
name='githublargebeta_orgsrevokeorgroleteam' description='githublargebeta_orgsrevokeorgroleteam(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], team_slug: typing.Annotated[str, \'The slug of the team name.\'], role_id: typing.Annotated[int, \'The unique identifier of the role.\']) - Removes an organization role from a team. For more information on organization roles, see "[Managing people\'s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."\n\nThe authenticated user must be an administrator for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.orgsrevokeorgroleteamRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b928040>
name='githublargebeta_orgsrevokeallorgrolesuser' description='githublargebeta_orgsrevokeallorgrolesuser(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], username: typing.Annotated[str, \'The handle for the GitHub user account.\']) - Revokes all assigned organization roles from a user. For more information on organization roles, see "[Managing people\'s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."\n\nThe authenticated user must be an administrator for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.orgsrevokeallorgrolesuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b928c20>
name='githublargebeta_orgsassignusertoorgrole' description='githublargebeta_orgsassignusertoorgrole(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], username: typing.Annotated[str, \'The handle for the GitHub user account.\'], role_id: typing.Annotated[int, \'The unique identifier of the role.\']) - Assigns an organization role to a member of an organization. For more information on organization roles, see "[Managing people\'s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."\n\nThe authenticated user must be an administrator for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.orgsassignusertoorgroleRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7f2980>
name='githublargebeta_orgsrevokeorgroleuser' description='githublargebeta_orgsrevokeorgroleuser(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], username: typing.Annotated[str, \'The handle for the GitHub user account.\'], role_id: typing.Annotated[int, \'The unique identifier of the role.\']) - Remove an organization role from a user. For more information on organization roles, see "[Managing people\'s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."\n\nThe authenticated user must be an administrator for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.orgsrevokeorgroleuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7f2fc0>
name='githublargebeta_orgsgetorgrole' description='githublargebeta_orgsgetorgrole(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], role_id: typing.Annotated[int, \'The unique identifier of the role.\']) - Gets an organization role that is available to this organization. For more information on organization roles, see "[Managing people\'s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."\n\nTo use this endpoint, the authenticated user must be one of:\n\n- An administrator for the organization.\n- A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.orgsgetorgroleRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7f1e40>
name='githublargebeta_orgspatchcustomorganizationrole' description='githublargebeta_orgspatchcustomorganizationrole(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], role_id: typing.Annotated[int, \'The unique identifier of the role.\'], name: typing.Annotated[str, \'The name of the custom role.\'] = None, description: typing.Annotated[str, \'A short description about the intended usage of this role or what permissions it grants.\'] = None, permissions: typing.Annotated[composio_langchain.composio_tool_spec.Permissions, \'A list of additional permissions included in this role.\'] = None) - Updates an existing custom organization role. Permission changes will apply to all assignees. For more information on custom organization roles, see "[Managing people\'s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."\n\n\nTo use this endpoint, the authenticated user must be one of:\n\n- An administrator for the organization.\n- A user, or a user on a team, with the fine-grained permissions of `write_organization_custom_org_role` in the organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.orgspatchcustomorganizationroleRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9299e0>
name='githublargebeta_orgsdeletecustomorganizationrole' description='githublargebeta_orgsdeletecustomorganizationrole(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], role_id: typing.Annotated[int, \'The unique identifier of the role.\']) - Deletes a custom organization role. For more information on custom organization roles, see "[Managing people\'s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."\n\nTo use this endpoint, the authenticated user must be one of:\n\n- An administrator for the organization.\n- A user, or a user on a team, with the fine-grained permissions of `write_organization_custom_org_role` in the organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.orgsdeletecustomorganizationroleRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b929940>
name='githublargebeta_orgslistorgroleteams' description='githublargebeta_orgslistorgroleteams(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], role_id: typing.Annotated[int, \'The unique identifier of the role.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the teams that are assigned to an organization role. For more information on organization roles, see "[Managing people\'s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."\n\nTo use this endpoint, you must be an administrator for the organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.orgslistorgroleteamsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b929b20>
name='githublargebeta_orgslistorgroleusers' description='githublargebeta_orgslistorgroleusers(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], role_id: typing.Annotated[int, \'The unique identifier of the role.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists organization members that are assigned to an organization role. For more information on organization roles, see "[Managing people\'s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."\n\nTo use this endpoint, you must be an administrator for the organization.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.orgslistorgroleusersRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b929bc0>
name='githublargebeta_orgslistoutsidecollaborators' description='githublargebeta_orgslistoutsidecollaborators(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], filter: typing.Annotated[str, \'Filter the list of outside collaborators. `2fa_disabled` means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned.\'] = \'all\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List all users who are outside collaborators of an organization.' args_schema=<class 'pydantic.v1.main.orgslistoutsidecollaboratorsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b7f2ca0>
name='githublargebeta_orgsconvertmembertooutsidecollaborator' description='githublargebeta_orgsconvertmembertooutsidecollaborator(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], username: typing.Annotated[str, \'The handle for the GitHub user account.\'], async_: typing.Annotated[bool, \'When set to `true`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued.\'] = False) - When an organization member is converted to an outside collaborator, they\'ll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)". Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."' args_schema=<class 'pydantic.v1.main.orgsconvertmembertooutsidecollaboratorRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9298a0>
name='githublargebeta_orgsremoveoutsidecollaborator' description="githublargebeta_orgsremoveoutsidecollaborator(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], username: typing.Annotated[str, 'The handle for the GitHub user account.']) - Removing a user from this list will remove them from all the organization's repositories." args_schema=<class 'pydantic.v1.main.orgsremoveoutsidecollaboratorRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b929a80>
name='githublargebeta_packageslistpackagesfororganization' description='githublargebeta_packageslistpackagesfororganization(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], package_type: typing.Annotated[str, "The type of supported package. Packages in GitHub\'s Gradle registry have the type `maven`. Docker images pushed to GitHub\'s Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub\'s Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry."], visibility: typing.Annotated[str, "The selected visibility of the packages.  This parameter is optional and only filters an existing result set.The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.For the list of GitHub Packages registries that support granular permissions, see \'[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\'"] = None, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Lists packages in an organization readable by the user.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."' args_schema=<class 'pydantic.v1.main.packageslistpackagesfororganizationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b929da0>
name='githublargebeta_packagesgetpackagefororganization' description='githublargebeta_packagesgetpackagefororganization(package_type: typing.Annotated[str, "The type of supported package. Packages in GitHub\'s Gradle registry have the type `maven`. Docker images pushed to GitHub\'s Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub\'s Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry."], package_name: typing.Annotated[str, \'The name of the package.\'], org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\']) - Gets a specific package in an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."' args_schema=<class 'pydantic.v1.main.packagesgetpackagefororganizationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b929580>
name='githublargebeta_packagesdeletepackagefororg' description='githublargebeta_packagesdeletepackagefororg(package_type: typing.Annotated[str, "The type of supported package. Packages in GitHub\'s Gradle registry have the type `maven`. Docker images pushed to GitHub\'s Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub\'s Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry."], package_name: typing.Annotated[str, \'The name of the package.\'], org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\']) - Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.\n\nThe authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."' args_schema=<class 'pydantic.v1.main.packagesdeletepackagefororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b92a8e0>
name='githublargebeta_packagesrestorepackagefororg' description='githublargebeta_packagesrestorepackagefororg(package_type: typing.Annotated[str, "The type of supported package. Packages in GitHub\'s Gradle registry have the type `maven`. Docker images pushed to GitHub\'s Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub\'s Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry."], package_name: typing.Annotated[str, \'The name of the package.\'], org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], token: typing.Annotated[str, \'package token\'] = None) - Restores an entire package in an organization.\n\nYou can restore a deleted package under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package\'s namespace first.\n\nThe authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."' args_schema=<class 'pydantic.v1.main.packagesrestorepackagefororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b929800>
name='githublargebeta_packagesgetallpackageversionsforpackageownedbyorg' description='githublargebeta_packagesgetallpackageversionsforpackageownedbyorg(package_type: typing.Annotated[str, "The type of supported package. Packages in GitHub\'s Gradle registry have the type `maven`. Docker images pushed to GitHub\'s Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub\'s Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry."], package_name: typing.Annotated[str, \'The name of the package.\'], org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, state: typing.Annotated[str, \'The state of the package, either active or deleted.\'] = \'active\') - Lists package versions for a package owned by an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint if the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."' args_schema=<class 'pydantic.v1.main.packagesgetallpackageversionsforpackageownedbyorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b92ab60>
name='githublargebeta_packagesgetpackageversionfororganization' description='githublargebeta_packagesgetpackageversionfororganization(package_type: typing.Annotated[str, "The type of supported package. Packages in GitHub\'s Gradle registry have the type `maven`. Docker images pushed to GitHub\'s Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub\'s Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry."], package_name: typing.Annotated[str, \'The name of the package.\'], org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], package_version_id: typing.Annotated[int, \'Unique identifier of the package version.\']) - Gets a specific package version in an organization.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."' args_schema=<class 'pydantic.v1.main.packagesgetpackageversionfororganizationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b92b100>
name='githublargebeta_packagesdeletepackageversionfororg' description='githublargebeta_packagesdeletepackageversionfororg(package_type: typing.Annotated[str, "The type of supported package. Packages in GitHub\'s Gradle registry have the type `maven`. Docker images pushed to GitHub\'s Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub\'s Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry."], package_name: typing.Annotated[str, \'The name of the package.\'], org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], package_version_id: typing.Annotated[int, \'Unique identifier of the package version.\']) - Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.\n\nThe authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."' args_schema=<class 'pydantic.v1.main.packagesdeletepackageversionfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b92b560>
name='githublargebeta_packagesrestorepackageversionfororg' description='githublargebeta_packagesrestorepackageversionfororg(package_type: typing.Annotated[str, "The type of supported package. Packages in GitHub\'s Gradle registry have the type `maven`. Docker images pushed to GitHub\'s Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub\'s Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry."], package_name: typing.Annotated[str, \'The name of the package.\'], org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], package_version_id: typing.Annotated[int, \'Unique identifier of the package version.\']) - Restores a specific package version in an organization.\n\nYou can restore a deleted package under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package\'s namespace first.\n\nThe authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."' args_schema=<class 'pydantic.v1.main.packagesrestorepackageversionfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b92b880>
name='githublargebeta_orgslistpatgrantrequests' description='githublargebeta_orgslistpatgrantrequests(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], owner: typing.Annotated[composio_langchain.composio_tool_spec.Owner, \'A list of owner usernames to use to filter the results.\'] = None, repository: typing.Annotated[str, \'The name of the repository to use to filter the results.\'] = None, permission: typing.Annotated[str, \'The permission to use to filter the results.\'] = None, last_used_before: typing.Annotated[str, \'Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, last_used_after: typing.Annotated[str, \'Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, sort_: typing.Annotated[str, \'The property by which to sort the results.\'] = \'created_at\', direction: typing.Annotated[str, \'The direction to sort the results by.\'] = \'desc\') - Lists requests from organization members to access organization resources with a fine-grained personal access token.\n\nOnly GitHub Apps can use this endpoint.' args_schema=<class 'pydantic.v1.main.orgslistpatgrantrequestsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b974a40>
name='githublargebeta_orgsreviewpatgrantrequestsinbulk' description="githublargebeta_orgsreviewpatgrantrequestsinbulk(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], action: typing.Annotated[str, 'Action to apply to the requests.'], pat_request_ids: typing.Annotated[composio_langchain.composio_tool_spec.PatRequestIds, 'Unique identifiers of the requests for access via fine-grained personal access token. Must be formed of between 1 and 100 `pat_request_id` values.'] = None, reason: typing.Annotated[str, 'Reason for approving or denying the requests. Max 1024 characters.'] = None) - Approves or denies multiple pending requests to access organization resources via a fine-grained personal access token.\n\nOnly GitHub Apps can use this endpoint." args_schema=<class 'pydantic.v1.main.orgsreviewpatgrantrequestsinbulkRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b92ade0>
name='githublargebeta_orgsreviewpatgrantrequest' description="githublargebeta_orgsreviewpatgrantrequest(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], pat_request_id: typing.Annotated[int, 'Unique identifier of the request for access via fine-grained personal access token.'], action: typing.Annotated[str, 'Action to apply to the request.'], reason: typing.Annotated[str, 'Reason for approving or denying the request. Max 1024 characters.'] = None) - Approves or denies a pending request to access organization resources via a fine-grained personal access token.\n\nOnly GitHub Apps can use this endpoint." args_schema=<class 'pydantic.v1.main.orgsreviewpatgrantrequestRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b975260>
name='githublargebeta_orgslistpatgrantrequestrepositories' description='githublargebeta_orgslistpatgrantrequestrepositories(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], pat_request_id: typing.Annotated[int, \'Unique identifier of the request for access via fine-grained personal access token.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the repositories a fine-grained personal access token request is requesting access to.\n\nOnly GitHub Apps can use this endpoint.' args_schema=<class 'pydantic.v1.main.orgslistpatgrantrequestrepositoriesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9751c0>
name='githublargebeta_orgslistpatgrants' description='githublargebeta_orgslistpatgrants(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], owner: typing.Annotated[composio_langchain.composio_tool_spec.Owner, \'A list of owner usernames to use to filter the results.\'] = None, repository: typing.Annotated[str, \'The name of the repository to use to filter the results.\'] = None, permission: typing.Annotated[str, \'The permission to use to filter the results.\'] = None, last_used_before: typing.Annotated[str, \'Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, last_used_after: typing.Annotated[str, \'Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, sort_: typing.Annotated[str, \'The property by which to sort the results.\'] = \'created_at\', direction: typing.Annotated[str, \'The direction to sort the results by.\'] = \'desc\') - Lists approved fine-grained personal access tokens owned by organization members that can access organization resources.\n\nOnly GitHub Apps can use this endpoint.' args_schema=<class 'pydantic.v1.main.orgslistpatgrantsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b975a80>
name='githublargebeta_orgsupdatepataccesses' description="githublargebeta_orgsupdatepataccesses(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], action: typing.Annotated[str, 'Action to apply to the fine-grained personal access token.'], pat_ids: typing.Annotated[composio_langchain.composio_tool_spec.PatIds, 'The IDs of the fine-grained personal access tokens.']) - Updates the access organization members have to organization resources via fine-grained personal access tokens. Limited to revoking a token's existing access.\n\nOnly GitHub Apps can use this endpoint." args_schema=<class 'pydantic.v1.main.orgsupdatepataccessesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b976340>
name='githublargebeta_orgsupdatepataccess' description="githublargebeta_orgsupdatepataccess(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], pat_id: typing.Annotated[int, 'The unique identifier of the fine-grained personal access token.'], action: typing.Annotated[str, 'Action to apply to the fine-grained personal access token.']) - Updates the access an organization member has to organization resources via a fine-grained personal access token. Limited to revoking the token's existing access. Limited to revoking a token's existing access.\n\nOnly GitHub Apps can use this endpoint." args_schema=<class 'pydantic.v1.main.orgsupdatepataccessRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9763e0>
name='githublargebeta_orgslistpatgrantrepositories' description='githublargebeta_orgslistpatgrantrepositories(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], pat_id: typing.Annotated[int, \'Unique identifier of the fine-grained personal access token.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the repositories a fine-grained personal access token has access to.\n\nOnly GitHub Apps can use this endpoint.' args_schema=<class 'pydantic.v1.main.orgslistpatgrantrepositoriesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b976520>
name='githublargebeta_projectslistfororg' description='githublargebeta_projectslistfororg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], state: typing.Annotated[str, \'Indicates the state of the projects to return.\'] = \'open\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.' args_schema=<class 'pydantic.v1.main.projectslistfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b976200>
name='githublargebeta_projectscreatefororg' description="githublargebeta_projectscreatefororg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], name: typing.Annotated[str, 'The name of the project.'], body: typing.Annotated[str, 'The description of the project.'] = None) - Creates an organization project board. Returns a `410 Gone` status if projects are disabled in the organization or if the organization does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned." args_schema=<class 'pydantic.v1.main.projectscreatefororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9762a0>
name='githublargebeta_orgsgetallcustomproperties' description="githublargebeta_orgsgetallcustomproperties(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.']) - Gets all custom properties defined for an organization.\nOrganization members can read these properties." args_schema=<class 'pydantic.v1.main.orgsgetallcustompropertiesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b975940>
name='githublargebeta_orgscreateorupdatecustomproperties' description="githublargebeta_orgscreateorupdatecustomproperties(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], properties: typing.Annotated[composio_langchain.composio_tool_spec.Properties, 'The array of custom properties to create or update.']) - Creates new or updates existing custom properties defined for an organization in a batch.\n\nTo use this endpoint, the authenticated user must be one of:\n  - An administrator for the organization.\n  - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization." args_schema=<class 'pydantic.v1.main.orgscreateorupdatecustompropertiesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b976ac0>
name='githublargebeta_orgsgetcustomproperty' description="githublargebeta_orgsgetcustomproperty(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], custom_property_name: typing.Annotated[str, 'The custom property name. The name is case sensitive.']) - Gets a custom property that is defined for an organization.\nOrganization members can read these properties." args_schema=<class 'pydantic.v1.main.orgsgetcustompropertyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b976a20>
name='githublargebeta_orgscreateorupdatecustomproperty' description="githublargebeta_orgscreateorupdatecustomproperty(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], custom_property_name: typing.Annotated[str, 'The custom property name. The name is case sensitive.'], value_type: typing.Annotated[str, 'The type of the value for the property'], required: typing.Annotated[bool, 'Whether the property is required.'] = None, default_value: typing.Annotated[str, 'Default value of the property'] = None, description: typing.Annotated[str, 'Short description of the property'] = None, allowed_values: typing.Annotated[composio_langchain.composio_tool_spec.AllowedValues, 'An ordered list of the allowed values of the property.The property can have up to 200 allowed values.'] = None) - Creates a new or updates an existing custom property that is defined for an organization.\n\nTo use this endpoint, the authenticated user must be one of:\n- An administrator for the organization.\n- A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization." args_schema=<class 'pydantic.v1.main.orgscreateorupdatecustompropertyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b976e80>
name='githublargebeta_orgsremovecustomproperty' description="githublargebeta_orgsremovecustomproperty(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], custom_property_name: typing.Annotated[str, 'The custom property name. The name is case sensitive.']) - Removes a custom property that is defined for an organization.\n\nTo use this endpoint, the authenticated user must be one of:\n  - An administrator for the organization.\n  - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization." args_schema=<class 'pydantic.v1.main.orgsremovecustompropertyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b976b60>
name='githublargebeta_orgslistcustompropertiesvaluesforrepos' description='githublargebeta_orgslistcustompropertiesvaluesforrepos(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], repository_query: typing.Annotated[str, "Finds repositories in the organization with a query containing one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See \'[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)\' for a detailed list of qualifiers."] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists organization repositories with all of their custom property values.\nOrganization members can read these properties.' args_schema=<class 'pydantic.v1.main.orgslistcustompropertiesvaluesforreposRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b976ca0>
name='githublargebeta_orgscreateorupdatecustompropertiesvaluesforrepos' description="githublargebeta_orgscreateorupdatecustompropertiesvaluesforrepos(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], repository_names: typing.Annotated[composio_langchain.composio_tool_spec.RepositoryNames, 'The names of repositories that the custom property values will be applied to.'], properties: typing.Annotated[composio_langchain.composio_tool_spec.Properties, 'List of custom property names and associated values to apply to the repositories.']) - Create new or update existing custom property values for repositories in a batch that belong to an organization.\nEach target repository will have its custom property values updated to match the values provided in the request.\n\nA maximum of 30 repositories can be updated in a single request.\n\nUsing a value of `null` for a custom property will remove or 'unset' the property value from the repository.\n\nTo use this endpoint, the authenticated user must be one of:\n  - An administrator for the organization.\n  - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_values_editor` in the organization." args_schema=<class 'pydantic.v1.main.orgscreateorupdatecustompropertiesvaluesforreposRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9b0540>
name='githublargebeta_orgslistpublicmembers' description='githublargebeta_orgslistpublicmembers(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Members of an organization can choose to have their membership publicized or not.' args_schema=<class 'pydantic.v1.main.orgslistpublicmembersRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9b0680>
name='githublargebeta_orgscheckpublicmembershipforuser' description="githublargebeta_orgscheckpublicmembershipforuser(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], username: typing.Annotated[str, 'The handle for the GitHub user account.']) - Check if the provided user is a public member of the organization." args_schema=<class 'pydantic.v1.main.orgscheckpublicmembershipforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9b04a0>
name='githublargebeta_orgssetpublicmembershipforauthenticateduser' description='githublargebeta_orgssetpublicmembershipforauthenticateduser(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], username: typing.Annotated[str, \'The handle for the GitHub user account.\']) - The user can publicize their own membership. (A user cannot publicize the membership for another user.)\n\nNote that you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."' args_schema=<class 'pydantic.v1.main.orgssetpublicmembershipforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b977f60>
name='githublargebeta_orgsremovepublicmembershipforauthenticateduser' description="githublargebeta_orgsremovepublicmembershipforauthenticateduser(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], username: typing.Annotated[str, 'The handle for the GitHub user account.']) - Removes the public membership for the authenticated user from the specified organization, unless public visibility is enforced by default." args_schema=<class 'pydantic.v1.main.orgsremovepublicmembershipforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b977ec0>
name='githublargebeta_reposlistfororg' description='githublargebeta_reposlistfororg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], direction: typing.Annotated[str, \'The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.\'] = None, type: typing.Annotated[str, \'Specifies the types of repositories you want returned.\'] = \'all\', sort_: typing.Annotated[str, \'The property to sort the results by.\'] = \'created\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists repositories for the specified organization.\n\n**Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."' args_schema=<class 'pydantic.v1.main.reposlistfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b977ba0>
name='githublargebeta_reposcreateinorg' description='githublargebeta_reposcreateinorg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], name: typing.Annotated[str, \'The name of the repository.\'], description: typing.Annotated[str, \'A short description of the repository.\'] = None, homepage: typing.Annotated[str, \'A URL with more information about the repository.\'] = None, visibility: typing.Annotated[str, \'The visibility of the repository.\'] = None, team_id: typing.Annotated[int, \'The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.\'] = None, gitignore_template: typing.Annotated[str, "Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \'Haskell\'."] = None, license_template: typing.Annotated[str, "Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \'mit\' or \'mpl-2.0\'."] = None, squash_merge_commit_title: typing.Annotated[str, "The default value for a squash merge commit title:- `PR_TITLE` - default to the pull request\'s title.- `COMMIT_OR_PR_TITLE` - default to the commit\'s title (if only one commit) or the pull request\'s title (when more than one commit)."] = None, squash_merge_commit_message: typing.Annotated[str, "The default value for a squash merge commit message:- `PR_BODY` - default to the pull request\'s body.- `COMMIT_MESSAGES` - default to the branch\'s commit messages.- `BLANK` - default to a blank commit message."] = None, merge_commit_title: typing.Annotated[str, "The default value for a merge commit title.- `PR_TITLE` - default to the pull request\'s title.- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name)."] = None, merge_commit_message: typing.Annotated[str, "The default value for a merge commit message.- `PR_TITLE` - default to the pull request\'s title.- `PR_BODY` - default to the pull request\'s body.- `BLANK` - default to a blank commit message."] = None, private: typing.Annotated[bool, \'Whether the repository is private.\'] = False, has_issues: typing.Annotated[bool, \'Either `true` to enable issues for this repository or `false` to disable them.\'] = True, has_projects: typing.Annotated[bool, "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you\'re creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error."] = True, has_wiki: typing.Annotated[bool, \'Either `true` to enable the wiki for this repository or `false` to disable it.\'] = True, has_downloads: typing.Annotated[bool, \'Whether downloads are enabled.\'] = True, is_template: typing.Annotated[bool, \'Either `true` to make this repo available as a template repository or `false` to prevent it.\'] = False, auto_init: typing.Annotated[bool, \'Pass `true` to create an initial commit with empty README.\'] = False, allow_squash_merge: typing.Annotated[bool, \'Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.\'] = True, allow_merge_commit: typing.Annotated[bool, \'Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.\'] = True, allow_rebase_merge: typing.Annotated[bool, \'Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.\'] = True, allow_auto_merge: typing.Annotated[bool, \'Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.\'] = False, delete_branch_on_merge: typing.Annotated[bool, \'Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.**\'] = False, use_squash_pr_title_as_default: typing.Annotated[bool, \'Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.\'] = False) - Creates a new repository in the specified organization. The authenticated user must be a member of the organization.\n\nOAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.' args_schema=<class 'pydantic.v1.main.reposcreateinorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9749a0>
name='githublargebeta_reposgetorgrulesets' description='githublargebeta_reposgetorgrulesets(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Get all the repository rulesets for an organization.' args_schema=<class 'pydantic.v1.main.reposgetorgrulesetsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9b0400>
name='githublargebeta_reposcreateorgruleset' description="githublargebeta_reposcreateorgruleset(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], name: typing.Annotated[str, 'The name of the ruleset.'], enforcement: typing.Annotated[str, 'The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).'], conditions__1__repository_name__include: typing.Annotated[composio_langchain.composio_tool_spec.Conditions1RepositoryNameInclude, 'Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.__repository_name__Parameters for a repository name condition'], conditions__1__repository_name__exclude: typing.Annotated[composio_langchain.composio_tool_spec.Conditions1RepositoryNameExclude, 'Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.__repository_name__Parameters for a repository name condition'], conditions__1__repository_name__protected: typing.Annotated[bool, 'Whether renaming of target repositories is prevented.__repository_name__Parameters for a repository name condition'], target: typing.Annotated[str, 'The target of the ruleset.'] = None, bypass_actors: typing.Annotated[composio_langchain.composio_tool_spec.BypassActors, 'The actors that can bypass the rules in this ruleset'] = None, conditions__0__ref_name__include: typing.Annotated[composio_langchain.composio_tool_spec.Conditions0RefNameInclude, 'Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.__ref_name__Parameters for a repository ruleset ref name condition'] = None, conditions__0__ref_name__exclude: typing.Annotated[composio_langchain.composio_tool_spec.Conditions0RefNameExclude, 'Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.__ref_name__Parameters for a repository ruleset ref name condition'] = None, rules: typing.Annotated[composio_langchain.composio_tool_spec.Rules, 'An array of rules within the ruleset.'] = None) - Create a repository ruleset for an organization." args_schema=<class 'pydantic.v1.main.reposcreateorgrulesetRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9b2fc0>
name='githublargebeta_reposgetorgrulesuites' description='githublargebeta_reposgetorgrulesuites(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], repository_name: typing.Annotated[int, \'The name of the repository to filter on. When specified, only rule evaluations from this repository will be returned.\'] = None, actor_name: typing.Annotated[str, \'The handle for the GitHub user account to filter on. When specified, only rule evaluations triggered by this actor will be returned.\'] = None, time_period: typing.Annotated[str, \'The time period to filter by.For example, `day` will filter for rule suites that occurred in the past 24 hours, and `week` will filter for insights that occurred in the past 7 days (168 hours).\'] = \'day\', rule_suite_result: typing.Annotated[str, \'The rule results to filter on. When specified, only suites with this result will be returned.\'] = \'all\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists suites of rule evaluations at the organization level.\nFor more information, see "[Managing rulesets for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets)."' args_schema=<class 'pydantic.v1.main.reposgetorgrulesuitesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9b2de0>
name='githublargebeta_reposgetorgrulesuite' description='githublargebeta_reposgetorgrulesuite(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], rule_suite_id: typing.Annotated[int, \'The unique identifier of the rule suite result.To get this ID, you can use [GET /repos/{owner}/{repo}/rulesets/rule-suites](https://docs.github.com/rest/repos/rule-suites#list-repository-rule-suites)for repositories and [GET /orgs/{org}/rulesets/rule-suites](https://docs.github.com/rest/orgs/rule-suites#list-organization-rule-suites)for organizations.\']) - Gets information about a suite of rule evaluations from within an organization.\nFor more information, see "[Managing rulesets for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets)."' args_schema=<class 'pydantic.v1.main.reposgetorgrulesuiteRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9b3060>
name='githublargebeta_reposgetorgruleset' description="githublargebeta_reposgetorgruleset(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], ruleset_id: typing.Annotated[int, 'The ID of the ruleset.']) - Get a repository ruleset for an organization." args_schema=<class 'pydantic.v1.main.reposgetorgrulesetRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9b2d40>
name='githublargebeta_reposupdateorgruleset' description="githublargebeta_reposupdateorgruleset(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], ruleset_id: typing.Annotated[int, 'The ID of the ruleset.'], enforcement: typing.Annotated[str, 'The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).'], conditions__1__repository_name__include: typing.Annotated[composio_langchain.composio_tool_spec.Conditions1RepositoryNameInclude, 'Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.__repository_name__Parameters for a repository name condition__repository_name__Parameters for a repository name condition__Parameters for a repository name condition'], conditions__1__repository_name__exclude: typing.Annotated[composio_langchain.composio_tool_spec.Conditions1RepositoryNameExclude, 'Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.__repository_name__Parameters for a repository name condition__repository_name__Parameters for a repository name condition__Parameters for a repository name condition'], conditions__1__repository_name__protected: typing.Annotated[bool, 'Whether renaming of target repositories is prevented.__repository_name__Parameters for a repository name condition__repository_name__Parameters for a repository name condition__Parameters for a repository name condition'], name: typing.Annotated[str, 'The name of the ruleset.'] = None, target: typing.Annotated[str, 'The target of the ruleset.'] = None, bypass_actors: typing.Annotated[composio_langchain.composio_tool_spec.BypassActors, 'The actors that can bypass the rules in this ruleset'] = None, conditions__0__ref_name__include: typing.Annotated[composio_langchain.composio_tool_spec.Conditions0RefNameInclude, 'Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.__ref_name__Parameters for a repository ruleset ref name condition__ref_name__Parameters for a repository ruleset ref name condition__Parameters for a repository ruleset ref name condition'] = None, conditions__0__ref_name__exclude: typing.Annotated[composio_langchain.composio_tool_spec.Conditions0RefNameExclude, 'Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.__ref_name__Parameters for a repository ruleset ref name condition__ref_name__Parameters for a repository ruleset ref name condition__Parameters for a repository ruleset ref name condition'] = None, rules: typing.Annotated[composio_langchain.composio_tool_spec.Rules, 'An array of rules within the ruleset.'] = None) - Update a ruleset for an organization." args_schema=<class 'pydantic.v1.main.reposupdateorgrulesetRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba000e0>
name='githublargebeta_reposdeleteorgruleset' description="githublargebeta_reposdeleteorgruleset(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], ruleset_id: typing.Annotated[int, 'The ID of the ruleset.']) - Delete a ruleset for an organization." args_schema=<class 'pydantic.v1.main.reposdeleteorgrulesetRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba00040>
name='githublargebeta_secretscanninglistalertsfororg' description='githublargebeta_secretscanninglistalertsfororg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], state: typing.Annotated[str, \'Set to `open` or `resolved` to only list secret scanning alerts in a specific state.\'] = None, secret_type: typing.Annotated[str, "A comma-separated list of secret types to return. By default all secret types are returned.See \'[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\'for a complete list of secret types."] = None, resolution: typing.Annotated[str, \'A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.\'] = None, before: typing.Annotated[str, "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty \'before\' query string."] = None, after: typing.Annotated[str, "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty \'after\' query string."] = None, validity: typing.Annotated[str, \'A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`.\'] = None, sort_: typing.Annotated[str, \'The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.\'] = \'created\', direction: typing.Annotated[str, \'The direction to sort the results by.\'] = \'desc\', page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.\n\nThe authenticated user must be an administrator or security manager for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.' args_schema=<class 'pydantic.v1.main.secretscanninglistalertsfororgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba002c0>
name='githublargebeta_securityadvisorieslistorgrepositoryadvisories' description='githublargebeta_securityadvisorieslistorgrepositoryadvisories(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], before: typing.Annotated[str, "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = None, after: typing.Annotated[str, "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = None, state: typing.Annotated[str, \'Filter by the state of the repository advisories. Only advisories of this state will be returned.\'] = None, direction: typing.Annotated[str, \'The direction to sort the results by.\'] = \'desc\', sort_: typing.Annotated[str, \'The property to sort the results by.\'] = \'created\', per_page: typing.Annotated[int, "The number of advisories to return per page. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Lists repository security advisories for an organization.\n\nThe authenticated user must be an owner or security manager for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.securityadvisorieslistorgrepositoryadvisoriesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9b3ec0>
name='githublargebeta_orgslistsecuritymanagerteams' description='githublargebeta_orgslistsecuritymanagerteams(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\']) - Lists teams that are security managers for an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nThe authenticated user must be an administrator or security manager for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.orgslistsecuritymanagerteamsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9b3ce0>
name='githublargebeta_orgsaddsecuritymanagerteam' description='githublargebeta_orgsaddsecuritymanagerteam(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], team_slug: typing.Annotated[str, \'The slug of the team name.\']) - Adds a team as a security manager for an organization. For more information, see "[Managing security for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) for an organization."\n\nThe authenticated user must be an administrator for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.orgsaddsecuritymanagerteamRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9b3f60>
name='githublargebeta_orgsremovesecuritymanagerteam' description='githublargebeta_orgsremovesecuritymanagerteam(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], team_slug: typing.Annotated[str, \'The slug of the team name.\']) - Removes the security manager role from a team for an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) team from an organization."\n\nThe authenticated user must be an administrator for the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.orgsremovesecuritymanagerteamRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9b3ba0>
name='githublargebeta_billinggetgithubactionsbillingorg' description='githublargebeta_billinggetgithubactionsbillingorg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\']) - Gets the summary of the free and paid GitHub Actions minutes used.\n\nPaid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.billinggetgithubactionsbillingorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9b3b00>
name='githublargebeta_billinggetgithubpackagesbillingorg' description='githublargebeta_billinggetgithubpackagesbillingorg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\']) - Gets the free and paid storage used for GitHub Packages in gigabytes.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.billinggetgithubpackagesbillingorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9b3420>
name='githublargebeta_billinggetsharedstoragebillingorg' description='githublargebeta_billinggetsharedstoragebillingorg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\']) - Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.billinggetsharedstoragebillingorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9b32e0>
name='githublargebeta_teamslist' description='githublargebeta_teamslist(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all teams in an organization that are visible to the authenticated user.' args_schema=<class 'pydantic.v1.main.teamslistRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9b3100>
name='githublargebeta_teamscreate' description='githublargebeta_teamscreate(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], name: typing.Annotated[str, \'The name of the team.\'], description: typing.Annotated[str, \'The description of the team.\'] = None, maintainers: typing.Annotated[composio_langchain.composio_tool_spec.Maintainers, \'List GitHub IDs for organization members who will become team maintainers.\'] = None, repo_names: typing.Annotated[composio_langchain.composio_tool_spec.RepoNames, "The full name (e.g., \'organization-name/repository-name\') of repositories to add the team to."] = None, privacy: typing.Annotated[str, \'The level of privacy this team should have. The options are:  **For a non-nested team:**   * `secret` - only visible to organization owners and members of this team.   * `closed` - visible to all members of this organization.  Default: `secret`  **For a parent or child team:**   * `closed` - visible to all members of this organization.  Default for child team: `closed`\'] = None, notification_setting: typing.Annotated[str, \'The notification setting the team has chosen. The options are:   * `notifications_enabled` - team members receive notifications when the team is @mentioned.   * `notifications_disabled` - no one receives notifications.  Default: `notifications_enabled`\'] = None, parent_team_id: typing.Annotated[int, \'The ID of a team to set as the parent team.\'] = None, permission: typing.Annotated[str, \'**Deprecated**. The permission that new repositories will be added to the team with when none is specified.\'] = \'pull\') - To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://docs.github.com/articles/setting-team-creation-permissions-in-your-organization)."\n\nWhen you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/about-teams)".' args_schema=<class 'pydantic.v1.main.teamscreateRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba00c20>
name='githublargebeta_teamsgetbyname' description='githublargebeta_teamsgetbyname(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], team_slug: typing.Annotated[str, \'The slug of the team name.\']) - Gets a team using the team\'s `slug`. To create the `slug`, GitHub replaces special characters in the `name` string, changes all words to lowercase, and replaces spaces with a `-` separator. For example, `"My TEam Näme"` would become `my-team-name`.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.' args_schema=<class 'pydantic.v1.main.teamsgetbynameRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba00220>
name='githublargebeta_teamsupdateinorg' description="githublargebeta_teamsupdateinorg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], team_slug: typing.Annotated[str, 'The slug of the team name.'], name: typing.Annotated[str, 'The name of the team.'] = None, description: typing.Annotated[str, 'The description of the team.'] = None, privacy: typing.Annotated[str, 'The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:  **For a non-nested team:**   * `secret` - only visible to organization owners and members of this team.   * `closed` - visible to all members of this organization.  **For a parent or child team:**   * `closed` - visible to all members of this organization.'] = None, notification_setting: typing.Annotated[str, 'The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are:  * `notifications_enabled` - team members receive notifications when the team is @mentioned.   * `notifications_disabled` - no one receives notifications.'] = None, parent_team_id: typing.Annotated[int, 'The ID of a team to set as the parent team.'] = None, permission: typing.Annotated[str, '**Deprecated**. The permission that new repositories will be added to the team with when none is specified.'] = 'pull') - To edit a team, the authenticated user must either be an organization owner or a team maintainer.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`." args_schema=<class 'pydantic.v1.main.teamsupdateinorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba01080>
name='githublargebeta_teamsdeleteinorg' description="githublargebeta_teamsdeleteinorg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], team_slug: typing.Annotated[str, 'The slug of the team name.']) - To delete a team, the authenticated user must be an organization owner or team maintainer.\n\nIf you are an organization owner, deleting a parent team will delete all of its child teams as well.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`." args_schema=<class 'pydantic.v1.main.teamsdeleteinorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba01800>
name='githublargebeta_teamslistdiscussionsinorg' description='githublargebeta_teamslistdiscussionsinorg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], team_slug: typing.Annotated[str, \'The slug of the team name.\'], pinned: typing.Annotated[str, \'Pinned discussions only filter\'] = None, direction: typing.Annotated[str, \'The direction to sort the results by.\'] = \'desc\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List all discussions on a team\'s page.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.teamslistdiscussionsinorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba011c0>
name='githublargebeta_teamscreatediscussioninorg' description='githublargebeta_teamscreatediscussioninorg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], team_slug: typing.Annotated[str, \'The slug of the team name.\'], title: typing.Annotated[str, "The discussion post\'s title."], body: typing.Annotated[str, "The discussion post\'s body text."], private: typing.Annotated[bool, \'Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.\'] = False) - Creates a new discussion post on a team\'s page.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.teamscreatediscussioninorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba01760>
name='githublargebeta_teamsgetdiscussioninorg' description="githublargebeta_teamsgetdiscussioninorg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], team_slug: typing.Annotated[str, 'The slug of the team name.'], discussion_number: typing.Annotated[int, 'The number that identifies the discussion.']) - Get a specific discussion on a team's page.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.teamsgetdiscussioninorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9b3e20>
name='githublargebeta_teamsupdatediscussioninorg' description='githublargebeta_teamsupdatediscussioninorg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], team_slug: typing.Annotated[str, \'The slug of the team name.\'], discussion_number: typing.Annotated[int, \'The number that identifies the discussion.\'], title: typing.Annotated[str, "The discussion post\'s title."] = None, body: typing.Annotated[str, "The discussion post\'s body text."] = None) - Edits the title and body text of a discussion post. Only the parameters you provide are updated.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.teamsupdatediscussioninorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9b11c0>
name='githublargebeta_teamsdeletediscussioninorg' description="githublargebeta_teamsdeletediscussioninorg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], team_slug: typing.Annotated[str, 'The slug of the team name.'], discussion_number: typing.Annotated[int, 'The number that identifies the discussion.']) - Delete a discussion from a team's page.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.teamsdeletediscussioninorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13b9b3920>
name='githublargebeta_teamslistdiscussioncommentsinorg' description='githublargebeta_teamslistdiscussioncommentsinorg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], team_slug: typing.Annotated[str, \'The slug of the team name.\'], discussion_number: typing.Annotated[int, \'The number that identifies the discussion.\'], direction: typing.Annotated[str, \'The direction to sort the results by.\'] = \'desc\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List all comments on a team discussion.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.teamslistdiscussioncommentsinorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba01940>
name='githublargebeta_teamscreatediscussioncommentinorg' description='githublargebeta_teamscreatediscussioncommentinorg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], team_slug: typing.Annotated[str, \'The slug of the team name.\'], discussion_number: typing.Annotated[int, \'The number that identifies the discussion.\'], body: typing.Annotated[str, "The discussion comment\'s body text."]) - Creates a new comment on a team discussion.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.teamscreatediscussioncommentinorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba028e0>
name='githublargebeta_teamsgetdiscussioncommentinorg' description="githublargebeta_teamsgetdiscussioncommentinorg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], team_slug: typing.Annotated[str, 'The slug of the team name.'], discussion_number: typing.Annotated[int, 'The number that identifies the discussion.'], comment_number: typing.Annotated[int, 'The number that identifies the comment.']) - Get a specific comment on a team discussion.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.teamsgetdiscussioncommentinorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba01da0>
name='githublargebeta_teamsupdatediscussioncommentinorg' description='githublargebeta_teamsupdatediscussioncommentinorg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], team_slug: typing.Annotated[str, \'The slug of the team name.\'], discussion_number: typing.Annotated[int, \'The number that identifies the discussion.\'], comment_number: typing.Annotated[int, \'The number that identifies the comment.\'], body: typing.Annotated[str, "The discussion comment\'s body text."]) - Edits the body text of a discussion comment.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.teamsupdatediscussioncommentinorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba02e80>
name='githublargebeta_teamsdeletediscussioncommentinorg' description="githublargebeta_teamsdeletediscussioncommentinorg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], team_slug: typing.Annotated[str, 'The slug of the team name.'], discussion_number: typing.Annotated[int, 'The number that identifies the discussion.'], comment_number: typing.Annotated[int, 'The number that identifies the comment.']) - Deletes a comment on a team discussion.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.teamsdeletediscussioncommentinorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba02b60>
name='githublargebeta_reactionslistforteamdiscussioncommentinorg' description='githublargebeta_reactionslistforteamdiscussioncommentinorg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], team_slug: typing.Annotated[str, \'The slug of the team name.\'], discussion_number: typing.Annotated[int, \'The number that identifies the discussion.\'], comment_number: typing.Annotated[int, \'The number that identifies the comment.\'], content: typing.Annotated[str, \'Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion comment.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List the reactions to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.reactionslistforteamdiscussioncommentinorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba03560>
name='githublargebeta_reactionscreateforteamdiscussioncommentinorg' description="githublargebeta_reactionscreateforteamdiscussioncommentinorg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], team_slug: typing.Annotated[str, 'The slug of the team name.'], discussion_number: typing.Annotated[int, 'The number that identifies the discussion.'], comment_number: typing.Annotated[int, 'The number that identifies the comment.'], content: typing.Annotated[str, 'The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion comment.']) - Create a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).\n\nA response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.reactionscreateforteamdiscussioncommentinorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba02840>
name='githublargebeta_reactionsdeleteforteamdiscussioncomment' description="githublargebeta_reactionsdeleteforteamdiscussioncomment(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], team_slug: typing.Annotated[str, 'The slug of the team name.'], discussion_number: typing.Annotated[int, 'The number that identifies the discussion.'], comment_number: typing.Annotated[int, 'The number that identifies the comment.'], reaction_id: typing.Annotated[int, 'The unique identifier of the reaction.']) - **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.\n\nDelete a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.reactionsdeleteforteamdiscussioncommentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba03e20>
name='githublargebeta_reactionslistforteamdiscussioninorg' description='githublargebeta_reactionslistforteamdiscussioninorg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], team_slug: typing.Annotated[str, \'The slug of the team name.\'], discussion_number: typing.Annotated[int, \'The number that identifies the discussion.\'], content: typing.Annotated[str, \'Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List the reactions to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.reactionslistforteamdiscussioninorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba54040>
name='githublargebeta_reactionscreateforteamdiscussioninorg' description="githublargebeta_reactionscreateforteamdiscussioninorg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], team_slug: typing.Annotated[str, 'The slug of the team name.'], discussion_number: typing.Annotated[int, 'The number that identifies the discussion.'], content: typing.Annotated[str, 'The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion.']) - Create a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).\n\nA response with an HTTP `200` status means that you already added the reaction type to this team discussion.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.reactionscreateforteamdiscussioninorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba54220>
name='githublargebeta_reactionsdeleteforteamdiscussion' description="githublargebeta_reactionsdeleteforteamdiscussion(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], team_slug: typing.Annotated[str, 'The slug of the team name.'], discussion_number: typing.Annotated[int, 'The number that identifies the discussion.'], reaction_id: typing.Annotated[int, 'The unique identifier of the reaction.']) - **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.\n\nDelete a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.reactionsdeleteforteamdiscussionRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba542c0>
name='githublargebeta_teamslistpendinginvitationsinorg' description='githublargebeta_teamslistpendinginvitationsinorg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], team_slug: typing.Annotated[str, \'The slug of the team name.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.' args_schema=<class 'pydantic.v1.main.teamslistpendinginvitationsinorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba549a0>
name='githublargebeta_teamslistmembersinorg' description='githublargebeta_teamslistmembersinorg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], team_slug: typing.Annotated[str, \'The slug of the team name.\'], role: typing.Annotated[str, \'Filters members returned by their role in the team.\'] = \'all\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Team members will include the members of child teams.\n\nTo list members in a team, the team must be visible to the authenticated user.' args_schema=<class 'pydantic.v1.main.teamslistmembersinorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba54680>
name='githublargebeta_teamsgetmembershipforuserinorg' description="githublargebeta_teamsgetmembershipforuserinorg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], team_slug: typing.Annotated[str, 'The slug of the team name.'], username: typing.Annotated[str, 'The handle for the GitHub user account.']) - Team members will include the members of child teams.\n\nTo get a user's membership with a team, the team must be visible to the authenticated user.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.\n\n**Note:**\nThe response contains the `state` of the membership and the member's `role`.\n\nThe `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/teams/teams#create-a-team)." args_schema=<class 'pydantic.v1.main.teamsgetmembershipforuserinorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba54cc0>
name='githublargebeta_teamsaddorupdatemembershipforuserinorg' description='githublargebeta_teamsaddorupdatemembershipforuserinorg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], team_slug: typing.Annotated[str, \'The slug of the team name.\'], username: typing.Annotated[str, \'The handle for the GitHub user account.\'], role: typing.Annotated[str, \'The role that this user should have in the team.\'] = \'member\') - Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub\'s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\n**Note:** When you have team synchronization set up for a team with your organization\'s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team\'s membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."\n\nAn organization owner can add someone who is not part of the team\'s organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.\n\nIf the user is already a member of the team, this endpoint will update the role of the team member\'s role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.' args_schema=<class 'pydantic.v1.main.teamsaddorupdatemembershipforuserinorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba54fe0>
name='githublargebeta_teamsremovemembershipforuserinorg' description='githublargebeta_teamsremovemembershipforuserinorg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], team_slug: typing.Annotated[str, \'The slug of the team name.\'], username: typing.Annotated[str, \'The handle for the GitHub user account.\']) - To remove a membership between a user and a team, the authenticated user must have \'admin\' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub\'s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\n**Note:** When you have team synchronization set up for a team with your organization\'s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team\'s membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.' args_schema=<class 'pydantic.v1.main.teamsremovemembershipforuserinorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba55940>
name='githublargebeta_teamslistprojectsinorg' description='githublargebeta_teamslistprojectsinorg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], team_slug: typing.Annotated[str, \'The slug of the team name.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the organization projects for a team.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.' args_schema=<class 'pydantic.v1.main.teamslistprojectsinorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba553a0>
name='githublargebeta_teamscheckpermissionsforprojectinorg' description="githublargebeta_teamscheckpermissionsforprojectinorg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], team_slug: typing.Annotated[str, 'The slug of the team name.'], project_id: typing.Annotated[int, 'The unique identifier of the project.']) - Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`." args_schema=<class 'pydantic.v1.main.teamscheckpermissionsforprojectinorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba559e0>
name='githublargebeta_teamsaddorupdateprojectpermissionsinorg' description='githublargebeta_teamsaddorupdateprojectpermissionsinorg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], team_slug: typing.Annotated[str, \'The slug of the team name.\'], project_id: typing.Annotated[int, \'The unique identifier of the project.\'], permission: typing.Annotated[str, "The permission to grant to the team for this project. Default: the team\'s `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you\'ll need to set `Content-Length` to zero when calling this endpoint. For more information, see \'[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\'"] = None) - Adds an organization project to a team. To add a project to a team or update the team\'s permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.' args_schema=<class 'pydantic.v1.main.teamsaddorupdateprojectpermissionsinorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba55bc0>
name='githublargebeta_teamsremoveprojectinorg' description="githublargebeta_teamsremoveprojectinorg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], team_slug: typing.Annotated[str, 'The slug of the team name.'], project_id: typing.Annotated[int, 'The unique identifier of the project.']) - Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`." args_schema=<class 'pydantic.v1.main.teamsremoveprojectinorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba55ee0>
name='githublargebeta_teamslistreposinorg' description='githublargebeta_teamslistreposinorg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], team_slug: typing.Annotated[str, \'The slug of the team name.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists a team\'s repositories visible to the authenticated user.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.' args_schema=<class 'pydantic.v1.main.teamslistreposinorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba56160>
name='githublargebeta_teamscheckpermissionsforrepoinorg' description="githublargebeta_teamscheckpermissionsforrepoinorg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], team_slug: typing.Annotated[str, 'The slug of the team name.'], owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.\n\nYou can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.\n\nIf a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.\n\nIf the repository is private, you must have at least `read` permission for that repository, and your token must have the `repo` or `admin:org` scope. Otherwise, you will receive a `404 Not Found` response status.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`." args_schema=<class 'pydantic.v1.main.teamscheckpermissionsforrepoinorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba56700>
name='githublargebeta_teamsaddorupdaterepopermissionsinorg' description='githublargebeta_teamsaddorupdaterepopermissionsinorg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], team_slug: typing.Annotated[str, \'The slug of the team name.\'], owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], permission: typing.Annotated[str, "The permission to grant the team on this repository. We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any. If no permission is specified, the team\'s `permission` attribute will be used to determine what permission to grant the team on this repository."] = \'push\') - To add a repository to a team or update the team\'s permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.\n\nFor more information about the permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".' args_schema=<class 'pydantic.v1.main.teamsaddorupdaterepopermissionsinorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba56a20>
name='githublargebeta_teamsremoverepoinorg' description="githublargebeta_teamsremoverepoinorg(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.'], team_slug: typing.Annotated[str, 'The slug of the team name.'], owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`." args_schema=<class 'pydantic.v1.main.teamsremoverepoinorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba56480>
name='githublargebeta_teamslistchildinorg' description='githublargebeta_teamslistchildinorg(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], team_slug: typing.Annotated[str, \'The slug of the team name.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the child teams of the team specified by `{team_slug}`.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.' args_schema=<class 'pydantic.v1.main.teamslistchildinorgRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba56d40>
name='githublargebeta_orgsenableordisablesecurityproductonallorgrepos' description='githublargebeta_orgsenableordisablesecurityproductonallorgrepos(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], security_product: typing.Annotated[str, \'The security feature to enable or disable.\'], enablement: typing.Annotated[str, \'The action to take.`enable_all` means to enable the specified security feature for all repositories in the organization.`disable_all` means to disable the specified security feature for all repositories in the organization.\']) - Enables or disables the specified security feature for all eligible repositories in an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nThe authenticated user must be an organization owner or be member of a team with the security manager role to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.orgsenableordisablesecurityproductonallorgreposRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba57420>
name='githublargebeta_projectsgetcard' description="githublargebeta_projectsgetcard(card_id: typing.Annotated[int, 'The unique identifier of the card.']) - Gets information about a project card." args_schema=<class 'pydantic.v1.main.projectsgetcardRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba57740>
name='githublargebeta_projectsupdatecard' description='githublargebeta_projectsupdatecard(card_id: typing.Annotated[int, \'The unique identifier of the card.\'], note: typing.Annotated[str, "The project card\'s note"] = None, archived: typing.Annotated[bool, \'Whether or not the card is archived\'] = None) - Update an existing project card' args_schema=<class 'pydantic.v1.main.projectsupdatecardRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba579c0>
name='githublargebeta_projectsdeletecard' description="githublargebeta_projectsdeletecard(card_id: typing.Annotated[int, 'The unique identifier of the card.']) - Deletes a project card" args_schema=<class 'pydantic.v1.main.projectsdeletecardRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba57b00>
name='githublargebeta_projectsmovecard' description="githublargebeta_projectsmovecard(card_id: typing.Annotated[int, 'The unique identifier of the card.'], position: typing.Annotated[str, 'The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.'], column_id: typing.Annotated[int, 'The unique identifier of the column the card should be moved to'] = None) - Move a project card" args_schema=<class 'pydantic.v1.main.projectsmovecardRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba57ec0>
name='githublargebeta_projectsgetcolumn' description="githublargebeta_projectsgetcolumn(column_id: typing.Annotated[int, 'The unique identifier of the column.']) - Gets information about a project column." args_schema=<class 'pydantic.v1.main.projectsgetcolumnRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba900e0>
name='githublargebeta_projectsupdatecolumn' description="githublargebeta_projectsupdatecolumn(column_id: typing.Annotated[int, 'The unique identifier of the column.'], name: typing.Annotated[str, 'Name of the project column']) - Update an existing project column" args_schema=<class 'pydantic.v1.main.projectsupdatecolumnRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba90180>
name='githublargebeta_projectsdeletecolumn' description="githublargebeta_projectsdeletecolumn(column_id: typing.Annotated[int, 'The unique identifier of the column.']) - Deletes a project column." args_schema=<class 'pydantic.v1.main.projectsdeletecolumnRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba90040>
name='githublargebeta_projectslistcards' description='githublargebeta_projectslistcards(column_id: typing.Annotated[int, \'The unique identifier of the column.\'], archived_state: typing.Annotated[str, "Filters the project cards that are returned by the card\'s state."] = \'not_archived\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the project cards in a project.' args_schema=<class 'pydantic.v1.main.projectslistcardsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba902c0>
name='githublargebeta_projectscreatecard' description='githublargebeta_projectscreatecard(column_id: typing.Annotated[int, \'The unique identifier of the column.\'], note: typing.Annotated[str, "The project card\'s note"]) - Create a project card' args_schema=<class 'pydantic.v1.main.projectscreatecardRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba905e0>
name='githublargebeta_projectsmovecolumn' description="githublargebeta_projectsmovecolumn(column_id: typing.Annotated[int, 'The unique identifier of the column.'], position: typing.Annotated[str, 'The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.']) - Move a project column" args_schema=<class 'pydantic.v1.main.projectsmovecolumnRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba904a0>
name='githublargebeta_projectsget' description="githublargebeta_projectsget(project_id: typing.Annotated[int, 'The unique identifier of the project.']) - Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned." args_schema=<class 'pydantic.v1.main.projectsgetRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba90ae0>
name='githublargebeta_projectsupdate' description='githublargebeta_projectsupdate(project_id: typing.Annotated[int, \'The unique identifier of the project.\'], name: typing.Annotated[str, \'Name of the project\'] = None, body: typing.Annotated[str, \'Body of the project\'] = None, state: typing.Annotated[str, "State of the project; either \'open\' or \'closed\'"] = None, organization_permission: typing.Annotated[str, \'The baseline permission that all organization members have on this project\'] = None, private: typing.Annotated[bool, \'Whether or not this project can be seen by everyone.\'] = None) - Updates a project board\'s information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.' args_schema=<class 'pydantic.v1.main.projectsupdateRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba90900>
name='githublargebeta_projectsdelete' description="githublargebeta_projectsdelete(project_id: typing.Annotated[int, 'The unique identifier of the project.']) - Deletes a project board. Returns a `404 Not Found` status if projects are disabled." args_schema=<class 'pydantic.v1.main.projectsdeleteRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba91260>
name='githublargebeta_projectslistcollaborators' description='githublargebeta_projectslistcollaborators(project_id: typing.Annotated[int, \'The unique identifier of the project.\'], affiliation: typing.Annotated[str, "Filters the collaborators by their affiliation. `outside` means outside collaborators of a project that are not a member of the project\'s organization. `direct` means collaborators with permissions to a project, regardless of organization membership status. `all` means all collaborators the authenticated user can see."] = \'all\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.' args_schema=<class 'pydantic.v1.main.projectslistcollaboratorsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba90e00>
name='githublargebeta_projectsaddcollaborator' description="githublargebeta_projectsaddcollaborator(project_id: typing.Annotated[int, 'The unique identifier of the project.'], username: typing.Annotated[str, 'The handle for the GitHub user account.'], permission: typing.Annotated[str, 'The permission to grant the collaborator.'] = 'write') - Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator." args_schema=<class 'pydantic.v1.main.projectsaddcollaboratorRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba91300>
name='githublargebeta_projectsremovecollaborator' description="githublargebeta_projectsremovecollaborator(project_id: typing.Annotated[int, 'The unique identifier of the project.'], username: typing.Annotated[str, 'The handle for the GitHub user account.']) - Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator." args_schema=<class 'pydantic.v1.main.projectsremovecollaboratorRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba916c0>
name='githublargebeta_projectsgetpermissionforuser' description="githublargebeta_projectsgetpermissionforuser(project_id: typing.Annotated[int, 'The unique identifier of the project.'], username: typing.Annotated[str, 'The handle for the GitHub user account.']) - Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level." args_schema=<class 'pydantic.v1.main.projectsgetpermissionforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba91940>
name='githublargebeta_projectslistcolumns' description='githublargebeta_projectslistcolumns(project_id: typing.Annotated[int, \'The unique identifier of the project.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the project columns in a project.' args_schema=<class 'pydantic.v1.main.projectslistcolumnsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba91d00>
name='githublargebeta_projectscreatecolumn' description="githublargebeta_projectscreatecolumn(project_id: typing.Annotated[int, 'The unique identifier of the project.'], name: typing.Annotated[str, 'Name of the project column']) - Creates a new project column." args_schema=<class 'pydantic.v1.main.projectscreatecolumnRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba91b20>
name='githublargebeta_ratelimitget' description='githublargebeta_ratelimitget() - **Note:** Accessing this endpoint does not count against your REST API rate limit.\n\nSome categories of endpoints have custom rate limits that are separate from the rate limit governing the other REST API endpoints. For this reason, the API response categorizes your rate limit. Under `resources`, you\'ll see objects relating to different categories:\n* The `core` object provides your rate limit status for all non-search-related resources in the REST API.\n* The `search` object provides your rate limit status for the REST API for searching (excluding code searches). For more information, see "[Search](https://docs.github.com/rest/search/search)."\n* The `code_search` object provides your rate limit status for the REST API for searching code. For more information, see "[Search code](https://docs.github.com/rest/search/search#search-code)."\n* The `graphql` object provides your rate limit status for the GraphQL API. For more information, see "[Resource limitations](https://docs.github.com/graphql/overview/resource-limitations#rate-limit)."\n* The `integration_manifest` object provides your rate limit status for the `POST /app-manifests/{code}/conversions` operation. For more information, see "[Creating a GitHub App from a manifest](https://docs.github.com/apps/creating-github-apps/setting-up-a-github-app/creating-a-github-app-from-a-manifest#3-you-exchange-the-temporary-code-to-retrieve-the-app-configuration)."\n* The `dependency_snapshots` object provides your rate limit status for submitting snapshots to the dependency graph. For more information, see "[Dependency graph](https://docs.github.com/rest/dependency-graph)."\n* The `code_scanning_upload` object provides your rate limit status for uploading SARIF results to code scanning. For more information, see "[Uploading a SARIF file to GitHub](https://docs.github.com/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github)."\n* The `actions_runner_registration` object provides your rate limit status for registering self-hosted runners in GitHub Actions. For more information, see "[Self-hosted runners](https://docs.github.com/rest/actions/self-hosted-runners)."\n* The `source_import` object is no longer in use for any API endpoints, and it will be removed in the next API version. For more information about API versions, see "[API Versions](https://docs.github.com/rest/overview/api-versions)."\n\n**Note:** The `rate` object is deprecated. If you\'re writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.' args_schema=<class 'pydantic.v1.main.ratelimitgetRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba919e0>
name='githublargebeta_reposget' description='githublargebeta_reposget(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\']) - The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.\n\n**Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."' args_schema=<class 'pydantic.v1.main.reposgetRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba91f80>
name='githublargebeta_reposupdate' description='githublargebeta_reposupdate(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], name: typing.Annotated[str, \'The name of the repository.\'] = None, description: typing.Annotated[str, \'A short description of the repository.\'] = None, homepage: typing.Annotated[str, \'A URL with more information about the repository.\'] = None, visibility: typing.Annotated[str, \'The visibility of the repository.\'] = None, security_and_analysis__advanced_security__status: typing.Annotated[str, "Can be `enabled` or `disabled`.__Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see \'[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security).\'__Specify which security and analysis features to enable or disable for the repository.To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \'[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\'For example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request:`{ \'security_and_analysis\': {\'advanced_security\': { \'status\': \'enabled\' } } }`.You can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request."] = None, security_and_analysis__secret_scanning__status: typing.Annotated[str, "Can be `enabled` or `disabled`.__Use the `status` property to enable or disable secret scanning for this repository. For more information, see \'[About secret scanning](/code-security/secret-security/about-secret-scanning).\'__Specify which security and analysis features to enable or disable for the repository.To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \'[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\'For example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request:`{ \'security_and_analysis\': {\'advanced_security\': { \'status\': \'enabled\' } } }`.You can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request."] = None, security_and_analysis__secret_scanning_push_protection__status: typing.Annotated[str, "Can be `enabled` or `disabled`.__Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see \'[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning).\'__Specify which security and analysis features to enable or disable for the repository.To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \'[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\'For example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request:`{ \'security_and_analysis\': {\'advanced_security\': { \'status\': \'enabled\' } } }`.You can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request."] = None, default_branch: typing.Annotated[str, \'Updates the default branch for this repository.\'] = None, squash_merge_commit_title: typing.Annotated[str, "The default value for a squash merge commit title:- `PR_TITLE` - default to the pull request\'s title.- `COMMIT_OR_PR_TITLE` - default to the commit\'s title (if only one commit) or the pull request\'s title (when more than one commit)."] = None, squash_merge_commit_message: typing.Annotated[str, "The default value for a squash merge commit message:- `PR_BODY` - default to the pull request\'s body.- `COMMIT_MESSAGES` - default to the branch\'s commit messages.- `BLANK` - default to a blank commit message."] = None, merge_commit_title: typing.Annotated[str, "The default value for a merge commit title.- `PR_TITLE` - default to the pull request\'s title.- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name)."] = None, merge_commit_message: typing.Annotated[str, "The default value for a merge commit message.- `PR_TITLE` - default to the pull request\'s title.- `PR_BODY` - default to the pull request\'s body.- `BLANK` - default to a blank commit message."] = None, private: typing.Annotated[bool, \'Either `true` to make the repository private or `false` to make it public. Default: `false`.  **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.\'] = False, has_issues: typing.Annotated[bool, \'Either `true` to enable issues for this repository or `false` to disable them.\'] = True, has_projects: typing.Annotated[bool, "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you\'re creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error."] = True, has_wiki: typing.Annotated[bool, \'Either `true` to enable the wiki for this repository or `false` to disable it.\'] = True, is_template: typing.Annotated[bool, \'Either `true` to make this repo available as a template repository or `false` to prevent it.\'] = False, allow_squash_merge: typing.Annotated[bool, \'Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.\'] = True, allow_merge_commit: typing.Annotated[bool, \'Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.\'] = True, allow_rebase_merge: typing.Annotated[bool, \'Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.\'] = True, allow_auto_merge: typing.Annotated[bool, \'Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.\'] = False, delete_branch_on_merge: typing.Annotated[bool, \'Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.\'] = False, allow_update_branch: typing.Annotated[bool, \'Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.\'] = False, use_squash_pr_title_as_default: typing.Annotated[bool, \'Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.\'] = False, archived: typing.Annotated[bool, \'Whether to archive this repository. `false` will unarchive a previously archived repository.\'] = False, allow_forking: typing.Annotated[bool, \'Either `true` to allow private forks, or `false` to prevent private forks.\'] = False, web_commit_signoff_required: typing.Annotated[bool, \'Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits.\'] = False) - **Note**: To edit a repository\'s topics, use the [Replace all repository topics](https://docs.github.com/rest/repos/repos#replace-all-repository-topics) endpoint.' args_schema=<class 'pydantic.v1.main.reposupdateRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba92200>
name='githublargebeta_reposdelete' description="githublargebeta_reposdelete(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Deleting a repository requires admin access.\n\nIf an organization owner has configured the organization to prevent members from deleting organization-owned\nrepositories, you will get a `403 Forbidden` response.\n\nOAuth app tokens and personal access tokens (classic) need the `delete_repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.reposdeleteRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba93740>
name='githublargebeta_actionslistartifactsforrepo' description='githublargebeta_actionslistartifactsforrepo(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], name: typing.Annotated[str, \'The name field of an artifact. When specified, only artifacts with this name will be returned.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all artifacts for a repository.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.' args_schema=<class 'pydantic.v1.main.actionslistartifactsforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba936a0>
name='githublargebeta_actionsgetartifact' description="githublargebeta_actionsgetartifact(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], artifact_id: typing.Annotated[int, 'The unique identifier of the artifact.']) - Gets a specific artifact for a workflow run.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsgetartifactRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x12ef15760>
name='githublargebeta_actionsdeleteartifact' description="githublargebeta_actionsdeleteartifact(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], artifact_id: typing.Annotated[int, 'The unique identifier of the artifact.']) - Deletes an artifact for a workflow run.\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsdeleteartifactRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13a59bec0>
name='githublargebeta_actionsdownloadartifact' description="githublargebeta_actionsdownloadartifact(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], artifact_id: typing.Annotated[int, 'The unique identifier of the artifact.'], archive_format: typing.Annotated[str, 'archive_format']) - Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in\nthe response header to find the URL for the download. The `:archive_format` must be `zip`.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsdownloadartifactRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13a2d89a0>
name='githublargebeta_actionsgetactionscacheusage' description="githublargebeta_actionsgetactionscacheusage(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Gets GitHub Actions cache usage for a repository.\nThe data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsgetactionscacheusageRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x1392604a0>
name='githublargebeta_actionsgetactionscachelist' description='githublargebeta_actionsgetactionscachelist(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], ref: typing.Annotated[str, \'The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.\'] = None, key: typing.Annotated[str, \'An explicit key or prefix for identifying the cache\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, sort_: typing.Annotated[str, \'The property to sort the results by. `created_at` means when the cache was created. `last_accessed_at` means when the cache was last accessed. `size_in_bytes` is the size of the cache in bytes.\'] = \'last_accessed_at\', direction: typing.Annotated[str, \'The direction to sort the results by.\'] = \'desc\') - Lists the GitHub Actions caches for a repository.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionsgetactionscachelistRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13ba92160>
name='githublargebeta_actionsdeleteactionscachebykey' description="githublargebeta_actionsdeleteactionscachebykey(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], key: typing.Annotated[str, 'A key for identifying the cache.'], ref: typing.Annotated[str, 'The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.'] = None) - Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsdeleteactionscachebykeyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bac8040>
name='githublargebeta_actionsdeleteactionscachebyid' description="githublargebeta_actionsdeleteactionscachebyid(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], cache_id: typing.Annotated[int, 'The unique identifier of the GitHub Actions cache.']) - Deletes a GitHub Actions cache for a repository, using a cache ID.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsdeleteactionscachebyidRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bac84a0>
name='githublargebeta_actionsgetjobforworkflowrun' description="githublargebeta_actionsgetjobforworkflowrun(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], job_id: typing.Annotated[int, 'The unique identifier of the job.']) - Gets a specific job in a workflow run.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsgetjobforworkflowrunRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bac89a0>
name='githublargebeta_actionsdownloadjoblogsforworkflowrun' description="githublargebeta_actionsdownloadjoblogsforworkflowrun(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], job_id: typing.Annotated[int, 'The unique identifier of the job.']) - Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look\nfor `Location:` in the response header to find the URL for the download.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsdownloadjoblogsforworkflowrunRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bac8720>
name='githublargebeta_actionsrerunjobforworkflowrun' description="githublargebeta_actionsrerunjobforworkflowrun(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], job_id: typing.Annotated[int, 'The unique identifier of the job.'], enable_debug_logging: typing.Annotated[bool, 'Whether to enable debug logging for the re-run.'] = False) - Re-run a job and its dependent jobs in a workflow run.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsrerunjobforworkflowrunRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bac8400>
name='githublargebeta_actionsgetcustomoidcsubclaimforrepo' description="githublargebeta_actionsgetcustomoidcsubclaimforrepo(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Gets the customization template for an OpenID Connect (OIDC) subject claim.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsgetcustomoidcsubclaimforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bac8c20>
name='githublargebeta_actionssetcustomoidcsubclaimforrepo' description="githublargebeta_actionssetcustomoidcsubclaimforrepo(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], use_default: typing.Annotated[bool, 'Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored.__Actions OIDC subject customization for a repository'], include_claim_keys: typing.Annotated[composio_langchain.composio_tool_spec.IncludeClaimKeys, 'Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.__Actions OIDC subject customization for a repository'] = None) - Sets the customization template and `opt-in` or `opt-out` flag for an OpenID Connect (OIDC) subject claim for a repository.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionssetcustomoidcsubclaimforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bac9b20>
name='githublargebeta_actionslistrepoorganizationsecrets' description='githublargebeta_actionslistrepoorganizationsecrets(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all organization secrets shared with a repository without revealing their encrypted\nvalues.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionslistrepoorganizationsecretsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bac9a80>
name='githublargebeta_actionslistrepoorganizationvariables' description='githublargebeta_actionslistrepoorganizationvariables(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 30). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 10, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all organization variables shared with a repository.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionslistrepoorganizationvariablesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bac9c60>
name='githublargebeta_actionsgetgithubactionspermissionsrepository' description="githublargebeta_actionsgetgithubactionspermissionsrepository(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsgetgithubactionspermissionsrepositoryRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13baca3e0>
name='githublargebeta_actionssetgithubactionspermissionsrepository' description="githublargebeta_actionssetgithubactionspermissionsrepository(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], enabled: typing.Annotated[bool, 'Whether GitHub Actions is enabled on the repository.'], allowed_actions: typing.Annotated[str, 'The permissions policy that controls the actions and reusable workflows that are allowed to run.'] = None) - Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionssetgithubactionspermissionsrepositoryRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bac99e0>
name='githublargebeta_actionsgetworkflowaccesstorepository' description='githublargebeta_actionsgetworkflowaccesstorepository(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\']) - Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.\nThis endpoint only applies to private repositories.\nFor more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)."\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionsgetworkflowaccesstorepositoryRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bac91c0>
name='githublargebeta_actionssetworkflowaccesstorepository' description='githublargebeta_actionssetworkflowaccesstorepository(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], access_level: typing.Annotated[str, \'Defines the level of access that workflows outside of the repository have to actions and reusable workflows within therepository.`none` means the access is only possible from workflows in this repository. `user` level access allows sharing across user owned private repositories only. `organization` level access allows sharing across the organization.\']) - Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.\nThis endpoint only applies to private repositories.\nFor more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)".\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionssetworkflowaccesstorepositoryRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bac8ea0>
name='githublargebeta_actionsgetallowedactionsrepository' description='githublargebeta_actionsgetallowedactionsrepository(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\']) - Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionsgetallowedactionsrepositoryRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bac9800>
name='githublargebeta_actionssetallowedactionsrepository' description='githublargebeta_actionssetallowedactionsrepository(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], github_owned_allowed: typing.Annotated[bool, \'Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.\'] = None, verified_allowed: typing.Annotated[bool, \'Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators.\'] = None, patterns_allowed: typing.Annotated[composio_langchain.composio_tool_spec.PatternsAllowed, \'Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.**Note**: The `patterns_allowed` setting only applies to public repositories.\'] = None) - Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionssetallowedactionsrepositoryRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bacb060>
name='githublargebeta_actionsgetgithubactionsdefaultworkflowpermissionsrepository' description='githublargebeta_actionsgetgithubactionsdefaultworkflowpermissionsrepository(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\']) - Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository,\nas well as if GitHub Actions can submit approving pull request reviews.\nFor more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionsgetgithubactionsdefaultworkflowpermissionsrepositoryRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bacafc0>
name='githublargebeta_actionssetgithubactionsdefaultworkflowpermissionsrepository' description='githublargebeta_actionssetgithubactionsdefaultworkflowpermissionsrepository(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], default_workflow_permissions: typing.Annotated[str, \'The default workflow permissions granted to the GITHUB_TOKEN when running workflows.\'] = None, can_approve_pull_request_reviews: typing.Annotated[bool, \'Whether GitHub Actions can approve pull requests. Enabling this can be a security risk.\'] = None) - Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, and sets if GitHub Actions\ncan submit approving pull request reviews.\nFor more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionssetgithubactionsdefaultworkflowpermissionsrepositoryRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bacb1a0>
name='githublargebeta_actionslistselfhostedrunnersforrepo' description='githublargebeta_actionslistselfhostedrunnersforrepo(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], name: typing.Annotated[str, \'The name of a self-hosted runner.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all self-hosted runners configured in a repository.\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionslistselfhostedrunnersforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bacae80>
name='githublargebeta_actionslistrunnerapplicationsforrepo' description="githublargebeta_actionslistrunnerapplicationsforrepo(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Lists binaries for the runner application that you can download and run.\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionslistrunnerapplicationsforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bacaf20>
name='githublargebeta_actionsgeneraterunnerjitconfigforrepo' description="githublargebeta_actionsgeneraterunnerjitconfigforrepo(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], name: typing.Annotated[str, 'The name of the new runner.'], runner_group_id: typing.Annotated[int, 'The ID of the runner group to register the runner to.'], labels: typing.Annotated[composio_langchain.composio_tool_spec.Labels, 'The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100.'], work_folder: typing.Annotated[str, 'The working directory to be used for job execution, relative to the runner install directory.'] = '_work') - Generates a configuration that can be passed to the runner application at startup.\n\nThe authenticated user must have admin access to the repository.\n\nOAuth tokens and personal access tokens (classic) need the`repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsgeneraterunnerjitconfigforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bacbec0>
name='githublargebeta_actionscreateregistrationtokenforrepo' description="githublargebeta_actionscreateregistrationtokenforrepo(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Returns a token that you can pass to the `config` script. The token expires after one hour.\n\nFor example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:\n\n```\n./config.sh --url https://github.com/octo-org --token TOKEN\n```\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionscreateregistrationtokenforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc00220>
name='githublargebeta_actionscreateremovetokenforrepo' description="githublargebeta_actionscreateremovetokenforrepo(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Returns a token that you can pass to the `config` script to remove a self-hosted runner from an repository. The token expires after one hour.\n\nFor example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:\n\n```\n./config.sh remove --token TOKEN\n```\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionscreateremovetokenforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc000e0>
name='githublargebeta_actionsgetselfhostedrunnerforrepo' description="githublargebeta_actionsgetselfhostedrunnerforrepo(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], runner_id: typing.Annotated[int, 'Unique identifier of the self-hosted runner.']) - Gets a specific self-hosted runner configured in a repository.\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsgetselfhostedrunnerforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc00360>
name='githublargebeta_actionsdeleteselfhostedrunnerfromrepo' description="githublargebeta_actionsdeleteselfhostedrunnerfromrepo(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], runner_id: typing.Annotated[int, 'Unique identifier of the self-hosted runner.']) - Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsdeleteselfhostedrunnerfromrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bacbe20>
name='githublargebeta_actionslistlabelsforselfhostedrunnerforrepo' description="githublargebeta_actionslistlabelsforselfhostedrunnerforrepo(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], runner_id: typing.Annotated[int, 'Unique identifier of the self-hosted runner.']) - Lists all labels for a self-hosted runner configured in a repository.\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionslistlabelsforselfhostedrunnerforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bacbba0>
name='githublargebeta_actionsaddcustomlabelstoselfhostedrunnerforrepo' description="githublargebeta_actionsaddcustomlabelstoselfhostedrunnerforrepo(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], runner_id: typing.Annotated[int, 'Unique identifier of the self-hosted runner.'], labels: typing.Annotated[composio_langchain.composio_tool_spec.Labels, 'The names of the custom labels to add to the runner.']) - Adds custom labels to a self-hosted runner configured in a repository.\n\nAuthenticated users must have admin access to the organization to use this endpoint.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsaddcustomlabelstoselfhostedrunnerforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc00e00>
name='githublargebeta_actionssetcustomlabelsforselfhostedrunnerforrepo' description="githublargebeta_actionssetcustomlabelsforselfhostedrunnerforrepo(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], runner_id: typing.Annotated[int, 'Unique identifier of the self-hosted runner.'], labels: typing.Annotated[composio_langchain.composio_tool_spec.Labels, 'The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.']) - Remove all previous custom labels and set the new custom labels for a specific\nself-hosted runner configured in a repository.\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionssetcustomlabelsforselfhostedrunnerforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc01760>
name='githublargebeta_actionsremoveallcustomlabelsfromselfhostedrunnerforrepo' description="githublargebeta_actionsremoveallcustomlabelsfromselfhostedrunnerforrepo(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], runner_id: typing.Annotated[int, 'Unique identifier of the self-hosted runner.']) - Remove all custom labels from a self-hosted runner configured in a\nrepository. Returns the remaining read-only labels from the runner.\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsremoveallcustomlabelsfromselfhostedrunnerforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc018a0>
name='githublargebeta_actionsremovecustomlabelfromselfhostedrunnerforrepo' description='githublargebeta_actionsremovecustomlabelfromselfhostedrunnerforrepo(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], runner_id: typing.Annotated[int, \'Unique identifier of the self-hosted runner.\'], name: typing.Annotated[str, "The name of a self-hosted runner\'s custom label."]) - Remove a custom label from a self-hosted runner configured\nin a repository. Returns the remaining labels from the runner.\n\nThis endpoint returns a `404 Not Found` status if the custom label is not\npresent on the runner.\n\nAuthenticated users must have admin access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionsremovecustomlabelfromselfhostedrunnerforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc016c0>
name='githublargebeta_actionslistworkflowrunsforrepo' description='githublargebeta_actionslistworkflowrunsforrepo(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], actor: typing.Annotated[str, "Returns someone\'s workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run."] = None, branch: typing.Annotated[str, \'Returns workflow runs associated with a branch. Use the name of the branch of the `push`.\'] = None, event: typing.Annotated[str, "Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \'[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\'"] = None, status: typing.Annotated[str, \'Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.\'] = None, created: typing.Annotated[str, "Returns workflow runs created within the given date-time range. For more information on the syntax, see \'[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\'"] = None, check_suite_id: typing.Annotated[int, \'Returns workflow runs with the `check_suite_id` that you specify.\'] = None, head_sha: typing.Annotated[str, \'Only returns workflow runs that are associated with the specified `head_sha`.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, exclude_pull_requests: typing.Annotated[bool, \'If `true` pull requests are omitted from the response (empty array).\'] = False) - Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.\n\nThis API will return up to 1,000 results for each search when using the following parameters: `actor`, `branch`, `check_suite_id`, `created`, `event`, `head_sha`, `status`.' args_schema=<class 'pydantic.v1.main.actionslistworkflowrunsforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc01800>
name='githublargebeta_actionsgetworkflowrun' description="githublargebeta_actionsgetworkflowrun(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], run_id: typing.Annotated[int, 'The unique identifier of the workflow run.'], exclude_pull_requests: typing.Annotated[bool, 'If `true` pull requests are omitted from the response (empty array).'] = False) - Gets a specific workflow run.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository." args_schema=<class 'pydantic.v1.main.actionsgetworkflowrunRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc01580>
name='githublargebeta_actionsdeleteworkflowrun' description="githublargebeta_actionsdeleteworkflowrun(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], run_id: typing.Annotated[int, 'The unique identifier of the workflow run.']) - Deletes a specific workflow run.\n\nAnyone with write access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsdeleteworkflowrunRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc00a40>
name='githublargebeta_actionsgetreviewsforrun' description="githublargebeta_actionsgetreviewsforrun(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], run_id: typing.Annotated[int, 'The unique identifier of the workflow run.']) - Anyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository." args_schema=<class 'pydantic.v1.main.actionsgetreviewsforrunRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc02020>
name='githublargebeta_actionsapproveworkflowrun' description='githublargebeta_actionsapproveworkflowrun(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], run_id: typing.Annotated[int, \'The unique identifier of the workflow run.\']) - Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see ["Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks)."\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionsapproveworkflowrunRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc022a0>
name='githublargebeta_actionslistworkflowrunartifacts' description='githublargebeta_actionslistworkflowrunartifacts(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], run_id: typing.Annotated[int, \'The unique identifier of the workflow run.\'], name: typing.Annotated[str, \'The name field of an artifact. When specified, only artifacts with this name will be returned.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists artifacts for a workflow run.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.' args_schema=<class 'pydantic.v1.main.actionslistworkflowrunartifactsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc01620>
name='githublargebeta_actionsgetworkflowrunattempt' description="githublargebeta_actionsgetworkflowrunattempt(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], run_id: typing.Annotated[int, 'The unique identifier of the workflow run.'], attempt_number: typing.Annotated[int, 'The attempt number of the workflow run.'], exclude_pull_requests: typing.Annotated[bool, 'If `true` pull requests are omitted from the response (empty array).'] = False) - Gets a specific workflow run attempt.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository." args_schema=<class 'pydantic.v1.main.actionsgetworkflowrunattemptRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc01bc0>
name='githublargebeta_actionslistjobsforworkflowrunattempt' description='githublargebeta_actionslistjobsforworkflowrunattempt(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], run_id: typing.Annotated[int, \'The unique identifier of the workflow run.\'], attempt_number: typing.Annotated[int, \'The attempt number of the workflow run.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists jobs for a specific workflow run attempt. You can use parameters to narrow the list of results. For more information\nabout using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint  with a private repository.' args_schema=<class 'pydantic.v1.main.actionslistjobsforworkflowrunattemptRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc02a20>
name='githublargebeta_actionsdownloadworkflowrunattemptlogs' description="githublargebeta_actionsdownloadworkflowrunattemptlogs(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], run_id: typing.Annotated[int, 'The unique identifier of the workflow run.'], attempt_number: typing.Annotated[int, 'The attempt number of the workflow run.']) - Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after\n1 minute. Look for `Location:` in the response header to find the URL for the download.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsdownloadworkflowrunattemptlogsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc02980>
name='githublargebeta_actionscancelworkflowrun' description="githublargebeta_actionscancelworkflowrun(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], run_id: typing.Annotated[int, 'The unique identifier of the workflow run.']) - Cancels a workflow run using its `id`.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionscancelworkflowrunRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc034c0>
name='githublargebeta_actionsreviewcustomgatesforrun' description='githublargebeta_actionsreviewcustomgatesforrun(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], run_id: typing.Annotated[int, \'The unique identifier of the workflow run.\']) - Approve or reject custom deployment protection rules provided by a GitHub App for a workflow run. For more information, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."\n\n**Note:** GitHub Apps can only review their own custom deployment protection rules.\nTo approve or reject pending deployments that are waiting for review from a specific person or team, see [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`](/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run).\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.' args_schema=<class 'pydantic.v1.main.actionsreviewcustomgatesforrunRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc03740>
name='githublargebeta_actionsforcecancelworkflowrun' description="githublargebeta_actionsforcecancelworkflowrun(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], run_id: typing.Annotated[int, 'The unique identifier of the workflow run.']) - Cancels a workflow run and bypasses conditions that would otherwise cause a workflow execution to continue, such as an `always()` condition on a job.\nYou should only use this endpoint to cancel a workflow run when the workflow run is not responding to [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel`](/rest/actions/workflow-runs#cancel-a-workflow-run).\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsforcecancelworkflowrunRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc039c0>
name='githublargebeta_actionslistjobsforworkflowrun' description='githublargebeta_actionslistjobsforworkflowrun(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], run_id: typing.Annotated[int, \'The unique identifier of the workflow run.\'], filter: typing.Annotated[str, \'Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run.\'] = \'latest\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists jobs for a workflow run. You can use parameters to narrow the list of results. For more information\nabout using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.' args_schema=<class 'pydantic.v1.main.actionslistjobsforworkflowrunRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc031a0>
name='githublargebeta_actionsdownloadworkflowrunlogs' description="githublargebeta_actionsdownloadworkflowrunlogs(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], run_id: typing.Annotated[int, 'The unique identifier of the workflow run.']) - Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for\n`Location:` in the response header to find the URL for the download.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsdownloadworkflowrunlogsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc02d40>
name='githublargebeta_actionsdeleteworkflowrunlogs' description="githublargebeta_actionsdeleteworkflowrunlogs(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], run_id: typing.Annotated[int, 'The unique identifier of the workflow run.']) - Deletes all logs for a workflow run.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsdeleteworkflowrunlogsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc4c360>
name='githublargebeta_actionsgetpendingdeploymentsforrun' description="githublargebeta_actionsgetpendingdeploymentsforrun(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], run_id: typing.Annotated[int, 'The unique identifier of the workflow run.']) - Get all deployment environments for a workflow run that are waiting for protection rules to pass.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsgetpendingdeploymentsforrunRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc4c5e0>
name='githublargebeta_actionsreviewpendingdeploymentsforrun' description="githublargebeta_actionsreviewpendingdeploymentsforrun(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], run_id: typing.Annotated[int, 'The unique identifier of the workflow run.'], environment_ids: typing.Annotated[composio_langchain.composio_tool_spec.EnvironmentIds, 'The list of environment ids to approve or reject'], state: typing.Annotated[str, 'Whether to approve or reject deployment to the specified environments.'], comment: typing.Annotated[str, 'A comment to accompany the deployment review']) - Approve or reject pending deployments that are waiting on approval by a required reviewer.\n\nRequired reviewers with read access to the repository contents and deployments can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsreviewpendingdeploymentsforrunRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc4d120>
name='githublargebeta_actionsrerunworkflow' description="githublargebeta_actionsrerunworkflow(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], run_id: typing.Annotated[int, 'The unique identifier of the workflow run.'], enable_debug_logging: typing.Annotated[bool, 'Whether to enable debug logging for the re-run.'] = False) - Re-runs your workflow run using its `id`.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsrerunworkflowRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc4d260>
name='githublargebeta_actionsrerunworkflowfailedjobs' description="githublargebeta_actionsrerunworkflowfailedjobs(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], run_id: typing.Annotated[int, 'The unique identifier of the workflow run.'], enable_debug_logging: typing.Annotated[bool, 'Whether to enable debug logging for the re-run.'] = False) - Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsrerunworkflowfailedjobsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc4d300>
name='githublargebeta_actionsgetworkflowrunusage' description='githublargebeta_actionsgetworkflowrunusage(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], run_id: typing.Annotated[int, \'The unique identifier of the workflow run.\']) - Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.' args_schema=<class 'pydantic.v1.main.actionsgetworkflowrunusageRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc4d620>
name='githublargebeta_actionslistreposecrets' description='githublargebeta_actionslistreposecrets(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all secrets available in a repository without revealing their encrypted\nvalues.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionslistreposecretsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc4d3a0>
name='githublargebeta_actionsgetrepopublickey' description="githublargebeta_actionsgetrepopublickey(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Gets your public key, which you need to encrypt secrets. You need to\nencrypt a secret before you can create or update secrets.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsgetrepopublickeyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc4cf40>
name='githublargebeta_actionsgetreposecret' description="githublargebeta_actionsgetreposecret(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], secret_name: typing.Annotated[str, 'The name of the secret.']) - Gets a single repository secret without revealing its encrypted value.\n\nThe authenticated user must have collaborator access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsgetreposecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc4d1c0>
name='githublargebeta_actionscreateorupdatereposecret' description='githublargebeta_actionscreateorupdatereposecret(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], secret_name: typing.Annotated[str, \'The name of the secret.\'], encrypted_value: typing.Annotated[str, \'Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/actions/secrets#get-a-repository-public-key) endpoint.\'] = None, key_id: typing.Annotated[str, \'ID of the key you used to encrypt the secret.\'] = None) - Creates or updates a repository secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionscreateorupdatereposecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc4cea0>
name='githublargebeta_actionsdeletereposecret' description="githublargebeta_actionsdeletereposecret(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], secret_name: typing.Annotated[str, 'The name of the secret.']) - Deletes a secret in a repository using the secret name.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsdeletereposecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc4e0c0>
name='githublargebeta_actionslistrepovariables' description='githublargebeta_actionslistrepovariables(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 30). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 10, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all repository variables.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionslistrepovariablesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc4c860>
name='githublargebeta_actionscreaterepovariable' description="githublargebeta_actionscreaterepovariable(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], name: typing.Annotated[str, 'The name of the variable.'], value: typing.Annotated[str, 'The value of the variable.']) - Creates a repository variable that you can reference in a GitHub Actions workflow.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionscreaterepovariableRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc4cfe0>
name='githublargebeta_actionsgetrepovariable' description="githublargebeta_actionsgetrepovariable(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], name: typing.Annotated[str, 'The name of the variable.']) - Gets a specific variable in a repository.\n\nThe authenticated user must have collaborator access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsgetrepovariableRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc4e660>
name='githublargebeta_actionsupdaterepovariable' description="githublargebeta_actionsupdaterepovariable(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], name: typing.Annotated[str, 'The name of the variable.'] = None, value: typing.Annotated[str, 'The value of the variable.'] = None) - Updates a repository variable that you can reference in a GitHub Actions workflow.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsupdaterepovariableRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc4e340>
name='githublargebeta_actionsdeleterepovariable' description="githublargebeta_actionsdeleterepovariable(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], name: typing.Annotated[str, 'The name of the variable.']) - Deletes a repository variable using the variable name.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsdeleterepovariableRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc4ec00>
name='githublargebeta_actionslistrepoworkflows' description='githublargebeta_actionslistrepoworkflows(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the workflows in a repository.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.' args_schema=<class 'pydantic.v1.main.actionslistrepoworkflowsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc4e980>
name='githublargebeta_actionsgetworkflow' description="githublargebeta_actionsgetworkflow(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], workflow_id: typing.Annotated[int, 'The ID of the workflow. You can also pass the workflow file name as a string.']) - Gets a specific workflow. You can replace `workflow_id` with the workflow\nfile name. For example, you could use `main.yaml`.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository." args_schema=<class 'pydantic.v1.main.actionsgetworkflowRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc4f1a0>
name='githublargebeta_actionsdisableworkflow' description="githublargebeta_actionsdisableworkflow(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], workflow_id: typing.Annotated[int, 'The ID of the workflow. You can also pass the workflow file name as a string.']) - Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsdisableworkflowRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc4f4c0>
name='githublargebeta_actionscreateworkflowdispatch' description='githublargebeta_actionscreateworkflowdispatch(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], workflow_id: typing.Annotated[int, \'The ID of the workflow. You can also pass the workflow file name as a string.\'], ref: typing.Annotated[str, \'The git reference for the workflow. The reference can be a branch or tag name.\']) - You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\n\nYou must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionscreateworkflowdispatchRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc4ef20>
name='githublargebeta_actionsenableworkflow' description="githublargebeta_actionsenableworkflow(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], workflow_id: typing.Annotated[int, 'The ID of the workflow. You can also pass the workflow file name as a string.']) - Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsenableworkflowRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc4fce0>
name='githublargebeta_actionslistworkflowruns' description='githublargebeta_actionslistworkflowruns(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], workflow_id: typing.Annotated[int, \'The ID of the workflow. You can also pass the workflow file name as a string.\'], actor: typing.Annotated[str, "Returns someone\'s workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run."] = None, branch: typing.Annotated[str, \'Returns workflow runs associated with a branch. Use the name of the branch of the `push`.\'] = None, event: typing.Annotated[str, "Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \'[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\'"] = None, status: typing.Annotated[str, \'Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.\'] = None, created: typing.Annotated[str, "Returns workflow runs created within the given date-time range. For more information on the syntax, see \'[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\'"] = None, check_suite_id: typing.Annotated[int, \'Returns workflow runs with the `check_suite_id` that you specify.\'] = None, head_sha: typing.Annotated[str, \'Only returns workflow runs that are associated with the specified `head_sha`.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, exclude_pull_requests: typing.Annotated[bool, \'If `true` pull requests are omitted from the response (empty array).\'] = False) - List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).\n\nAnyone with read access to the repository can use this endpoint\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.' args_schema=<class 'pydantic.v1.main.actionslistworkflowrunsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc4ff60>
name='githublargebeta_actionsgetworkflowusage' description='githublargebeta_actionsgetworkflowusage(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], workflow_id: typing.Annotated[int, \'The ID of the workflow. You can also pass the workflow file name as a string.\']) - Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".\n\nYou can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.' args_schema=<class 'pydantic.v1.main.actionsgetworkflowusageRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc8c040>
name='githublargebeta_reposlistactivities' description='githublargebeta_reposlistactivities(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], before: typing.Annotated[str, "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = None, after: typing.Annotated[str, "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = None, ref: typing.Annotated[str, \'The Git reference for the activities you want to list.The `ref` for a branch can be formatted either as `refs/heads/BRANCH_NAME` or `BRANCH_NAME`, where `BRANCH_NAME` is the name of your branch.\'] = None, actor: typing.Annotated[str, \'The GitHub username to use to filter by the actor who performed the activity.\'] = None, time_period: typing.Annotated[str, \'The time period to filter by.For example, `day` will filter for activity that occurred in the past 24 hours, and `week` will filter for activity that occurred in the past 7 days (168 hours).\'] = None, activity_type: typing.Annotated[str, "The activity type to filter by.For example, you can choose to filter by \'force_push\', to see all force pushes to the repository."] = None, direction: typing.Annotated[str, \'The direction to sort the results by.\'] = \'desc\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Lists a detailed history of changes to a repository, such as pushes, merges, force pushes, and branch changes, and associates these changes with commits and users.\n\nFor more information about viewing repository activity,\nsee "[Viewing activity and data for your repository](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository)."' args_schema=<class 'pydantic.v1.main.reposlistactivitiesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc8c0e0>
name='githublargebeta_issueslistassignees' description='githublargebeta_issueslistassignees(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.' args_schema=<class 'pydantic.v1.main.issueslistassigneesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc8cae0>
name='githublargebeta_issuescheckusercanbeassigned' description="githublargebeta_issuescheckusercanbeassigned(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], assignee: typing.Annotated[str, 'assignee']) - Checks if a user has permission to be assigned to an issue in this repository.\n\nIf the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.\n\nOtherwise a `404` status code is returned." args_schema=<class 'pydantic.v1.main.issuescheckusercanbeassignedRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc8d1c0>
name='githublargebeta_reposlistautolinks' description="githublargebeta_reposlistautolinks(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Gets all autolinks that are configured for a repository.\n\nInformation about autolinks are only available to repository administrators." args_schema=<class 'pydantic.v1.main.reposlistautolinksRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc8c860>
name='githublargebeta_reposcreateautolink' description="githublargebeta_reposcreateautolink(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], key_prefix: typing.Annotated[str, 'This prefix appended by certain characters will generate a link any time it is found in an issue, pull request, or commit.'], url_template: typing.Annotated[str, 'The URL must contain `<num>` for the reference number. `<num>` matches different characters depending on the value of `is_alphanumeric`.'], is_alphanumeric: typing.Annotated[bool, 'Whether this autolink reference matches alphanumeric characters. If true, the `<num>` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters.'] = True) - Users with admin access to the repository can create an autolink." args_schema=<class 'pydantic.v1.main.reposcreateautolinkRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc8d760>
name='githublargebeta_reposgetautolink' description="githublargebeta_reposgetautolink(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], autolink_id: typing.Annotated[int, 'The unique identifier of the autolink.']) - This returns a single autolink reference by ID that was configured for the given repository.\n\nInformation about autolinks are only available to repository administrators." args_schema=<class 'pydantic.v1.main.reposgetautolinkRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc8d940>
name='githublargebeta_reposdeleteautolink' description="githublargebeta_reposdeleteautolink(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], autolink_id: typing.Annotated[int, 'The unique identifier of the autolink.']) - This deletes a single autolink reference by ID that was configured for the given repository.\n\nInformation about autolinks are only available to repository administrators." args_schema=<class 'pydantic.v1.main.reposdeleteautolinkRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc8df80>
name='githublargebeta_reposcheckautomatedsecurityfixes' description='githublargebeta_reposcheckautomatedsecurityfixes(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\']) - Shows whether automated security fixes are enabled, disabled or paused for a repository. The authenticated user must have admin read access to the repository. For more information, see "[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".' args_schema=<class 'pydantic.v1.main.reposcheckautomatedsecurityfixesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc8d4e0>
name='githublargebeta_reposenableautomatedsecurityfixes' description='githublargebeta_reposenableautomatedsecurityfixes(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\']) - Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".' args_schema=<class 'pydantic.v1.main.reposenableautomatedsecurityfixesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc8e200>
name='githublargebeta_reposdisableautomatedsecurityfixes' description='githublargebeta_reposdisableautomatedsecurityfixes(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\']) - Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".' args_schema=<class 'pydantic.v1.main.reposdisableautomatedsecurityfixesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc8dd00>
name='githublargebeta_reposlistbranches' description='githublargebeta_reposlistbranches(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], protected: typing.Annotated[bool, \'Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List branches' args_schema=<class 'pydantic.v1.main.reposlistbranchesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc8e5c0>
name='githublargebeta_reposgetbranch' description="githublargebeta_reposgetbranch(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).']) - Get a branch" args_schema=<class 'pydantic.v1.main.reposgetbranchRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc8e7a0>
name='githublargebeta_reposgetbranchprotection' description="githublargebeta_reposgetbranchprotection(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation." args_schema=<class 'pydantic.v1.main.reposgetbranchprotectionRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bc8eb60>
name='githublargebeta_reposupdatebranchprotection' description='githublargebeta_reposupdatebranchprotection(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], branch: typing.Annotated[str, \'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).\'], required_status_checks__strict: typing.Annotated[bool, \'Require branches to be up to date before merging.__Require status checks to pass before merging. Set to `null` to disable.\'], required_status_checks__contexts: typing.Annotated[composio_langchain.composio_tool_spec.RequiredStatusChecksContexts, \'**Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.__Require status checks to pass before merging. Set to `null` to disable.\'], required_status_checks__checks: typing.Annotated[composio_langchain.composio_tool_spec.RequiredStatusChecksChecks, \'The list of status checks to require in order to merge into this branch.__Require status checks to pass before merging. Set to `null` to disable.\'], enforce_admins: typing.Annotated[bool, \'Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.\'], required_pull_request_reviews__dismissal_restrictions__users: typing.Annotated[composio_langchain.composio_tool_spec.RequiredPullRequestReviewsDismissalRestrictionsUsers, \'The list of user `login`s with dismissal access__Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.__Require at least one approving review on a pull request, before merging. Set to `null` to disable.\'], required_pull_request_reviews__dismissal_restrictions__teams: typing.Annotated[composio_langchain.composio_tool_spec.RequiredPullRequestReviewsDismissalRestrictionsTeams, \'The list of team `slug`s with dismissal access__Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.__Require at least one approving review on a pull request, before merging. Set to `null` to disable.\'], required_pull_request_reviews__dismissal_restrictions__apps: typing.Annotated[composio_langchain.composio_tool_spec.RequiredPullRequestReviewsDismissalRestrictionsApps, \'The list of app `slug`s with dismissal access__Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.__Require at least one approving review on a pull request, before merging. Set to `null` to disable.\'], required_pull_request_reviews__dismiss_stale_reviews: typing.Annotated[bool, \'Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.__Require at least one approving review on a pull request, before merging. Set to `null` to disable.\'], required_pull_request_reviews__require_code_owner_reviews: typing.Annotated[bool, \'Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them.__Require at least one approving review on a pull request, before merging. Set to `null` to disable.\'], required_pull_request_reviews__required_approving_review_count: typing.Annotated[int, \'Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.__Require at least one approving review on a pull request, before merging. Set to `null` to disable.\'], required_pull_request_reviews__require_last_push_approval: typing.Annotated[bool, \'Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`.__Require at least one approving review on a pull request, before merging. Set to `null` to disable.\'], required_pull_request_reviews__bypass_pull_request_allowances__users: typing.Annotated[composio_langchain.composio_tool_spec.RequiredPullRequestReviewsBypassPullRequestAllowancesUsers, \'The list of user `login`s allowed to bypass pull request requirements.__Allow specific users, teams, or apps to bypass pull request requirements.__Require at least one approving review on a pull request, before merging. Set to `null` to disable.\'], required_pull_request_reviews__bypass_pull_request_allowances__teams: typing.Annotated[composio_langchain.composio_tool_spec.RequiredPullRequestReviewsBypassPullRequestAllowancesTeams, \'The list of team `slug`s allowed to bypass pull request requirements.__Allow specific users, teams, or apps to bypass pull request requirements.__Require at least one approving review on a pull request, before merging. Set to `null` to disable.\'], required_pull_request_reviews__bypass_pull_request_allowances__apps: typing.Annotated[composio_langchain.composio_tool_spec.RequiredPullRequestReviewsBypassPullRequestAllowancesApps, \'The list of app `slug`s allowed to bypass pull request requirements.__Allow specific users, teams, or apps to bypass pull request requirements.__Require at least one approving review on a pull request, before merging. Set to `null` to disable.\'], restrictions__users: typing.Annotated[composio_langchain.composio_tool_spec.RestrictionsUsers, \'The list of user `login`s with push access__Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.\'], restrictions__teams: typing.Annotated[composio_langchain.composio_tool_spec.RestrictionsTeams, \'The list of team `slug`s with push access__Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.\'], restrictions__apps: typing.Annotated[composio_langchain.composio_tool_spec.RestrictionsApps, \'The list of app `slug`s with push access__Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.\'], required_linear_history: typing.Annotated[bool, "Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see \'[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)\' in the GitHub Help documentation."] = None, allow_force_pushes: typing.Annotated[bool, "Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see \'[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\' in the GitHub Help documentation.\'"] = None, allow_deletions: typing.Annotated[bool, "Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see \'[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\' in the GitHub Help documentation."] = None, block_creations: typing.Annotated[bool, \'If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`.\'] = None, required_conversation_resolution: typing.Annotated[bool, \'Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.\'] = None, lock_branch: typing.Annotated[bool, \'Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. Default: `false`.\'] = False, allow_fork_syncing: typing.Annotated[bool, \'Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. Default: `false`.\'] = False) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub\'s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nProtecting a branch requires admin or owner permissions to the repository.\n\n**Note**: Passing new arrays of `users` and `teams` replaces their previous values.\n\n**Note**: The list of users, apps, and teams in total is limited to 100 items.' args_schema=<class 'pydantic.v1.main.reposupdatebranchprotectionRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bcc2f20>
name='githublargebeta_reposdeletebranchprotection' description="githublargebeta_reposdeletebranchprotection(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation." args_schema=<class 'pydantic.v1.main.reposdeletebranchprotectionRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bcc2de0>
name='githublargebeta_reposgetadminbranchprotection' description="githublargebeta_reposgetadminbranchprotection(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation." args_schema=<class 'pydantic.v1.main.reposgetadminbranchprotectionRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bcc3100>
name='githublargebeta_repossetadminbranchprotection' description="githublargebeta_repossetadminbranchprotection(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nAdding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled." args_schema=<class 'pydantic.v1.main.repossetadminbranchprotectionRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bcc2b60>
name='githublargebeta_reposdeleteadminbranchprotection' description="githublargebeta_reposdeleteadminbranchprotection(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoving admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled." args_schema=<class 'pydantic.v1.main.reposdeleteadminbranchprotectionRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bcc28e0>
name='githublargebeta_reposgetpullrequestreviewprotection' description="githublargebeta_reposgetpullrequestreviewprotection(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation." args_schema=<class 'pydantic.v1.main.reposgetpullrequestreviewprotectionRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bcc2700>
name='githublargebeta_reposupdatepullrequestreviewprotection' description="githublargebeta_reposupdatepullrequestreviewprotection(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).'], dismissal_restrictions__users: typing.Annotated[composio_langchain.composio_tool_spec.DismissalRestrictionsUsers, 'The list of user `login`s with dismissal access__Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.'] = None, dismissal_restrictions__teams: typing.Annotated[composio_langchain.composio_tool_spec.DismissalRestrictionsTeams, 'The list of team `slug`s with dismissal access__Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.'] = None, dismissal_restrictions__apps: typing.Annotated[composio_langchain.composio_tool_spec.DismissalRestrictionsApps, 'The list of app `slug`s with dismissal access__Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.'] = None, dismiss_stale_reviews: typing.Annotated[bool, 'Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.'] = None, require_code_owner_reviews: typing.Annotated[bool, 'Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed.'] = None, required_approving_review_count: typing.Annotated[int, 'Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.'] = None, bypass_pull_request_allowances__users: typing.Annotated[composio_langchain.composio_tool_spec.BypassPullRequestAllowancesUsers, 'The list of user `login`s allowed to bypass pull request requirements.__Allow specific users, teams, or apps to bypass pull request requirements.'] = None, bypass_pull_request_allowances__teams: typing.Annotated[composio_langchain.composio_tool_spec.BypassPullRequestAllowancesTeams, 'The list of team `slug`s allowed to bypass pull request requirements.__Allow specific users, teams, or apps to bypass pull request requirements.'] = None, bypass_pull_request_allowances__apps: typing.Annotated[composio_langchain.composio_tool_spec.BypassPullRequestAllowancesApps, 'The list of app `slug`s allowed to bypass pull request requirements.__Allow specific users, teams, or apps to bypass pull request requirements.'] = None, require_last_push_approval: typing.Annotated[bool, 'Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`'] = False) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nUpdating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.\n\n**Note**: Passing new arrays of `users` and `teams` replaces their previous values." args_schema=<class 'pydantic.v1.main.reposupdatepullrequestreviewprotectionRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bcc3060>
name='githublargebeta_reposdeletepullrequestreviewprotection' description="githublargebeta_reposdeletepullrequestreviewprotection(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation." args_schema=<class 'pydantic.v1.main.reposdeletepullrequestreviewprotectionRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bcc2e80>
name='githublargebeta_reposgetcommitsignatureprotection' description="githublargebeta_reposgetcommitsignatureprotection(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nWhen authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.\n\n**Note**: You must enable branch protection to require signed commits." args_schema=<class 'pydantic.v1.main.reposgetcommitsignatureprotectionRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bcc3380>
name='githublargebeta_reposcreatecommitsignatureprotection' description="githublargebeta_reposcreatecommitsignatureprotection(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nWhen authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits." args_schema=<class 'pydantic.v1.main.reposcreatecommitsignatureprotectionRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bcc3600>
name='githublargebeta_reposdeletecommitsignatureprotection' description="githublargebeta_reposdeletecommitsignatureprotection(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nWhen authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits." args_schema=<class 'pydantic.v1.main.reposdeletecommitsignatureprotectionRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bcc3880>
name='githublargebeta_reposgetstatuschecksprotection' description="githublargebeta_reposgetstatuschecksprotection(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation." args_schema=<class 'pydantic.v1.main.reposgetstatuschecksprotectionRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bcc1800>
name='githublargebeta_reposupdatestatuscheckprotection' description="githublargebeta_reposupdatestatuscheckprotection(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).'], strict: typing.Annotated[bool, 'Require branches to be up to date before merging.'] = None, contexts: typing.Annotated[composio_langchain.composio_tool_spec.Contexts, '**Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.'] = None, checks: typing.Annotated[composio_langchain.composio_tool_spec.Checks, 'The list of status checks to require in order to merge into this branch.'] = None) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nUpdating required status checks requires admin or owner permissions to the repository and branch protection to be enabled." args_schema=<class 'pydantic.v1.main.reposupdatestatuscheckprotectionRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bcc00e0>
name='githublargebeta_reposremovestatuscheckprotection' description="githublargebeta_reposremovestatuscheckprotection(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation." args_schema=<class 'pydantic.v1.main.reposremovestatuscheckprotectionRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bcc0400>
name='githublargebeta_reposgetallstatuscheckcontexts' description="githublargebeta_reposgetallstatuscheckcontexts(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation." args_schema=<class 'pydantic.v1.main.reposgetallstatuscheckcontextsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bcc0540>
name='githublargebeta_reposaddstatuscheckcontexts' description="githublargebeta_reposaddstatuscheckcontexts(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation." args_schema=<class 'pydantic.v1.main.reposaddstatuscheckcontextsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bcc09a0>
name='githublargebeta_repossetstatuscheckcontexts' description="githublargebeta_repossetstatuscheckcontexts(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation." args_schema=<class 'pydantic.v1.main.repossetstatuscheckcontextsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bcc3ec0>
name='githublargebeta_reposremovestatuscheckcontexts' description="githublargebeta_reposremovestatuscheckcontexts(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation." args_schema=<class 'pydantic.v1.main.reposremovestatuscheckcontextsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bcc0040>
name='githublargebeta_reposgetaccessrestrictions' description="githublargebeta_reposgetaccessrestrictions(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists who has access to this protected branch.\n\n**Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories." args_schema=<class 'pydantic.v1.main.reposgetaccessrestrictionsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bcc19e0>
name='githublargebeta_reposdeleteaccessrestrictions' description="githublargebeta_reposdeleteaccessrestrictions(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nDisables the ability to restrict who can push to this branch." args_schema=<class 'pydantic.v1.main.reposdeleteaccessrestrictionsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bcc2200>
name='githublargebeta_reposgetappswithaccesstoprotectedbranch' description="githublargebeta_reposgetappswithaccesstoprotectedbranch(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists the GitHub Apps that have push access to this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch." args_schema=<class 'pydantic.v1.main.reposgetappswithaccesstoprotectedbranchRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bcc0860>
name='githublargebeta_reposaddappaccessrestrictions' description="githublargebeta_reposaddappaccessrestrictions(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).'], apps: typing.Annotated[composio_langchain.composio_tool_spec.Apps, 'The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nGrants the specified apps push access for this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch." args_schema=<class 'pydantic.v1.main.reposaddappaccessrestrictionsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd10680>
name='githublargebeta_repossetappaccessrestrictions' description="githublargebeta_repossetappaccessrestrictions(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).'], apps: typing.Annotated[composio_langchain.composio_tool_spec.Apps, 'The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReplaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch." args_schema=<class 'pydantic.v1.main.repossetappaccessrestrictionsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd10fe0>
name='githublargebeta_reposremoveappaccessrestrictions' description="githublargebeta_reposremoveappaccessrestrictions(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).'], apps: typing.Annotated[composio_langchain.composio_tool_spec.Apps, 'The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoves the ability of an app to push to this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch." args_schema=<class 'pydantic.v1.main.reposremoveappaccessrestrictionsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd10860>
name='githublargebeta_reposgetteamswithaccesstoprotectedbranch' description="githublargebeta_reposgetteamswithaccesstoprotectedbranch(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists the teams who have push access to this branch. The list includes child teams." args_schema=<class 'pydantic.v1.main.reposgetteamswithaccesstoprotectedbranchRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd10720>
name='githublargebeta_reposaddteamaccessrestrictions' description="githublargebeta_reposaddteamaccessrestrictions(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nGrants the specified teams push access for this branch. You can also give push access to child teams." args_schema=<class 'pydantic.v1.main.reposaddteamaccessrestrictionsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd107c0>
name='githublargebeta_repossetteamaccessrestrictions' description="githublargebeta_repossetteamaccessrestrictions(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReplaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams." args_schema=<class 'pydantic.v1.main.repossetteamaccessrestrictionsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd10040>
name='githublargebeta_reposremoveteamaccessrestrictions' description="githublargebeta_reposremoveteamaccessrestrictions(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoves the ability of a team to push to this branch. You can also remove push access for child teams." args_schema=<class 'pydantic.v1.main.reposremoveteamaccessrestrictionsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd11120>
name='githublargebeta_reposgetuserswithaccesstoprotectedbranch' description="githublargebeta_reposgetuserswithaccesstoprotectedbranch(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists the people who have push access to this branch." args_schema=<class 'pydantic.v1.main.reposgetuserswithaccesstoprotectedbranchRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd11620>
name='githublargebeta_reposadduseraccessrestrictions' description="githublargebeta_reposadduseraccessrestrictions(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).'], users: typing.Annotated[composio_langchain.composio_tool_spec.Users, 'The username for users']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nGrants the specified people push access for this branch.\n\n| Type    | Description                                                                                                                   |\n| ------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |" args_schema=<class 'pydantic.v1.main.reposadduseraccessrestrictionsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bcc0180>
name='githublargebeta_repossetuseraccessrestrictions' description="githublargebeta_repossetuseraccessrestrictions(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).'], users: typing.Annotated[composio_langchain.composio_tool_spec.Users, 'The username for users']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReplaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.\n\n| Type    | Description                                                                                                                   |\n| ------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |" args_schema=<class 'pydantic.v1.main.repossetuseraccessrestrictionsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd10e00>
name='githublargebeta_reposremoveuseraccessrestrictions' description="githublargebeta_reposremoveuseraccessrestrictions(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).'], users: typing.Annotated[composio_langchain.composio_tool_spec.Users, 'The username for users']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoves the ability of a user to push to this branch.\n\n| Type    | Description                                                                                                                                   |\n| ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |\n| `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |" args_schema=<class 'pydantic.v1.main.reposremoveuseraccessrestrictionsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd128e0>
name='githublargebeta_reposrenamebranch' description='githublargebeta_reposrenamebranch(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], branch: typing.Annotated[str, \'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).\'], new_name: typing.Annotated[str, \'The new name of the branch.\']) - Renames a branch in a repository.\n\n**Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won\'t be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)".\n\nThe authenticated user must have push access to the branch. If the branch is the default branch, the authenticated user must also have admin or owner permissions.\n\nIn order to rename the default branch, fine-grained access tokens also need the `administration:write` repository permission.' args_schema=<class 'pydantic.v1.main.reposrenamebranchRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd12840>
name='githublargebeta_checkscreate' description='githublargebeta_checkscreate(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], name: typing.Annotated[str, "The name of the check. For example, \'code-coverage\'."], head_sha: typing.Annotated[str, \'The SHA of the commit.\'], output__title: typing.Annotated[str, \'The title of the check run.__Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run.\'], output__summary: typing.Annotated[str, \'The summary of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.__Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run.\'], details_url: typing.Annotated[str, "The URL of the integrator\'s site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used."] = None, external_id: typing.Annotated[str, "A reference for the run on the integrator\'s system."] = None, started_at: typing.Annotated[str, \'The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, conclusion: typing.Annotated[str, \'**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.\'] = None, completed_at: typing.Annotated[str, \'The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, output__text: typing.Annotated[str, \'The details of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.__Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run.\'] = None, output__annotations: typing.Annotated[composio_langchain.composio_tool_spec.OutputAnnotations, "Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/checks/runs#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. GitHub Actions are limited to 10 warning annotations and 10 error annotations per step. For details about how you can view annotations on GitHub, see \'[About status checks](https://docs.github.com/articles/about-status-checks#checks)\'.__Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run."] = None, output__images: typing.Annotated[composio_langchain.composio_tool_spec.OutputImages, \'Adds images to the output displayed in the GitHub pull request UI.__Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run.\'] = None, actions: typing.Annotated[composio_langchain.composio_tool_spec.Actions, "Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see \'[Check runs and requested actions](https://docs.github.com/rest/guides/using-the-rest-api-to-interact-with-checks#check-runs-and-requested-actions).\'"] = None, status: typing.Annotated[str, \'The current status of the check run. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.\'] = \'queued\') - Creates a new check run for a specific commit in a repository.\n\nTo create a check run, you must use a GitHub App. OAuth apps and authenticated users are not able to create a check suite.\n\nIn a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.\n\n**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.' args_schema=<class 'pydantic.v1.main.checkscreateRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd13b00>
name='githublargebeta_checksget' description="githublargebeta_checksget(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], check_run_id: typing.Annotated[int, 'The unique identifier of the check run.']) - Gets a single check run using its `id`.\n\n**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository." args_schema=<class 'pydantic.v1.main.checksgetRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd13c40>
name='githublargebeta_checksupdate' description='githublargebeta_checksupdate(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], check_run_id: typing.Annotated[int, \'The unique identifier of the check run.\'], output__summary: typing.Annotated[str, \'Can contain Markdown.__Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run.\'], name: typing.Annotated[str, "The name of the check. For example, \'code-coverage\'."] = None, details_url: typing.Annotated[str, "The URL of the integrator\'s site that has the full details of the check."] = None, external_id: typing.Annotated[str, "A reference for the run on the integrator\'s system."] = None, started_at: typing.Annotated[str, \'This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, status: typing.Annotated[str, \'The current status of the check run. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.\'] = None, conclusion: typing.Annotated[str, \'**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.\'] = None, completed_at: typing.Annotated[str, \'The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, output__title: typing.Annotated[str, \'**Required**.__Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run.\'] = None, output__text: typing.Annotated[str, \'Can contain Markdown.__Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run.\'] = None, output__annotations: typing.Annotated[composio_langchain.composio_tool_spec.OutputAnnotations, "Adds information from your analysis to specific lines of code. Annotations are visible in GitHub\'s pull request UI. Annotations are visible in GitHub\'s pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/checks/runs#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. GitHub Actions are limited to 10 warning annotations and 10 error annotations per step. For details about annotations in the UI, see \'[About status checks](https://docs.github.com/articles/about-status-checks#checks)\'.__Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run."] = None, output__images: typing.Annotated[composio_langchain.composio_tool_spec.OutputImages, \'Adds images to the output displayed in the GitHub pull request UI.__Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run.\'] = None, actions: typing.Annotated[composio_langchain.composio_tool_spec.Actions, "Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see \'[Check runs and requested actions](https://docs.github.com/rest/guides/using-the-rest-api-to-interact-with-checks#check-runs-and-requested-actions).\'"] = None) - Updates a check run for a specific commit in a repository.\n\n**Note:** The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nOAuth apps and personal access tokens (classic) cannot use this endpoint.' args_schema=<class 'pydantic.v1.main.checksupdateRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd12480>
name='githublargebeta_checkslistannotations' description='githublargebeta_checkslistannotations(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], check_run_id: typing.Annotated[int, \'The unique identifier of the check run.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists annotations for a check run using the annotation `id`.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.' args_schema=<class 'pydantic.v1.main.checkslistannotationsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd12660>
name='githublargebeta_checksrerequestrun' description='githublargebeta_checksrerequestrun(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], check_run_id: typing.Annotated[int, \'The unique identifier of the check run.\']) - Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger the [`check_run` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) event with the action `rerequested`. When a check run is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.\n\nFor more information about how to re-run GitHub Actions jobs, see "[Re-run a job from a workflow run](https://docs.github.com/rest/actions/workflow-runs#re-run-a-job-from-a-workflow-run)".\n\nOAuth apps and personal access tokens (classic) cannot use this endpoint.' args_schema=<class 'pydantic.v1.main.checksrerequestrunRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd540e0>
name='githublargebeta_checkscreatesuite' description='githublargebeta_checkscreatesuite(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], head_sha: typing.Annotated[str, \'The sha of the head commit.\']) - Creates a check suite manually. By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/checks/runs). You only need to use this endpoint for manually creating check suites when you\'ve disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/rest/checks/suites#update-repository-preferences-for-check-suites)".\n\n**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n\nOAuth apps and personal access tokens (classic) cannot use this endpoint.' args_schema=<class 'pydantic.v1.main.checkscreatesuiteRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd54c20>
name='githublargebeta_checkssetsuitespreferences' description="githublargebeta_checkssetsuitespreferences(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], auto_trigger_checks: typing.Annotated[composio_langchain.composio_tool_spec.AutoTriggerChecks, 'Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default.'] = None) - Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/checks/suites#create-a-check-suite).\nYou must have admin permissions in the repository to set preferences for check suites." args_schema=<class 'pydantic.v1.main.checkssetsuitespreferencesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd554e0>
name='githublargebeta_checksgetsuite' description="githublargebeta_checksgetsuite(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], check_suite_id: typing.Annotated[int, 'The unique identifier of the check suite.']) - Gets a single check suite using its `id`.\n\n**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository." args_schema=<class 'pydantic.v1.main.checksgetsuiteRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd55620>
name='githublargebeta_checkslistforsuite' description='githublargebeta_checkslistforsuite(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], check_suite_id: typing.Annotated[int, \'The unique identifier of the check suite.\'], check_name: typing.Annotated[str, \'Returns check runs with the specified `name`.\'] = None, status: typing.Annotated[str, \'Returns check runs with the specified `status`.\'] = None, filter: typing.Annotated[str, \'Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.\'] = \'latest\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists check runs for a check suite using its `id`.\n\n**Note:** The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.' args_schema=<class 'pydantic.v1.main.checkslistforsuiteRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd10d60>
name='githublargebeta_checksrerequestsuite' description="githublargebeta_checksrerequestsuite(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], check_suite_id: typing.Annotated[int, 'The unique identifier of the check suite.']) - Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.\n\nOAuth apps and personal access tokens (classic) cannot use this endpoint." args_schema=<class 'pydantic.v1.main.checksrerequestsuiteRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd10c20>
name='githublargebeta_codescanninglistalertsforrepo' description='githublargebeta_codescanninglistalertsforrepo(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], tool_name: typing.Annotated[str, \'The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.\'] = None, tool_guid: typing.Annotated[str, \'The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.\'] = None, ref: typing.Annotated[str, \'The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.\'] = None, state: typing.Annotated[str, \'If specified, only code scanning alerts with this state will be returned.\'] = None, severity: typing.Annotated[str, \'If specified, only code scanning alerts with this severity will be returned.\'] = None, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, direction: typing.Annotated[str, \'The direction to sort the results by.\'] = \'desc\', sort_: typing.Annotated[str, \'The property by which to sort the results.\'] = \'created\') - Lists code scanning alerts.\n\nThe response includes a `most_recent_instance` object.\nThis provides details of the most recent instance of this alert\nfor the default branch (or for the specified Git reference if you used `ref` in the request).\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.' args_schema=<class 'pydantic.v1.main.codescanninglistalertsforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd12ac0>
name='githublargebeta_codescanninggetalert' description="githublargebeta_codescanninggetalert(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], alert_number: typing.Annotated[int, 'The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.']) - Gets a single code scanning alert.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories." args_schema=<class 'pydantic.v1.main.codescanninggetalertRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd55080>
name='githublargebeta_codescanningupdatealert' description="githublargebeta_codescanningupdatealert(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], alert_number: typing.Annotated[int, 'The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.'], state: typing.Annotated[str, 'Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`.'], dismissed_reason: typing.Annotated[str, '**Required when the state is dismissed.** The reason for dismissing or closing the alert.'] = None, dismissed_comment: typing.Annotated[str, 'The dismissal comment associated with the dismissal of the alert.'] = None) - Updates the status of a single code scanning alert.\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories." args_schema=<class 'pydantic.v1.main.codescanningupdatealertRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd55580>
name='githublargebeta_codescanninglistalertinstances' description='githublargebeta_codescanninglistalertinstances(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], alert_number: typing.Annotated[int, \'The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.\'], ref: typing.Annotated[str, \'The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.\'] = None, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Lists all instances of the specified code scanning alert.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.' args_schema=<class 'pydantic.v1.main.codescanninglistalertinstancesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd54ea0>
name='githublargebeta_codescanninglistrecentanalyses' description='githublargebeta_codescanninglistrecentanalyses(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], tool_name: typing.Annotated[str, \'The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.\'] = None, tool_guid: typing.Annotated[str, \'The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.\'] = None, ref: typing.Annotated[str, \'The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.\'] = None, sarif_id: typing.Annotated[str, \'Filter analyses belonging to the same SARIF upload.\'] = None, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, direction: typing.Annotated[str, \'The direction to sort the results by.\'] = \'desc\', sort_: typing.Annotated[str, \'The property by which to sort the results.\'] = \'created\') - Lists the details of all code scanning analyses for a repository,\nstarting with the most recent.\nThe response is paginated and you can use the `page` and `per_page` parameters\nto list the analyses you\'re interested in.\nBy default 30 analyses are listed per page.\n\nThe `rules_count` field in the response give the number of rules\nthat were run in the analysis.\nFor very old analyses this data is not available,\nand `0` is returned in this field.\n\n**Deprecation notice**:\nThe `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.' args_schema=<class 'pydantic.v1.main.codescanninglistrecentanalysesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd556c0>
name='githublargebeta_codescanninggetanalysis' description='githublargebeta_codescanninggetanalysis(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], analysis_id: typing.Annotated[int, \'The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation.\']) - Gets a specified code scanning analysis for a repository.\n\nThe default JSON response contains fields that describe the analysis.\nThis includes the Git reference and commit SHA to which the analysis relates,\nthe datetime of the analysis, the name of the code scanning tool,\nand the number of alerts.\n\nThe `rules_count` field in the default response give the number of rules\nthat were run in the analysis.\nFor very old analyses this data is not available,\nand `0` is returned in this field.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/sarif+json`**: Instead of returning a summary of the analysis, this endpoint returns a subset of the analysis data that was uploaded. The data is formatted as [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html). It also returns additional data such as the `github/alertNumber` and `github/alertUrl` properties.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.' args_schema=<class 'pydantic.v1.main.codescanninggetanalysisRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd567a0>
name='githublargebeta_codescanningdeleteanalysis' description='githublargebeta_codescanningdeleteanalysis(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], analysis_id: typing.Annotated[int, \'The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation.\'], confirm_delete: typing.Annotated[str, "Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to `true`, you\'ll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.`"] = None) - Deletes a specified code scanning analysis from a repository.\n\nYou can delete one analysis at a time.\nTo delete a series of analyses, start with the most recent analysis and work backwards.\nConceptually, the process is similar to the undo function in a text editor.\n\nWhen you list the analyses for a repository,\none or more will be identified as deletable in the response:\n\n```\n"deletable": true\n```\n\nAn analysis is deletable when it\'s the most recent in a set of analyses.\nTypically, a repository will have multiple sets of analyses\nfor each enabled code scanning tool,\nwhere a set is determined by a unique combination of analysis values:\n\n* `ref`\n* `tool`\n* `category`\n\nIf you attempt to delete an analysis that is not the most recent in a set,\nyou\'ll get a 400 response with the message:\n\n```\nAnalysis specified is not deletable.\n```\n\nThe response from a successful `DELETE` operation provides you with\ntwo alternative URLs for deleting the next analysis in the set:\n`next_analysis_url` and `confirm_delete_url`.\nUse the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis\nin a set. This is a useful option if you want to preserve at least one analysis\nfor the specified tool in your repository.\nUse the `confirm_delete_url` URL if you are content to remove all analyses for a tool.\nWhen you delete the last analysis in a set, the value of `next_analysis_url` and `confirm_delete_url`\nin the 200 response is `null`.\n\nAs an example of the deletion process,\nlet\'s imagine that you added a workflow that configured a particular code scanning tool\nto analyze the code in a repository. This tool has added 15 analyses:\n10 on the default branch, and another 5 on a topic branch.\nYou therefore have two separate sets of analyses for this tool.\nYou\'ve now decided that you want to remove all of the analyses for the tool.\nTo do this you must make 15 separate deletion requests.\nTo start, you must find an analysis that\'s identified as deletable.\nEach set of analyses always has one that\'s identified as deletable.\nHaving found the deletable analysis for one of the two sets,\ndelete this analysis and then continue deleting the next analysis in the set until they\'re all deleted.\nThen repeat the process for the second set.\nThe procedure therefore consists of a nested loop:\n\n**Outer loop**:\n* List the analyses for the repository, filtered by tool.\n* Parse this list to find a deletable analysis. If found:\n\n  **Inner loop**:\n  * Delete the identified analysis.\n  * Parse the response for the value of `confirm_delete_url` and, if found, use this in the next iteration.\n\nThe above process assumes that you want to remove all trace of the tool\'s analyses from the GitHub user interface, for the specified repository, and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool\'s analysis entirely.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.' args_schema=<class 'pydantic.v1.main.codescanningdeleteanalysisRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd568e0>
name='githublargebeta_codescanninglistcodeqldatabases' description="githublargebeta_codescanninglistcodeqldatabases(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Lists the CodeQL databases that are available in a repository.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories." args_schema=<class 'pydantic.v1.main.codescanninglistcodeqldatabasesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd56a20>
name='githublargebeta_codescanninggetcodeqldatabase' description="githublargebeta_codescanninggetcodeqldatabase(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], language: typing.Annotated[str, 'The language of the CodeQL database.']) - Gets a CodeQL database for a language in a repository.\n\nBy default this endpoint returns JSON metadata about the CodeQL database. To\ndownload the CodeQL database binary content, set the `Accept` header of the request\nto [`application/zip`](https://docs.github.com/rest/overview/media-types), and make sure\nyour HTTP client is configured to follow redirects or use the `Location` header\nto make a second request to get the redirect URL.\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories." args_schema=<class 'pydantic.v1.main.codescanninggetcodeqldatabaseRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd56d40>
name='githublargebeta_codescanninggetdefaultsetup' description="githublargebeta_codescanninggetdefaultsetup(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Gets a code scanning default setup configuration.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories." args_schema=<class 'pydantic.v1.main.codescanninggetdefaultsetupRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd55c60>
name='githublargebeta_codescanningupdatedefaultsetup' description="githublargebeta_codescanningupdatedefaultsetup(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], state: typing.Annotated[str, 'The desired state of code scanning default setup.__Configuration for code scanning default setup.'] = None, query_suite: typing.Annotated[str, 'CodeQL query suite to be used.__Configuration for code scanning default setup.'] = None, languages: typing.Annotated[composio_langchain.composio_tool_spec.Languages, 'CodeQL languages to be analyzed.__Configuration for code scanning default setup.'] = None) - Updates a code scanning default setup configuration.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories." args_schema=<class 'pydantic.v1.main.codescanningupdatedefaultsetupRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd57880>
name='githublargebeta_codescanninguploadsarif' description='githublargebeta_codescanninguploadsarif(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], commit_sha: typing.Annotated[str, \'The SHA of the commit to which the analysis you are uploading relates.\'], ref: typing.Annotated[str, \'The full Git reference, formatted as `refs/heads/<branch name>`,`refs/tags/<tag>`, `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.\'], sarif: typing.Annotated[str, "A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see \'[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning).\'"], checkout_uri: typing.Annotated[str, \'The base directory used in the analysis, as it appears in the SARIF file.This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.\'] = None, started_at: typing.Annotated[str, \'The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, tool_name: typing.Annotated[str, "The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to \'API\'. If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`."] = None, validate_: typing.Annotated[bool, \'Whether the SARIF file will be validated according to the code scanning specifications.This parameter is intended to help integrators ensure that the uploaded SARIF files are correctly rendered by code scanning.\'] = None) - Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. For troubleshooting information, see "[Troubleshooting SARIF uploads](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif)."\n\nThere are two places where you can upload code scanning results.\n - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."\n - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."\n\nYou must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:\n\n```\ngzip -c analysis-data.sarif | base64 -w0\n```\n\nSARIF upload supports a maximum number of entries per the following data objects, and an analysis will be rejected if any of these objects is above its maximum value. For some objects, there are additional values over which the entries will be ignored while keeping the most important entries whenever applicable.\nTo get the most out of your analysis when it includes data above the supported limits, try to optimize the analysis configuration. For example, for the CodeQL tool, identify and remove the most noisy queries. For more information, see "[SARIF results exceed one or more limits](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif/results-exceed-limit)."\n\n\n| **SARIF data**                   | **Maximum values** | **Additional limits**                                                            |\n|----------------------------------|:------------------:|----------------------------------------------------------------------------------|\n| Runs per file                    |         20         |                                                                                  |\n| Results per run                  |       25,000       | Only the top 5,000 results will be included, prioritized by severity.            |\n| Rules per run                    |       25,000       |                                                                                  |\n| Tool extensions per run          |        100         |                                                                                  |\n| Thread Flow Locations per result |       10,000       | Only the top 1,000 Thread Flow Locations will be included, using prioritization. |\n| Location per result\t             |       1,000        | Only 100 locations will be included.                                             |\n| Tags per rule\t                   |         20         | Only 10 tags will be included.                                                   |\n\n\nThe `202 Accepted` response includes an `id` value.\nYou can use this ID to check the status of the upload by using it in the `/sarifs/{sarif_id}` endpoint.\nFor more information, see "[Get information about a SARIF upload](/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload)."\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.' args_schema=<class 'pydantic.v1.main.codescanninguploadsarifRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd577e0>
name='githublargebeta_codescanninggetsarif' description='githublargebeta_codescanninggetsarif(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], sarif_id: typing.Annotated[str, \'The SARIF ID obtained after uploading.\']) - Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/code-scanning/code-scanning#get-a-code-scanning-analysis-for-a-repository)."\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.' args_schema=<class 'pydantic.v1.main.codescanninggetsarifRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd57a60>
name='githublargebeta_reposcodeownerserrors' description='githublargebeta_reposcodeownerserrors(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], ref: typing.Annotated[str, "A branch, tag or commit name used to determine which version of the CODEOWNERS file to use. Default: the repository\'s default branch (e.g. `main`)"] = None) - List any syntax errors that are detected in the CODEOWNERS\nfile.\n\nFor more information about the correct CODEOWNERS syntax,\nsee "[About code owners](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)."' args_schema=<class 'pydantic.v1.main.reposcodeownerserrorsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd9c360>
name='githublargebeta_codespaceslistinrepositoryforauthenticateduser' description='githublargebeta_codespaceslistinrepositoryforauthenticateduser(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the codespaces associated to a specified repository and the authenticated user.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.codespaceslistinrepositoryforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd9c0e0>
name='githublargebeta_codespacescreatewithrepoforauthenticateduser' description="githublargebeta_codespacescreatewithrepoforauthenticateduser(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], ref: typing.Annotated[str, 'Git ref (typically a branch name) for this codespace'] = None, location: typing.Annotated[str, 'The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.'] = None, geo: typing.Annotated[str, 'The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated.'] = None, client_ip: typing.Annotated[str, 'IP for location auto-detection when proxying a request'] = None, machine: typing.Annotated[str, 'Machine type to use for this codespace'] = None, devcontainer_path: typing.Annotated[str, 'Path to devcontainer.json config to use for this codespace'] = None, multi_repo_permissions_opt_out: typing.Annotated[bool, 'Whether to authorize requested permissions from devcontainer.json'] = None, working_directory: typing.Annotated[str, 'Working directory for this codespace'] = None, idle_timeout_minutes: typing.Annotated[int, 'Time in minutes before codespace stops from inactivity'] = None, display_name: typing.Annotated[str, 'Display name for this codespace'] = None, retention_period_minutes: typing.Annotated[int, 'Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).'] = None) - Creates a codespace owned by the authenticated user in the specified repository.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacescreatewithrepoforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd57740>
name='githublargebeta_codespaceslistdevcontainersinrepositoryforauthenticateduser' description='githublargebeta_codespaceslistdevcontainersinrepositoryforauthenticateduser(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files\nspecify launchpoint configurations for codespaces created within the repository.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.codespaceslistdevcontainersinrepositoryforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd57380>
name='githublargebeta_codespacesrepomachinesforauthenticateduser' description="githublargebeta_codespacesrepomachinesforauthenticateduser(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], location: typing.Annotated[str, 'The location to check for available machines. Assigned by IP if not provided.'] = None, client_ip: typing.Annotated[str, 'IP for location auto-detection when proxying a request'] = None, ref: typing.Annotated[str, 'The branch or commit to check for prebuild availability and devcontainer restrictions.'] = None) - List the machine types available for a given repository based on its configuration.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacesrepomachinesforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd12520>
name='githublargebeta_codespacespreflightwithrepoforauthenticateduser' description="githublargebeta_codespacespreflightwithrepoforauthenticateduser(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], ref: typing.Annotated[str, 'The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked.'] = None, client_ip: typing.Annotated[str, 'An alternative IP for default location auto-detection, such as when proxying a request.'] = None) - Gets the default attributes for codespaces created by the user with the repository.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacespreflightwithrepoforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd9c5e0>
name='githublargebeta_codespacescheckpermissionsfordevcontainer' description='githublargebeta_codespacescheckpermissionsfordevcontainer(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], ref: typing.Annotated[str, "The git reference that points to the location of the devcontainer configuration to use for the permission check. The value of `ref` will typically be a branch name (`heads/BRANCH_NAME`). For more information, see \'[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\' in the Git documentation."], devcontainer_path: typing.Annotated[str, \'Path to the devcontainer.json configuration to use for the permission check.\']) - Checks whether the permissions defined by a given devcontainer configuration have been accepted by the authenticated user.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.codespacescheckpermissionsfordevcontainerRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd9c040>
name='githublargebeta_codespaceslistreposecrets' description='githublargebeta_codespaceslistreposecrets(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all development environment secrets available in a repository without revealing their encrypted\nvalues.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.codespaceslistreposecretsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd9d260>
name='githublargebeta_codespacesgetrepopublickey' description="githublargebeta_codespacesgetrepopublickey(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Gets your public key, which you need to encrypt secrets. You need to\nencrypt a secret before you can create or update secrets.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacesgetrepopublickeyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd9d580>
name='githublargebeta_codespacesgetreposecret' description="githublargebeta_codespacesgetreposecret(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], secret_name: typing.Annotated[str, 'The name of the secret.']) - Gets a single repository development environment secret without revealing its encrypted value.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacesgetreposecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd9dbc0>
name='githublargebeta_codespacescreateorupdatereposecret' description='githublargebeta_codespacescreateorupdatereposecret(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], secret_name: typing.Annotated[str, \'The name of the secret.\'], encrypted_value: typing.Annotated[str, \'Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/codespaces/repository-secrets#get-a-repository-public-key) endpoint.\'] = None, key_id: typing.Annotated[str, \'ID of the key you used to encrypt the secret.\'] = None) - Creates or updates a repository development environment secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.codespacescreateorupdatereposecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd9dda0>
name='githublargebeta_codespacesdeletereposecret' description="githublargebeta_codespacesdeletereposecret(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], secret_name: typing.Annotated[str, 'The name of the secret.']) - Deletes a development environment secret in a repository using the secret name.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacesdeletereposecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd9e3e0>
name='githublargebeta_reposlistcollaborators' description='githublargebeta_reposlistcollaborators(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], permission: typing.Annotated[str, \'Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned.\'] = None, affiliation: typing.Annotated[str, \'Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see.\'] = \'all\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.\nOrganization members with write, maintain, or admin privileges on the organization-owned repository can use this endpoint.\n\nTeam members will include the members of child teams.\n\nThe authenticated user must have push access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `read:org` and `repo` scopes to use this endpoint.' args_schema=<class 'pydantic.v1.main.reposlistcollaboratorsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd9e020>
name='githublargebeta_reposcheckcollaborator' description="githublargebeta_reposcheckcollaborator(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], username: typing.Annotated[str, 'The handle for the GitHub user account.']) - For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.\n\nTeam members will include the members of child teams.\n\nThe authenticated user must have push access to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `read:org` and `repo` scopes to use this endpoint." args_schema=<class 'pydantic.v1.main.reposcheckcollaboratorRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd9e660>
name='githublargebeta_reposaddcollaborator' description='githublargebeta_reposaddcollaborator(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], username: typing.Annotated[str, \'The handle for the GitHub user account.\'], permission: typing.Annotated[str, \'The permission to grant the collaborator. **Only valid on organization-owned repositories.** We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any.\'] = \'push\') - This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."\n\nAdding an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."\n\nFor more information on permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:\n\n```\nCannot assign {member} permission of {role name}\n```\n\nNote that, if you choose not to pass any parameters, you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."\n\nThe invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [API](https://docs.github.com/rest/collaborators/invitations).\n\n**Updating an existing collaborator\'s permission level**\n\nThe endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different `permission` parameter. The response will be a `204`, with no other indication that the permission level changed.\n\n**Rate limits**\n\nYou are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.' args_schema=<class 'pydantic.v1.main.reposaddcollaboratorRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd9d8a0>
name='githublargebeta_reposremovecollaborator' description='githublargebeta_reposremovecollaborator(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], username: typing.Annotated[str, \'The handle for the GitHub user account.\']) - Removes a collaborator from a repository.\n\nTo use this endpoint, the authenticated user must either be an administrator of the repository or target themselves for removal.\n\nThis endpoint also:\n- Cancels any outstanding invitations\n- Unasigns the user from any issues\n- Removes access to organization projects if the user is not an organization member and is not a collaborator on any other organization repositories.\n- Unstars the repository\n- Updates access permissions to packages\n\nRemoving a user as a collaborator has the following effects on forks:\n - If the user had access to a fork through their membership to this repository, the user will also be removed from the fork.\n - If the user had their own fork of the repository, the fork will be deleted.\n - If the user still has read access to the repository, open pull requests by this user from a fork will be denied.\n\n**Note**: A user can still have access to the repository through organization permissions like base repository permissions.\n\nAlthough the API responds immediately, the additional permission updates might take some extra time to complete in the background.\n\nFor more information on fork permissions, see "[About permissions and visibility of forks](https://docs.github.com/pull-requests/collaborating-with-pull-requests/working-with-forks/about-permissions-and-visibility-of-forks)".' args_schema=<class 'pydantic.v1.main.reposremovecollaboratorRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd9eac0>
name='githublargebeta_reposgetcollaboratorpermissionlevel' description="githublargebeta_reposgetcollaboratorpermissionlevel(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], username: typing.Annotated[str, 'The handle for the GitHub user account.']) - Checks the repository permission of a collaborator. The possible repository\npermissions are `admin`, `write`, `read`, and `none`.\n\n*Note*: The `permission` attribute provides the legacy base roles of `admin`, `write`, `read`, and `none`, where the\n`maintain` role is mapped to `write` and the `triage` role is mapped to `read`. To determine the role assigned to the\ncollaborator, see the `role_name` attribute, which will provide the full role name, including custom roles. The\n`permissions` hash can also be used to determine which base level of access the collaborator has to the repository." args_schema=<class 'pydantic.v1.main.reposgetcollaboratorpermissionlevelRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd9f2e0>
name='githublargebeta_reposlistcommitcommentsforrepo' description='githublargebeta_reposlistcommitcommentsforrepo(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the commit comments for a specified repository. Comments are ordered by ascending ID.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.reposlistcommitcommentsforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd9ed40>
name='githublargebeta_reposgetcommitcomment' description='githublargebeta_reposgetcommitcomment(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], comment_id: typing.Annotated[int, \'The unique identifier of the comment.\']) - Gets a specified commit comment.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.reposgetcommitcommentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd9f060>
name='githublargebeta_reposupdatecommitcomment' description='githublargebeta_reposupdatecommitcomment(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], comment_id: typing.Annotated[int, \'The unique identifier of the comment.\'], body: typing.Annotated[str, \'The contents of the comment\']) - Updates the contents of a specified commit comment.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.reposupdatecommitcommentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd9f560>
name='githublargebeta_reposdeletecommitcomment' description="githublargebeta_reposdeletecommitcomment(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], comment_id: typing.Annotated[int, 'The unique identifier of the comment.']) - Delete a commit comment" args_schema=<class 'pydantic.v1.main.reposdeletecommitcommentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd9f880>
name='githublargebeta_reactionslistforcommitcomment' description='githublargebeta_reactionslistforcommitcomment(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], comment_id: typing.Annotated[int, \'The unique identifier of the comment.\'], content: typing.Annotated[str, \'Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a commit comment.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List the reactions to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment).' args_schema=<class 'pydantic.v1.main.reactionslistforcommitcommentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bd9fe20>
name='githublargebeta_reactionscreateforcommitcomment' description="githublargebeta_reactionscreateforcommitcomment(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], comment_id: typing.Annotated[int, 'The unique identifier of the comment.'], content: typing.Annotated[str, 'The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the commit comment.']) - Create a reaction to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment). A response with an HTTP `200` status means that you already added the reaction type to this commit comment." args_schema=<class 'pydantic.v1.main.reactionscreateforcommitcommentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bde40e0>
name='githublargebeta_reactionsdeleteforcommitcomment' description="githublargebeta_reactionsdeleteforcommitcomment(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], comment_id: typing.Annotated[int, 'The unique identifier of the comment.'], reaction_id: typing.Annotated[int, 'The unique identifier of the reaction.']) - **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.\n\nDelete a reaction to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment)." args_schema=<class 'pydantic.v1.main.reactionsdeleteforcommitcommentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bde4040>
name='githublargebeta_reposlistcommits' description='githublargebeta_reposlistcommits(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], sha: typing.Annotated[str, \'SHA or branch to start listing commits from. Default: the repository’s default branch (usually `main`).\'] = None, path: typing.Annotated[str, \'Only commits containing this file path will be returned.\'] = None, author: typing.Annotated[str, \'GitHub username or email address to use to filter by commit author.\'] = None, committer: typing.Annotated[str, \'GitHub username or email address to use to filter by commit committer.\'] = None, since: typing.Annotated[str, \'Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, until: typing.Annotated[str, \'Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - **Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit\'s signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user\'s account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |' args_schema=<class 'pydantic.v1.main.reposlistcommitsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bde4860>
name='githublargebeta_reposlistbranchesforheadcommit' description="githublargebeta_reposlistbranchesforheadcommit(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], commit_sha: typing.Annotated[str, 'The SHA of the commit.']) - Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReturns all branches where the given commit SHA is the HEAD, or latest commit for the branch." args_schema=<class 'pydantic.v1.main.reposlistbranchesforheadcommitRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bde4b80>
name='githublargebeta_reposlistcommentsforcommit' description='githublargebeta_reposlistcommentsforcommit(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], commit_sha: typing.Annotated[str, \'The SHA of the commit.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the comments for a specified commit.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.reposlistcommentsforcommitRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bde5260>
name='githublargebeta_reposcreatecommitcomment' description='githublargebeta_reposcreatecommitcomment(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], commit_sha: typing.Annotated[str, \'The SHA of the commit.\'], body: typing.Annotated[str, \'The contents of the comment.\'], path: typing.Annotated[str, \'Relative path of the file to comment on.\'] = None, position: typing.Annotated[int, \'Line index in the diff to comment on.\'] = None, line: typing.Annotated[int, \'**Deprecated**. Use **position** parameter instead. Line number in the file to comment on.\'] = None) - Create a comment for a commit using its `:commit_sha`.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.reposcreatecommitcommentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bde54e0>
name='githublargebeta_reposlistpullrequestsassociatedwithcommit' description='githublargebeta_reposlistpullrequestsassociatedwithcommit(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], commit_sha: typing.Annotated[str, \'The SHA of the commit.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, will only return open pull requests associated with the commit.\n\nTo list the open or merged pull requests associated with a branch, you can set the `commit_sha` parameter to the branch name.' args_schema=<class 'pydantic.v1.main.reposlistpullrequestsassociatedwithcommitRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bde58a0>
name='githublargebeta_reposgetcommit' description='githublargebeta_reposgetcommit(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], ref: typing.Annotated[str, "The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see \'[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\' in the Git documentation."], page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.\n\n**Note:** If there are more than 300 files in the commit diff and the default JSON media type is requested, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." Pagination query parameters are not supported for these media types.\n\n- **`application/vnd.github.diff`**: Returns the diff of the commit. Larger diffs may time out and return a 5xx status code.\n- **`application/vnd.github.patch`**: Returns the patch of the commit. Diffs with binary data will have no `patch` property. Larger diffs may time out and return a 5xx status code.\n- **`application/vnd.github.sha`**: Returns the commit\'s SHA-1 hash. You can use this endpoint to check if a remote reference\'s SHA-1 hash is the same as your local reference\'s SHA-1 hash by providing the local SHA-1 reference as the ETag.\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit\'s signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user\'s account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |' args_schema=<class 'pydantic.v1.main.reposgetcommitRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bde5da0>
name='githublargebeta_checkslistforref' description='githublargebeta_checkslistforref(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], ref: typing.Annotated[str, "The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see \'[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\' in the Git documentation."], check_name: typing.Annotated[str, \'Returns check runs with the specified `name`.\'] = None, status: typing.Annotated[str, \'Returns check runs with the specified `status`.\'] = None, app_id: typing.Annotated[int, \'app_id\'] = None, filter: typing.Annotated[str, \'Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.\'] = \'latest\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name.\n\n**Note:** The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nIf there are more than 1000 check suites on a single git reference, this endpoint will limit check runs to the 1000 most recent check suites. To iterate over all possible check runs, use the [List check suites for a Git reference](https://docs.github.com/rest/reference/checks#list-check-suites-for-a-git-reference) endpoint and provide the `check_suite_id` parameter to the [List check runs in a check suite](https://docs.github.com/rest/reference/checks#list-check-runs-in-a-check-suite) endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.' args_schema=<class 'pydantic.v1.main.checkslistforrefRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bde6160>
name='githublargebeta_checkslistsuitesforref' description='githublargebeta_checkslistsuitesforref(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], ref: typing.Annotated[str, "The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see \'[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\' in the Git documentation."], app_id: typing.Annotated[int, \'Filters check suites by GitHub App `id`.\'] = None, check_name: typing.Annotated[str, \'Returns check runs with the specified `name`.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name.\n\n**Note:** The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.' args_schema=<class 'pydantic.v1.main.checkslistsuitesforrefRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bde5e40>
name='githublargebeta_reposgetcombinedstatusforref' description='githublargebeta_reposgetcombinedstatusforref(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], ref: typing.Annotated[str, "The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see \'[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\' in the Git documentation."], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.\n\n\nAdditionally, a combined `state` is returned. The `state` is one of:\n\n*   **failure** if any of the contexts report as `error` or `failure`\n*   **pending** if there are no statuses or a context is `pending`\n*   **success** if the latest status for all contexts is `success`' args_schema=<class 'pydantic.v1.main.reposgetcombinedstatusforrefRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bde6c00>
name='githublargebeta_reposlistcommitstatusesforref' description='githublargebeta_reposlistcommitstatusesforref(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], ref: typing.Annotated[str, "The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see \'[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\' in the Git documentation."], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.\n\nThis resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.' args_schema=<class 'pydantic.v1.main.reposlistcommitstatusesforrefRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bde7060>
name='githublargebeta_reposgetcommunityprofilemetrics' description='githublargebeta_reposgetcommunityprofilemetrics(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\']) - Returns all community profile metrics for a repository. The repository cannot be a fork.\n\nThe returned metrics include an overall health score, the repository description, the presence of documentation, the\ndetected code of conduct, the detected license, and the presence of ISSUE\\_TEMPLATE, PULL\\_REQUEST\\_TEMPLATE,\nREADME, and CONTRIBUTING files.\n\nThe `health_percentage` score is defined as a percentage of how many of\nthe recommended community health files are present. For more information, see\n"[About community profiles for public repositories](https://docs.github.com/communities/setting-up-your-project-for-healthy-contributions/about-community-profiles-for-public-repositories)."\n\n`content_reports_enabled` is only returned for organization-owned repositories.' args_schema=<class 'pydantic.v1.main.reposgetcommunityprofilemetricsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bde7100>
name='githublargebeta_reposcomparecommits' description='githublargebeta_reposcomparecommits(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], basehead: typing.Annotated[str, \'The base branch and head branch to compare. This parameter expects the format `BASE...HEAD`. Both must be branch names in `repo`. To compare with a branch that exists in a different repository in the same network as `repo`, the `basehead` parameter expects the format `USERNAME:BASE...USERNAME:HEAD`.\'], page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Compares two commits against one another. You can compare refs (branches or tags) and commit SHAs in the same repository, or you can compare refs and commit SHAs that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository\'s network, see "[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)."\n\nThis endpoint is equivalent to running the `git log BASE..HEAD` command, but it returns commits in a different order. The `git log BASE..HEAD` command returns commits in reverse chronological order, whereas the API returns commits in chronological order.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.diff`**: Returns the diff of the commit.\n- **`application/vnd.github.patch`**: Returns the patch of the commit. Diffs with binary data will have no `patch` property.\n\nThe API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.\n\nWhen calling this endpoint without any paging parameter (`per_page` or `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.\n\n**Working with large comparisons**\n\nTo process a response with a large number of commits, use a query parameter (`per_page` or `page`) to paginate the results. When using pagination:\n\n- The list of changed files is only shown on the first page of results, but it includes all changed files for the entire comparison.\n- The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.\n\nFor more information on working with pagination, see "[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api)."\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit\'s signature. The `verification` object includes the following fields:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user\'s account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |' args_schema=<class 'pydantic.v1.main.reposcomparecommitsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bde77e0>
name='githublargebeta_reposgetcontent' description='githublargebeta_reposgetcontent(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], path: typing.Annotated[str, \'path parameter\'], ref: typing.Annotated[str, \'The name of the commit/branch/tag. Default: the repository’s default branch.\'] = None) - Gets the contents of a file or directory in a repository. Specify the file path or directory with the `path` parameter. If you omit the `path` parameter, you will receive the contents of the repository\'s root directory.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw file contents for files and symlinks.\n- **`application/vnd.github.html+json`**: Returns the file contents in HTML. Markup languages are rendered to HTML using GitHub\'s open-source [Markup library](https://github.com/github/markup).\n- **`application/vnd.github.object+json`**: Returns the contents in a consistent object format regardless of the content type. For example, instead of an array of objects for a directory, the response will be an object with an `entries` attribute containing the array of objects.\n\nIf the content is a directory, the response will be an array of objects, one object for each item in the directory. When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value _should_ be "submodule". This behavior exists [for backwards compatibility purposes](https://git.io/v1YCW). In the next major version of the API, the type will be returned as "submodule".\n\nIf the content is a symlink and the symlink\'s target is a normal file in the repository, then the API responds with the content of the file. Otherwise, the API responds with an object describing the symlink itself.\n\nIf the content is a submodule, the `submodule_git_url` field identifies the location of the submodule repository, and the `sha` identifies a specific commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit. If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the github.com URLs (`html_url` and `_links["html"]`) will have null values.\n\n**Notes**:\n\n- To get a repository\'s contents recursively, you can [recursively get the tree](https://docs.github.com/rest/git/trees#get-a-tree).\n- This API has an upper limit of 1,000 files for a directory. If you need to retrieve\nmore files, use the [Git Trees API](https://docs.github.com/rest/git/trees#get-a-tree).\n- Download URLs expire and are meant to be used just once. To ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download.\n- If the requested file\'s size is:\n  - 1 MB or smaller: All features of this endpoint are supported.\n  - Between 1-100 MB: Only the `raw` or `object` custom media types are supported. Both will work as normal, except that when using the `object` media type, the `content` field will be an empty\nstring and the `encoding` field will be `"none"`. To get the contents of these larger files, use the `raw` media type.\n  - Greater than 100 MB: This endpoint is not supported.' args_schema=<class 'pydantic.v1.main.reposgetcontentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bde7420>
name='githublargebeta_reposcreateorupdatefilecontents' description='githublargebeta_reposcreateorupdatefilecontents(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], path: typing.Annotated[str, \'path parameter\'], message: typing.Annotated[str, \'The commit message.\'], content: typing.Annotated[str, \'The new file content, using Base64 encoding.\'], committer__name: typing.Annotated[str, "The name of the author or committer of the commit. You\'ll receive a `422` status code if `name` is omitted.__The person that committed the file. Default: the authenticated user."], committer__email: typing.Annotated[str, "The email of the author or committer of the commit. You\'ll receive a `422` status code if `email` is omitted.__The person that committed the file. Default: the authenticated user."], author__name: typing.Annotated[str, "The name of the author or committer of the commit. You\'ll receive a `422` status code if `name` is omitted.__The author of the file. Default: The `committer` or the authenticated user if you omit `committer`."], author__email: typing.Annotated[str, "The email of the author or committer of the commit. You\'ll receive a `422` status code if `email` is omitted.__The author of the file. Default: The `committer` or the authenticated user if you omit `committer`."], sha: typing.Annotated[str, \'**Required if you are updating a file**. The blob SHA of the file being replaced.\'] = None, branch: typing.Annotated[str, \'The branch name. Default: the repository’s default branch.\'] = None, committer__date: typing.Annotated[str, \'date__The person that committed the file. Default: the authenticated user.\'] = None, author__date: typing.Annotated[str, \'date__The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.\'] = None) - Creates a new file or replaces an existing file in a repository.\n\n**Note:** If you use this endpoint and the "[Delete a file](https://docs.github.com/rest/repos/contents/#delete-a-file)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint. The `workflow` scope is also required in order to modify files in the `.github/workflows` directory.' args_schema=<class 'pydantic.v1.main.reposcreateorupdatefilecontentsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bde7d80>
name='githublargebeta_reposdeletefile' description='githublargebeta_reposdeletefile(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], path: typing.Annotated[str, \'path parameter\'], message: typing.Annotated[str, \'The commit message.\'], sha: typing.Annotated[str, \'The blob SHA of the file being deleted.\'], branch: typing.Annotated[str, \'The branch name. Default: the repository’s default branch\'] = None, committer__name: typing.Annotated[str, \'The name of the author (or committer) of the commit__object containing information about the committer.\'] = None, committer__email: typing.Annotated[str, \'The email of the author (or committer) of the commit__object containing information about the committer.\'] = None, author__name: typing.Annotated[str, \'The name of the author (or committer) of the commit__object containing information about the author.\'] = None, author__email: typing.Annotated[str, \'The email of the author (or committer) of the commit__object containing information about the author.\'] = None) - Deletes a file in a repository.\n\nYou can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.\n\nThe `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user\'s information is used.\n\nYou must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you\'ll receive a `422` status code.\n\n**Note:** If you use this endpoint and the "[Create or update file contents](https://docs.github.com/rest/repos/contents/#create-or-update-file-contents)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.' args_schema=<class 'pydantic.v1.main.reposdeletefileRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf1ca40>
name='githublargebeta_reposlistcontributors' description='githublargebeta_reposlistcontributors(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], anon: typing.Annotated[str, \'Set to `1` or `true` to include anonymous contributors in results.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.\n\nGitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.' args_schema=<class 'pydantic.v1.main.reposlistcontributorsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf1c9a0>
name='githublargebeta_dependabotlistalertsforrepo' description='githublargebeta_dependabotlistalertsforrepo(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], state: typing.Annotated[str, \'A comma-separated list of states. If specified, only alerts with these states will be returned.Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`\'] = None, severity: typing.Annotated[str, \'A comma-separated list of severities. If specified, only alerts with these severities will be returned.Can be: `low`, `medium`, `high`, `critical`\'] = None, ecosystem: typing.Annotated[str, \'A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`\'] = None, package: typing.Annotated[str, \'A comma-separated list of package names. If specified, only alerts for these packages will be returned.\'] = None, manifest: typing.Annotated[str, \'A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned.\'] = None, scope: typing.Annotated[str, \'The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.\'] = None, before: typing.Annotated[str, "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = None, after: typing.Annotated[str, "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = None, last: typing.Annotated[int, \'**Deprecated**. The number of results per page (max 100), starting from the last matching result.This parameter must not be used in combination with `first`.Instead, use `per_page` in combination with `before` to fetch the last page of results.\'] = None, sort_: typing.Annotated[str, "The property by which to sort the results.`created` means when the alert was created.`updated` means when the alert\'s state last changed."] = \'created\', direction: typing.Annotated[str, \'The direction to sort the results by.\'] = \'desc\', page: typing.Annotated[int, \'**Deprecated**. Page number of the results to fetch. Use cursor-based pagination with `before` or `after` instead.\'] = 1, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, first: typing.Annotated[int, \'**Deprecated**. The number of results per page (max 100), starting from the first matching result.This parameter must not be used in combination with `last`.Instead, use `per_page` in combination with `after` to fetch the first page of results.\'] = 30) - OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.' args_schema=<class 'pydantic.v1.main.dependabotlistalertsforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf1c0e0>
name='githublargebeta_dependabotgetalert' description="githublargebeta_dependabotgetalert(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], alert_number: typing.Annotated[int, 'The number that identifies a Dependabot alert in its repository.You can find this at the end of the URL for a Dependabot alert within GitHub,or in `number` fields in the response from the`GET /repos/{owner}/{repo}/dependabot/alerts` operation.']) - OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead." args_schema=<class 'pydantic.v1.main.dependabotgetalertRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf1d080>
name='githublargebeta_dependabotupdatealert' description='githublargebeta_dependabotupdatealert(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], alert_number: typing.Annotated[int, \'The number that identifies a Dependabot alert in its repository.You can find this at the end of the URL for a Dependabot alert within GitHub,or in `number` fields in the response from the`GET /repos/{owner}/{repo}/dependabot/alerts` operation.\'], state: typing.Annotated[str, \'The state of the Dependabot alert.A `dismissed_reason` must be provided when setting the state to `dismissed`.\'], dismissed_reason: typing.Annotated[str, \'**Required when `state` is `dismissed`.** A reason for dismissing the alert.\'] = None, dismissed_comment: typing.Annotated[str, \'An optional comment associated with dismissing the alert.\'] = None) - The authenticated user must have access to security alerts for the repository to use this endpoint. For more information, see "[Granting access to security alerts](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository#granting-access-to-security-alerts)."\n\nOAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.' args_schema=<class 'pydantic.v1.main.dependabotupdatealertRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf1d440>
name='githublargebeta_dependabotlistreposecrets' description='githublargebeta_dependabotlistreposecrets(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all secrets available in a repository without revealing their encrypted\nvalues.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.dependabotlistreposecretsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf1dee0>
name='githublargebeta_dependabotgetrepopublickey' description="githublargebeta_dependabotgetrepopublickey(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Gets your public key, which you need to encrypt secrets. You need to\nencrypt a secret before you can create or update secrets. Anyone with read access\nto the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint if the repository is private." args_schema=<class 'pydantic.v1.main.dependabotgetrepopublickeyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf1e160>
name='githublargebeta_dependabotgetreposecret' description="githublargebeta_dependabotgetreposecret(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], secret_name: typing.Annotated[str, 'The name of the secret.']) - Gets a single repository secret without revealing its encrypted value.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.dependabotgetreposecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf1e8e0>
name='githublargebeta_dependabotcreateorupdatereposecret' description='githublargebeta_dependabotcreateorupdatereposecret(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], secret_name: typing.Annotated[str, \'The name of the secret.\'], encrypted_value: typing.Annotated[str, \'Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/dependabot/secrets#get-a-repository-public-key) endpoint.\'] = None, key_id: typing.Annotated[str, \'ID of the key you used to encrypt the secret.\'] = None) - Creates or updates a repository secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.dependabotcreateorupdatereposecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf1eac0>
name='githublargebeta_dependabotdeletereposecret' description="githublargebeta_dependabotdeletereposecret(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], secret_name: typing.Annotated[str, 'The name of the secret.']) - Deletes a secret in a repository using the secret name.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.dependabotdeletereposecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf1f100>
name='githublargebeta_dependencygraphdiffrange' description="githublargebeta_dependencygraphdiffrange(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], basehead: typing.Annotated[str, 'The base and head Git revisions to compare. The Git revisions will be resolved to commit SHAs. Named revisions will be resolved to their corresponding HEAD commits, and an appropriate merge base will be determined. This parameter expects the format `{base}...{head}`.'], name: typing.Annotated[str, 'The full path, relative to the repository root, of the dependency manifest file.'] = None) - Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits." args_schema=<class 'pydantic.v1.main.dependencygraphdiffrangeRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf1ed40>
name='githublargebeta_dependencygraphexportsbom' description="githublargebeta_dependencygraphexportsbom(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Exports the software bill of materials (SBOM) for a repository in SPDX JSON format." args_schema=<class 'pydantic.v1.main.dependencygraphexportsbomRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf1e5c0>
name='githublargebeta_dependencygraphcreaterepositorysnapshot' description='githublargebeta_dependencygraphcreaterepositorysnapshot(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], version: typing.Annotated[int, "The version of the repository snapshot submission.__Create a new snapshot of a repository\'s dependencies."], job__id: typing.Annotated[str, "The external ID of the job.__job__Create a new snapshot of a repository\'s dependencies."], job__correlator: typing.Annotated[str, "Correlator provides a key that is used to group snapshots submitted over time. Only the \'latest\' submitted snapshot for a given combination of `job.correlator` and `detector.name` will be considered when calculating a repository\'s current dependencies. Correlator should be as unique as it takes to distinguish all detection runs for a given \'wave\' of CI workflow you run. If you\'re using GitHub Actions, a good default value for this could be the environment variables GITHUB_WORKFLOW and GITHUB_JOB concatenated together. If you\'re using a build matrix, then you\'ll also need to add additional key(s) to distinguish between each submission inside a matrix variation.__job__Create a new snapshot of a repository\'s dependencies."], job__html_url: typing.Annotated[str, "The url for the job.__job__Create a new snapshot of a repository\'s dependencies."], sha: typing.Annotated[str, "The commit SHA associated with this dependency snapshot. Maximum length: 40 characters.__Create a new snapshot of a repository\'s dependencies."], ref: typing.Annotated[str, "The repository branch that triggered this snapshot.__Create a new snapshot of a repository\'s dependencies."], detector__name: typing.Annotated[str, "The name of the detector used.__A description of the detector used.__Create a new snapshot of a repository\'s dependencies."], detector__version: typing.Annotated[str, "The version of the detector used.__A description of the detector used.__Create a new snapshot of a repository\'s dependencies."], detector__url: typing.Annotated[str, "The url of the detector used.__A description of the detector used.__Create a new snapshot of a repository\'s dependencies."], scanned: typing.Annotated[str, "The time at which the snapshot was scanned.__Create a new snapshot of a repository\'s dependencies."]) - Create a new snapshot of a repository\'s dependencies.\n\nThe authenticated user must have access to the repository.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.dependencygraphcreaterepositorysnapshotRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf1f380>
name='githublargebeta_reposlistdeployments' description='githublargebeta_reposlistdeployments(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], sha: typing.Annotated[str, \'The SHA recorded at creation time.\'] = \'none\', ref: typing.Annotated[str, \'The name of the ref. This can be a branch, tag, or SHA.\'] = \'none\', task: typing.Annotated[str, \'The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).\'] = \'none\', environment: typing.Annotated[str, \'The name of the environment that was deployed to (e.g., `staging` or `production`).\'] = \'none\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Simple filtering of deployments is available via query parameters:' args_schema=<class 'pydantic.v1.main.reposlistdeploymentsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf1f880>
name='githublargebeta_reposcreatedeployment' description='githublargebeta_reposcreatedeployment(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], ref: typing.Annotated[str, \'The ref to deploy. This can be a branch, tag, or SHA.\'], required_contexts: typing.Annotated[composio_langchain.composio_tool_spec.RequiredContexts, \'The [status](https://docs.github.com/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.\'] = None, production_environment: typing.Annotated[bool, \'Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.\'] = None, task: typing.Annotated[str, \'Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).\'] = \'deploy\', auto_merge: typing.Annotated[bool, "Attempts to automatically merge the default branch into the requested ref, if it\'s behind the default branch."] = True, payload: typing.Annotated[str, \'JSON payload with extra information about the deployment.\'] = \'\', environment: typing.Annotated[str, \'Name for the target deployment environment (e.g., `production`, `staging`, `qa`).\'] = \'production\', description: typing.Annotated[str, \'Short description of the deployment.\'] = \'\', transient_environment: typing.Annotated[bool, \'Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`\'] = False) - Deployments offer a few configurable parameters with certain defaults.\n\nThe `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them\nbefore we merge a pull request.\n\nThe `environment` parameter allows deployments to be issued to different runtime environments. Teams often have\nmultiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter\nmakes it easier to track which environments have requested deployments. The default environment is `production`.\n\nThe `auto_merge` parameter is used to ensure that the requested ref is not behind the repository\'s default branch. If\nthe ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,\nthe API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will\nreturn a failure response.\n\nBy default, [commit statuses](https://docs.github.com/rest/commits/statuses) for every submitted context must be in a `success`\nstate. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to\nspecify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do\nnot require any contexts or create any commit statuses, the deployment will always succeed.\n\nThe `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text\nfield that will be passed on when a deployment event is dispatched.\n\nThe `task` parameter is used by the deployment system to allow different execution paths. In the web world this might\nbe `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an\napplication with debugging enabled.\n\nMerged branch response:\n\nYou will see this response when GitHub automatically merges the base branch into the topic branch instead of creating\na deployment. This auto-merge happens when:\n*   Auto-merge option is enabled in the repository\n*   Topic branch does not include the latest changes on the base branch, which is `master` in the response example\n*   There are no merge conflicts\n\nIf there are no new commits in the base branch, a new request to create a deployment should give a successful\nresponse.\n\nMerge conflict response:\n\nThis error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can\'t\nbe merged into the branch that\'s being deployed (in this case `topic-branch`), due to merge conflicts.\n\nFailed commit status checks:\n\nThis error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`\nstatus for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `repo_deployment` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.reposcreatedeploymentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf51260>
name='githublargebeta_reposgetdeployment' description="githublargebeta_reposgetdeployment(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], deployment_id: typing.Annotated[int, 'deployment_id parameter']) - Get a deployment" args_schema=<class 'pydantic.v1.main.reposgetdeploymentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf513a0>
name='githublargebeta_reposdeletedeployment' description='githublargebeta_reposdeletedeployment(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], deployment_id: typing.Annotated[int, \'deployment_id parameter\']) - If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment.\n\nTo set a deployment as inactive, you must:\n\n*   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.\n*   Mark the active deployment as inactive by adding any non-successful deployment status.\n\nFor more information, see "[Create a deployment](https://docs.github.com/rest/deployments/deployments/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/rest/deployments/statuses#create-a-deployment-status)."\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `repo_deployment` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.reposdeletedeploymentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf51440>
name='githublargebeta_reposlistdeploymentstatuses' description='githublargebeta_reposlistdeploymentstatuses(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], deployment_id: typing.Annotated[int, \'deployment_id parameter\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Users with pull access can view deployment statuses for a deployment:' args_schema=<class 'pydantic.v1.main.reposlistdeploymentstatusesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf516c0>
name='githublargebeta_reposcreatedeploymentstatus' description='githublargebeta_reposcreatedeploymentstatus(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], deployment_id: typing.Annotated[int, \'deployment_id parameter\'], state: typing.Annotated[str, \'The state of the status. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.\'], environment: typing.Annotated[str, \'Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. If not defined, the environment of the previous status on the deployment will be used, if it exists. Otherwise, the environment of the deployment will be used.\'] = None, auto_inactive: typing.Annotated[bool, "Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status\'s deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`"] = None, target_url: typing.Annotated[str, "The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It\'s recommended to use the `log_url` parameter, which replaces `target_url`."] = \'\', log_url: typing.Annotated[str, "The full URL of the deployment\'s output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `\'\'`"] = \'\', description: typing.Annotated[str, \'A short description of the status. The maximum description length is 140 characters.\'] = \'\', environment_url: typing.Annotated[str, "Sets the URL for accessing your environment. Default: `\'\'`"] = \'\') - Users with `push` access can create deployment statuses for a given deployment.\n\nOAuth app tokens and personal access tokens (classic) need the `repo_deployment` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.reposcreatedeploymentstatusRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf511c0>
name='githublargebeta_reposgetdeploymentstatus' description="githublargebeta_reposgetdeploymentstatus(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], deployment_id: typing.Annotated[int, 'deployment_id parameter'], status_id: typing.Annotated[int, 'status_id']) - Users with pull access can view a deployment status for a deployment:" args_schema=<class 'pydantic.v1.main.reposgetdeploymentstatusRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf51080>
name='githublargebeta_reposcreatedispatchevent' description='githublargebeta_reposcreatedispatchevent(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], event_type: typing.Annotated[str, \'A custom webhook event name. Must be 100 characters or fewer.\']) - You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)."\n\nThe `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.\n\nThis input example shows how you can use the `client_payload` as a test to debug your workflow.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.reposcreatedispatcheventRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf523e0>
name='githublargebeta_reposgetallenvironments' description='githublargebeta_reposgetallenvironments(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the environments for a repository.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.' args_schema=<class 'pydantic.v1.main.reposgetallenvironmentsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf51120>
name='githublargebeta_reposgetenvironment' description='githublargebeta_reposgetenvironment(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], environment_name: typing.Annotated[str, \'The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.\']) - **Note:** To get information about name patterns that branches must match in order to deploy to this environment, see "[Get a deployment branch policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy)."\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.' args_schema=<class 'pydantic.v1.main.reposgetenvironmentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf50f40>
name='githublargebeta_reposcreateorupdateenvironment' description='githublargebeta_reposcreateorupdateenvironment(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], environment_name: typing.Annotated[str, \'The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.\'], deployment_branch_policy__protected_branches: typing.Annotated[bool, \'Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`.__The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.\'], deployment_branch_policy__custom_branch_policies: typing.Annotated[bool, \'Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`.__The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.\'], wait_timer: typing.Annotated[int, \'The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).\'] = None, prevent_self_review: typing.Annotated[bool, \'Whether or not a user who created the job is prevented from approving their own job.\'] = None, reviewers: typing.Annotated[composio_langchain.composio_tool_spec.Reviewers, \'The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.\'] = None) - Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."\n\n**Note:** To create or update name patterns that branches must match in order to deploy to this environment, see "[Deployment branch policies](/rest/deployments/branch-policies)."\n\n**Note:** To create or update secrets for an environment, see "[GitHub Actions secrets](/rest/actions/secrets)."\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.reposcreateorupdateenvironmentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf53240>
name='githublargebeta_reposdeleteanenvironment' description="githublargebeta_reposdeleteanenvironment(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], environment_name: typing.Annotated[str, 'The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.']) - OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.reposdeleteanenvironmentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf53380>
name='githublargebeta_reposlistdeploymentbranchpolicies' description='githublargebeta_reposlistdeploymentbranchpolicies(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], environment_name: typing.Annotated[str, \'The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the deployment branch policies for an environment.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.' args_schema=<class 'pydantic.v1.main.reposlistdeploymentbranchpoliciesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf53420>
name='githublargebeta_reposcreatedeploymentbranchpolicy' description="githublargebeta_reposcreatedeploymentbranchpolicy(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], environment_name: typing.Annotated[str, 'The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.'], name: typing.Annotated[str, 'The name pattern that branches or tags must match in order to deploy to the environment.Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*/*`.For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).'], type: typing.Annotated[str, 'Whether this rule targets a branch or tag'] = None) - Creates a deployment branch or tag policy for an environment.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.reposcreatedeploymentbranchpolicyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf53060>
name='githublargebeta_reposgetdeploymentbranchpolicy' description="githublargebeta_reposgetdeploymentbranchpolicy(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], environment_name: typing.Annotated[str, 'The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.'], branch_policy_id: typing.Annotated[int, 'The unique identifier of the branch policy.']) - Gets a deployment branch or tag policy for an environment.\n\nAnyone with read access to the repository can use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository." args_schema=<class 'pydantic.v1.main.reposgetdeploymentbranchpolicyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf52f20>
name='githublargebeta_reposupdatedeploymentbranchpolicy' description="githublargebeta_reposupdatedeploymentbranchpolicy(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], environment_name: typing.Annotated[str, 'The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.'], branch_policy_id: typing.Annotated[int, 'The unique identifier of the branch policy.'], name: typing.Annotated[str, 'The name pattern that branches must match in order to deploy to the environment.Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*/*`.For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).']) - Updates a deployment branch or tag policy for an environment.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.reposupdatedeploymentbranchpolicyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf53b00>
name='githublargebeta_reposdeletedeploymentbranchpolicy' description="githublargebeta_reposdeletedeploymentbranchpolicy(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], environment_name: typing.Annotated[str, 'The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.'], branch_policy_id: typing.Annotated[int, 'The unique identifier of the branch policy.']) - Deletes a deployment branch or tag policy for an environment.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.reposdeletedeploymentbranchpolicyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf53ec0>
name='githublargebeta_reposgetalldeploymentprotectionrules' description='githublargebeta_reposgetalldeploymentprotectionrules(environment_name: typing.Annotated[str, \'The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\']) - Gets all custom deployment protection rules that are enabled for an environment. Anyone with read access to the repository can use this endpoint. For more information about environments, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."\n\nFor more information about the app that is providing this custom deployment rule, see the [documentation for the `GET /apps/{app_slug}` endpoint](https://docs.github.com/rest/apps/apps#get-an-app).\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.' args_schema=<class 'pydantic.v1.main.reposgetalldeploymentprotectionrulesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf88220>
name='githublargebeta_reposcreatedeploymentprotectionrule' description="githublargebeta_reposcreatedeploymentprotectionrule(environment_name: typing.Annotated[str, 'The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], integration_id: typing.Annotated[int, 'The ID of the custom app that will be enabled on the environment.'] = None) - Enable a custom deployment protection rule for an environment.\n\nThe authenticated user must have admin or owner permissions to the repository to use this endpoint.\n\nFor more information about the app that is providing this custom deployment rule, see the [documentation for the `GET /apps/{app_slug}` endpoint](https://docs.github.com/rest/apps/apps#get-an-app).\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.reposcreatedeploymentprotectionruleRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf880e0>
name='githublargebeta_reposlistcustomdeploymentruleintegrations' description='githublargebeta_reposlistcustomdeploymentruleintegrations(environment_name: typing.Annotated[str, \'The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Gets all custom deployment protection rule integrations that are available for an environment. Anyone with read access to the repository can use this endpoint.\n\nFor more information about environments, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."\n\nFor more information about the app that is providing this custom deployment rule, see "[GET an app](https://docs.github.com/rest/apps/apps#get-an-app)".\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.' args_schema=<class 'pydantic.v1.main.reposlistcustomdeploymentruleintegrationsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf884a0>
name='githublargebeta_reposgetcustomdeploymentprotectionrule' description='githublargebeta_reposgetcustomdeploymentprotectionrule(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], environment_name: typing.Annotated[str, \'The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.\'], protection_rule_id: typing.Annotated[int, \'The unique identifier of the protection rule.\']) - Gets an enabled custom deployment protection rule for an environment. Anyone with read access to the repository can use this endpoint. For more information about environments, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."\n\nFor more information about the app that is providing this custom deployment rule, see [`GET /apps/{app_slug}`](https://docs.github.com/rest/apps/apps#get-an-app).\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.' args_schema=<class 'pydantic.v1.main.reposgetcustomdeploymentprotectionruleRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf88040>
name='githublargebeta_reposdisabledeploymentprotectionrule' description="githublargebeta_reposdisabledeploymentprotectionrule(environment_name: typing.Annotated[str, 'The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], protection_rule_id: typing.Annotated[int, 'The unique identifier of the protection rule.']) - Disables a custom deployment protection rule for an environment.\n\nThe authenticated user must have admin or owner permissions to the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.reposdisabledeploymentprotectionruleRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf887c0>
name='githublargebeta_actionslistenvironmentsecrets' description='githublargebeta_actionslistenvironmentsecrets(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], environment_name: typing.Annotated[str, \'The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all secrets available in an environment without revealing their\nencrypted values.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionslistenvironmentsecretsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf891c0>
name='githublargebeta_actionsgetenvironmentpublickey' description="githublargebeta_actionsgetenvironmentpublickey(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], environment_name: typing.Annotated[str, 'The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.']) - Get the public key for an environment, which you need to encrypt environment\nsecrets. You need to encrypt a secret before you can create or update secrets.\n\nAnyone with read access to the repository can use this endpoint.\n\nIf the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsgetenvironmentpublickeyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf88b80>
name='githublargebeta_actionsgetenvironmentsecret' description="githublargebeta_actionsgetenvironmentsecret(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], environment_name: typing.Annotated[str, 'The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.'], secret_name: typing.Annotated[str, 'The name of the secret.']) - Gets a single environment secret without revealing its encrypted value.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsgetenvironmentsecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf88ea0>
name='githublargebeta_actionscreateorupdateenvironmentsecret' description='githublargebeta_actionscreateorupdateenvironmentsecret(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], environment_name: typing.Annotated[str, \'The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.\'], secret_name: typing.Annotated[str, \'The name of the secret.\'], encrypted_value: typing.Annotated[str, \'Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/actions/secrets#get-an-environment-public-key) endpoint.\'], key_id: typing.Annotated[str, \'ID of the key you used to encrypt the secret.\']) - Creates or updates an environment secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionscreateorupdateenvironmentsecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf89580>
name='githublargebeta_actionsdeleteenvironmentsecret' description="githublargebeta_actionsdeleteenvironmentsecret(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], environment_name: typing.Annotated[str, 'The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.'], secret_name: typing.Annotated[str, 'The name of the secret.']) - Deletes a secret in an environment using the secret name.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read secrets.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsdeleteenvironmentsecretRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf89800>
name='githublargebeta_actionslistenvironmentvariables' description='githublargebeta_actionslistenvironmentvariables(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], environment_name: typing.Annotated[str, \'The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.\'], per_page: typing.Annotated[int, "The number of results per page (max 30). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 10, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all environment variables.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.actionslistenvironmentvariablesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf89b20>
name='githublargebeta_actionscreateenvironmentvariable' description="githublargebeta_actionscreateenvironmentvariable(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], environment_name: typing.Annotated[str, 'The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.'], name: typing.Annotated[str, 'The name of the variable.'], value: typing.Annotated[str, 'The value of the variable.']) - Create an environment variable that you can reference in a GitHub Actions workflow.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionscreateenvironmentvariableRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf8a2a0>
name='githublargebeta_actionsgetenvironmentvariable' description="githublargebeta_actionsgetenvironmentvariable(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], environment_name: typing.Annotated[str, 'The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.'], name: typing.Annotated[str, 'The name of the variable.']) - Gets a specific variable in an environment.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsgetenvironmentvariableRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf89f80>
name='githublargebeta_actionsupdateenvironmentvariable' description="githublargebeta_actionsupdateenvironmentvariable(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], environment_name: typing.Annotated[str, 'The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.'], name: typing.Annotated[str, 'The name of the variable.'] = None, value: typing.Annotated[str, 'The value of the variable.'] = None) - Updates an environment variable that you can reference in a GitHub Actions workflow.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsupdateenvironmentvariableRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf8aa20>
name='githublargebeta_actionsdeleteenvironmentvariable' description="githublargebeta_actionsdeleteenvironmentvariable(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], name: typing.Annotated[str, 'The name of the variable.'], environment_name: typing.Annotated[str, 'The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.']) - Deletes an environment variable using the variable name.\n\nAuthenticated users must have collaborator access to a repository to create, update, or read variables.\n\nOAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.actionsdeleteenvironmentvariableRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf8a660>
name='githublargebeta_activitylistrepoevents' description='githublargebeta_activitylistrepoevents(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - **Note**: This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.' args_schema=<class 'pydantic.v1.main.activitylistrepoeventsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf8ad40>
name='githublargebeta_reposlistforks' description='githublargebeta_reposlistforks(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], sort_: typing.Annotated[str, \'The sort order. `stargazers` will sort by star count.\'] = \'newest\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List forks' args_schema=<class 'pydantic.v1.main.reposlistforksRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf8b420>
name='githublargebeta_reposcreatefork' description="githublargebeta_reposcreatefork(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], organization: typing.Annotated[str, 'Optional parameter to specify the organization name if forking into an organization.'] = None, name: typing.Annotated[str, 'When forking from an existing repository, a new name for the fork.'] = None, default_branch_only: typing.Annotated[bool, 'When forking from an existing repository, fork with only the default branch.'] = None) - Create a fork for the authenticated user.\n\n**Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).\n\n**Note**: Although this endpoint works with GitHub Apps, the GitHub App must be installed on the destination account with access to all repositories and on the source account with access to the source repository." args_schema=<class 'pydantic.v1.main.reposcreateforkRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf8b100>
name='githublargebeta_gitcreateblob' description='githublargebeta_gitcreateblob(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], content: typing.Annotated[str, "The new blob\'s content."], encoding: typing.Annotated[str, "The encoding used for `content`. Currently, `\'utf-8\'` and `\'base64\'` are supported."] = \'utf-8\') - Create a blob' args_schema=<class 'pydantic.v1.main.gitcreateblobRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bf8bec0>
name='githublargebeta_gitgetblob' description='githublargebeta_gitgetblob(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], file_sha: typing.Annotated[str, \'file_sha\']) - The `content` in the response will always be Base64 encoded.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw blob data.\n- **`application/vnd.github+json`**: Returns a JSON representation of the blob with `content` as a base64 encoded string. This is the default if no media type is specified.\n\n**Note** This endpoint supports blobs up to 100 megabytes in size.' args_schema=<class 'pydantic.v1.main.gitgetblobRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bfcc040>
name='githublargebeta_gitcreatecommit' description='githublargebeta_gitcreatecommit(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], message: typing.Annotated[str, \'The commit message\'], tree: typing.Annotated[str, \'The SHA of the tree object this commit points to\'], author__name: typing.Annotated[str, \'The name of the author (or committer) of the commit__Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.\'], author__email: typing.Annotated[str, \'The email of the author (or committer) of the commit__Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.\'], parents: typing.Annotated[composio_langchain.composio_tool_spec.Parents, \'The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.\'] = None, author__date: typing.Annotated[str, \'Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.__Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.\'] = None, committer__name: typing.Annotated[str, \'The name of the author (or committer) of the commit__Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.\'] = None, committer__email: typing.Annotated[str, \'The email of the author (or committer) of the commit__Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.\'] = None, committer__date: typing.Annotated[str, \'Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.__Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.\'] = None, signature: typing.Annotated[str, \'The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.\'] = None) - Creates a new Git [commit object](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects).\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit\'s signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user\'s account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |' args_schema=<class 'pydantic.v1.main.gitcreatecommitRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bfcd120>
name='githublargebeta_gitgetcommit' description='githublargebeta_gitgetcommit(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], commit_sha: typing.Annotated[str, \'The SHA of the commit.\']) - Gets a Git [commit object](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects).\n\nTo get the contents of a commit, see "[Get a commit](/rest/commits/commits#get-a-commit)."\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit\'s signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user\'s account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |' args_schema=<class 'pydantic.v1.main.gitgetcommitRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bfcd260>
name='githublargebeta_gitlistmatchingrefs' description='githublargebeta_gitlistmatchingrefs(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], ref: typing.Annotated[str, "The Git reference. For more information, see \'[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\' in the Git documentation."]) - Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn\'t exist in the repository, but existing refs start with `:ref`, they will be returned as an array.\n\nWhen you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.\n\n**Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".\n\nIf you request matching references for a branch named `feature` but the branch `feature` doesn\'t exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.' args_schema=<class 'pydantic.v1.main.gitlistmatchingrefsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bfccf40>
name='githublargebeta_gitgetref' description='githublargebeta_gitgetref(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], ref: typing.Annotated[str, "The Git reference. For more information, see \'[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\' in the Git documentation."]) - Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn\'t match an existing ref, a `404` is returned.\n\n**Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".' args_schema=<class 'pydantic.v1.main.gitgetrefRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bfcd580>
name='githublargebeta_gitcreateref' description='githublargebeta_gitcreateref(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], ref: typing.Annotated[str, "The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn\'t start with \'refs\' and have at least two slashes, it will be rejected."], sha: typing.Annotated[str, \'The SHA1 value for this reference.\']) - Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.' args_schema=<class 'pydantic.v1.main.gitcreaterefRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bfccfe0>
name='githublargebeta_gitupdateref' description='githublargebeta_gitupdateref(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], ref: typing.Annotated[str, "The Git reference. For more information, see \'[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\' in the Git documentation."], sha: typing.Annotated[str, \'The SHA1 value to set this reference to\'], force: typing.Annotated[bool, "Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you\'re not overwriting work."] = False) - Updates the provided reference to point to a new SHA. For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.' args_schema=<class 'pydantic.v1.main.gitupdaterefRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bfcc220>
name='githublargebeta_gitdeleteref' description='githublargebeta_gitdeleteref(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], ref: typing.Annotated[str, "The Git reference. For more information, see \'[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\' in the Git documentation."]) - Deletes the provided reference.' args_schema=<class 'pydantic.v1.main.gitdeleterefRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bfcd760>
name='githublargebeta_gitcreatetag' description='githublargebeta_gitcreatetag(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], tag: typing.Annotated[str, "The tag\'s name. This is typically a version (e.g., \'v0.0.1\')."], message: typing.Annotated[str, \'The tag message.\'], object: typing.Annotated[str, \'The SHA of the git object this is tagging.\'], type: typing.Annotated[str, "The type of the object we\'re tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`."], tagger__name: typing.Annotated[str, \'The name of the author of the tag__An object with information about the individual creating the tag.\'], tagger__email: typing.Annotated[str, \'The email of the author of the tag__An object with information about the individual creating the tag.\'], tagger__date: typing.Annotated[str, \'When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.__An object with information about the individual creating the tag.\'] = None) - Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/git/refs#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/git/refs#create-a-reference) the tag reference - this call would be unnecessary.\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit\'s signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user\'s account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |' args_schema=<class 'pydantic.v1.main.gitcreatetagRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bfcdb20>
name='githublargebeta_gitgettag' description='githublargebeta_gitgettag(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], tag_sha: typing.Annotated[str, \'tag_sha\']) - **Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit\'s signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user\'s account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |' args_schema=<class 'pydantic.v1.main.gitgettagRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bfcdda0>
name='githublargebeta_gitcreatetree' description='githublargebeta_gitcreatetree(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], tree: typing.Annotated[composio_langchain.composio_tool_spec.Tree, \'Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.\'], base_tree: typing.Annotated[str, "The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you\'re creating new changes on a branch, then normally you\'d set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you\'re working on.If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit\'s tree and were not defined in the `tree` parameter will be listed as deleted by the new commit."] = None) - The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.\n\nIf you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/rest/git/commits#create-a-commit)" and "[Update a reference](https://docs.github.com/rest/git/refs#update-a-reference)."\n\nReturns an error if you try to delete a file that does not exist.' args_schema=<class 'pydantic.v1.main.gitcreatetreeRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bfced40>
name='githublargebeta_gitgettree' description='githublargebeta_gitgettree(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], tree_sha: typing.Annotated[str, \'The SHA1 value or ref (branch or tag) name of the tree.\'], recursive: typing.Annotated[str, "Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `\'true\'`, and `\'false\'`. Omit this parameter to prevent recursively returning objects or subtrees."] = None) - Returns a single tree using the SHA1 value or ref name for that tree.\n\nIf `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.\n\n\n**Note**: The limit for the `tree` array is 100,000 entries with a maximum size of 7 MB when using the `recursive` parameter.' args_schema=<class 'pydantic.v1.main.gitgettreeRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bfceca0>
name='githublargebeta_reposlistwebhooks' description='githublargebeta_reposlistwebhooks(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists webhooks for a repository. `last response` may return null if there have not been any deliveries within 30 days.' args_schema=<class 'pydantic.v1.main.reposlistwebhooksRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bfcee80>
name='githublargebeta_reposcreatewebhook' description="githublargebeta_reposcreatewebhook(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], config__url: typing.Annotated[str, 'The URL to which the payloads will be delivered.__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.'], config__content_type: typing.Annotated[str, 'The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.'], config__secret: typing.Annotated[str, 'If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.'], config__insecure_ssl: typing.Annotated[str, 'Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.'], name: typing.Annotated[str, 'Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.'] = None, events: typing.Annotated[composio_langchain.composio_tool_spec.Events, 'Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.'] = ['push'], active: typing.Annotated[bool, 'Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.'] = True) - Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can\nshare the same `config` as long as those webhooks do not have any `events` that overlap." args_schema=<class 'pydantic.v1.main.reposcreatewebhookRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bffc0e0>
name='githublargebeta_reposgetwebhook' description='githublargebeta_reposgetwebhook(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], hook_id: typing.Annotated[int, \'The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.\']) - Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/webhooks/repo-config#get-a-webhook-configuration-for-a-repository)."' args_schema=<class 'pydantic.v1.main.reposgetwebhookRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bffc180>
name='githublargebeta_reposupdatewebhook' description='githublargebeta_reposupdatewebhook(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], hook_id: typing.Annotated[int, \'The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.\'], config__url: typing.Annotated[str, \'The URL to which the payloads will be delivered.__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.__Configuration object of the webhook\'], config__content_type: typing.Annotated[str, \'The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.__Configuration object of the webhook\'], config__secret: typing.Annotated[str, \'If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.__Configuration object of the webhook\'], config__insecure_ssl: typing.Annotated[str, \'Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.__Configuration object of the webhook\'], add_events: typing.Annotated[composio_langchain.composio_tool_spec.AddEvents, \'Determines a list of events to be added to the list of events that the Hook triggers for.\'] = None, remove_events: typing.Annotated[composio_langchain.composio_tool_spec.RemoveEvents, \'Determines a list of events to be removed from the list of events that the Hook triggers for.\'] = None, events: typing.Annotated[composio_langchain.composio_tool_spec.Events, \'Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.\'] = [\'push\'], active: typing.Annotated[bool, \'Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.\'] = True) - Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/webhooks/repo-config#update-a-webhook-configuration-for-a-repository)."' args_schema=<class 'pydantic.v1.main.reposupdatewebhookRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bffd080>
name='githublargebeta_reposdeletewebhook' description="githublargebeta_reposdeletewebhook(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], hook_id: typing.Annotated[int, 'The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.']) - Delete a repository webhook" args_schema=<class 'pydantic.v1.main.reposdeletewebhookRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bffcfe0>
name='githublargebeta_reposgetwebhookconfigforrepo' description='githublargebeta_reposgetwebhookconfigforrepo(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], hook_id: typing.Annotated[int, \'The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.\']) - Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/webhooks/repos#get-a-repository-webhook)."\n\nOAuth app tokens and personal access tokens (classic) need the `read:repo_hook` or `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.reposgetwebhookconfigforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bffd260>
name='githublargebeta_reposupdatewebhookconfigforrepo' description='githublargebeta_reposupdatewebhookconfigforrepo(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], hook_id: typing.Annotated[int, \'The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.\'], url: typing.Annotated[str, \'The URL to which the payloads will be delivered.__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.__Configuration object of the webhook\'], content_type: typing.Annotated[str, \'The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.__Configuration object of the webhook\'], secret: typing.Annotated[str, \'If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.__Configuration object of the webhook\'], insecure_ssl: typing.Annotated[str, \'Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.__Key/value pairs to provide settings for this webhook.__Configuration object of the webhook\']) - Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/webhooks/repos#update-a-repository-webhook)."\n\nOAuth app tokens and personal access tokens (classic) need the `write:repo_hook` or `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.reposupdatewebhookconfigforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bfce8e0>
name='githublargebeta_reposlistwebhookdeliveries' description='githublargebeta_reposlistwebhookdeliveries(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], hook_id: typing.Annotated[int, \'The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.\'], cursor: typing.Annotated[str, \'Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.\'] = None, redelivery: typing.Annotated[bool, \'redelivery\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Returns a list of webhook deliveries for a webhook configured in a repository.' args_schema=<class 'pydantic.v1.main.reposlistwebhookdeliveriesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bfcfec0>
name='githublargebeta_reposgetwebhookdelivery' description="githublargebeta_reposgetwebhookdelivery(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], hook_id: typing.Annotated[int, 'The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.'], delivery_id: typing.Annotated[int, 'delivery_id']) - Returns a delivery for a webhook configured in a repository." args_schema=<class 'pydantic.v1.main.reposgetwebhookdeliveryRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bffd760>
name='githublargebeta_reposredeliverwebhookdelivery' description="githublargebeta_reposredeliverwebhookdelivery(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], hook_id: typing.Annotated[int, 'The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.'], delivery_id: typing.Annotated[int, 'delivery_id']) - Redeliver a webhook delivery for a webhook configured in a repository." args_schema=<class 'pydantic.v1.main.reposredeliverwebhookdeliveryRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bffd120>
name='githublargebeta_repospingwebhook' description="githublargebeta_repospingwebhook(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], hook_id: typing.Annotated[int, 'The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.']) - This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook." args_schema=<class 'pydantic.v1.main.repospingwebhookRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bffcc20>
name='githublargebeta_repostestpushwebhook' description="githublargebeta_repostestpushwebhook(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], hook_id: typing.Annotated[int, 'The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.']) - This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.\n\n**Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`" args_schema=<class 'pydantic.v1.main.repostestpushwebhookRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bffc900>
name='githublargebeta_migrationsgetimportstatus' description='githublargebeta_migrationsgetimportstatus(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\']) - View the progress of an import.\n\n**Warning:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).\n\n**Import status**\n\nThis section includes details about the possible values of the `status` field of the Import Progress response.\n\nAn import that does not have errors will progress through these steps:\n\n*   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.\n*   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).\n*   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.\n*   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".\n*   `complete` - the import is complete, and the repository is ready on GitHub.\n\nIf there are problems, you will see one of these in the `status` field:\n\n*   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.\n*   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api) for more information.\n*   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.\n*   `detection_found_nothing` - the importer didn\'t recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/migrations/source-imports#cancel-an-import) and [retry](https://docs.github.com/rest/migrations/source-imports#start-an-import) with the correct URL.\n*   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.\n\n**The project_choices field**\n\nWhen multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.\n\n**Git LFS related fields**\n\nThis section includes details about Git LFS related fields that may be present in the Import Progress response.\n\n*   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.\n*   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.\n*   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.\n*   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.' args_schema=<class 'pydantic.v1.main.migrationsgetimportstatusRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bffcf40>
name='githublargebeta_migrationsstartimport' description="githublargebeta_migrationsstartimport(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], vcs_url: typing.Annotated[str, 'The URL of the originating repository.'], vcs: typing.Annotated[str, 'The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.'] = None, vcs_username: typing.Annotated[str, 'If authentication is required, the username to provide to `vcs_url`.'] = None, vcs_password: typing.Annotated[str, 'If authentication is required, the password to provide to `vcs_url`.'] = None, tfvc_project: typing.Annotated[str, 'For a tfvc import, the name of the project that is being imported.'] = None) - Start a source import to a GitHub repository using GitHub Importer.\nImporting into a GitHub repository with GitHub Actions enabled is not supported and will\nreturn a status `422 Unprocessable Entity` response.\n\n**Warning:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation)." args_schema=<class 'pydantic.v1.main.migrationsstartimportRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bffc040>
name='githublargebeta_migrationsupdateimport' description="githublargebeta_migrationsupdateimport(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], vcs_username: typing.Annotated[str, 'The username to provide to the originating repository.'] = None, vcs_password: typing.Annotated[str, 'The password to provide to the originating repository.'] = None, vcs: typing.Annotated[str, 'The type of version control system you are migrating from.'] = None, tfvc_project: typing.Annotated[str, 'For a tfvc import, the name of the project that is being imported.'] = None) - An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API\nrequest. If no parameters are provided, the import will be restarted.\n\nSome servers (e.g. TFS servers) can have several projects at a single URL. In those cases the import progress will\nhave the status `detection_found_multiple` and the Import Progress response will include a `project_choices` array.\nYou can select the project to import by providing one of the objects in the `project_choices` array in the update request.\n\n**Warning:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation)." args_schema=<class 'pydantic.v1.main.migrationsupdateimportRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bffc7c0>
name='githublargebeta_migrationscancelimport' description="githublargebeta_migrationscancelimport(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Stop an import for a repository.\n\n**Warning:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation)." args_schema=<class 'pydantic.v1.main.migrationscancelimportRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bffe020>
name='githublargebeta_migrationsgetcommitauthors' description="githublargebeta_migrationsgetcommitauthors(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], since: typing.Annotated[int, 'A user ID. Only return users with an ID greater than this ID.'] = None) - Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.\n\nThis endpoint and the [Map a commit author](https://docs.github.com/rest/migrations/source-imports#map-a-commit-author) endpoint allow you to provide correct Git author information.\n\n**Warning:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation)." args_schema=<class 'pydantic.v1.main.migrationsgetcommitauthorsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bffe480>
name='githublargebeta_migrationsmapcommitauthor' description="githublargebeta_migrationsmapcommitauthor(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], author_id: typing.Annotated[int, 'author_id'], email: typing.Annotated[str, 'The new Git author email.'] = None, name: typing.Annotated[str, 'The new Git author name.'] = None) - Update an author's identity for the import. Your application can continue updating authors any time before you push\nnew commits to the repository.\n\n**Warning:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation)." args_schema=<class 'pydantic.v1.main.migrationsmapcommitauthorRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bffe660>
name='githublargebeta_migrationsgetlargefiles' description="githublargebeta_migrationsgetlargefiles(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - List files larger than 100MB found during the import\n\n**Warning:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation)." args_schema=<class 'pydantic.v1.main.migrationsgetlargefilesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bffd1c0>
name='githublargebeta_migrationssetlfspreference' description="githublargebeta_migrationssetlfspreference(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], use_lfs: typing.Annotated[str, 'Whether to store large files during the import. `opt_in` means large files will be stored using Git LFS. `opt_out` means large files will be removed during the import.']) - You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability\nis powered by [Git LFS](https://git-lfs.com).\n\nYou can learn more about our LFS feature and working with large files [on our help\nsite](https://docs.github.com/repositories/working-with-files/managing-large-files).\n\n**Warning:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation)." args_schema=<class 'pydantic.v1.main.migrationssetlfspreferenceRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bffeca0>
name='githublargebeta_appsgetrepoinstallation' description="githublargebeta_appsgetrepoinstallation(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint." args_schema=<class 'pydantic.v1.main.appsgetrepoinstallationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bffe8e0>
name='githublargebeta_interactionsgetrestrictionsforrepo' description="githublargebeta_interactionsgetrestrictionsforrepo(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response." args_schema=<class 'pydantic.v1.main.interactionsgetrestrictionsforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bffee80>
name='githublargebeta_interactionssetrestrictionsforrepo' description="githublargebeta_interactionssetrestrictionsforrepo(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], limit: typing.Annotated[str, 'The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect.__Limit interactions to a specific type of user for a specified duration__Limit interactions to a specific type of user for a specified duration'], expiry: typing.Annotated[str, 'The duration of the interaction restriction. Default: `one_day`.__Limit interactions to a specific type of user for a specified duration__Limit interactions to a specific type of user for a specified duration'] = None) - Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository." args_schema=<class 'pydantic.v1.main.interactionssetrestrictionsforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bfff100>
name='githublargebeta_interactionsremoverestrictionsforrepo' description="githublargebeta_interactionsremoverestrictionsforrepo(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository." args_schema=<class 'pydantic.v1.main.interactionsremoverestrictionsforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bfff2e0>
name='githublargebeta_reposlistinvitations' description='githublargebeta_reposlistinvitations(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.' args_schema=<class 'pydantic.v1.main.reposlistinvitationsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bfff4c0>
name='githublargebeta_reposupdateinvitation' description="githublargebeta_reposupdateinvitation(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], invitation_id: typing.Annotated[int, 'The unique identifier of the invitation.'], permissions: typing.Annotated[str, 'The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.'] = None) - Update a repository invitation" args_schema=<class 'pydantic.v1.main.reposupdateinvitationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bfff7e0>
name='githublargebeta_reposdeleteinvitation' description="githublargebeta_reposdeleteinvitation(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], invitation_id: typing.Annotated[int, 'The unique identifier of the invitation.']) - Delete a repository invitation" args_schema=<class 'pydantic.v1.main.reposdeleteinvitationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13bfffce0>
name='githublargebeta_issueslistforrepo' description='githublargebeta_issueslistforrepo(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], milestone: typing.Annotated[str, \'If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.\'] = None, assignee: typing.Annotated[str, \'Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.\'] = None, creator: typing.Annotated[str, \'The user that created the issue.\'] = None, mentioned: typing.Annotated[str, "A user that\'s mentioned in the issue."] = None, labels: typing.Annotated[str, \'A list of comma separated label names. Example: `bug,ui,@high`\'] = None, since: typing.Annotated[str, \'Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, state: typing.Annotated[str, \'Indicates the state of the issues to return.\'] = \'open\', sort_: typing.Annotated[str, \'What to sort results by.\'] = \'created\', direction: typing.Annotated[str, \'The direction to sort the results by.\'] = \'desc\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List issues in a repository. Only open issues will be listed.\n\n**Note**: GitHub\'s REST API considers every pull request an issue, but not every issue is a pull request. For this\nreason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull\nrequest id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.issueslistforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c04c2c0>
name='githublargebeta_issuescreate' description='githublargebeta_issuescreate(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], title: typing.Annotated[str, \'The title of the issue.\'], body: typing.Annotated[str, \'The contents of the issue.\'] = None, assignee: typing.Annotated[str, \'Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_\'] = None, milestone: typing.Annotated[int, \'The `number` of the milestone to associate this issue with. _NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise._\'] = None, labels: typing.Annotated[composio_langchain.composio_tool_spec.Labels, \'Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._\'] = None, assignees: typing.Annotated[composio_langchain.composio_tool_spec.Assignees, \'Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._\'] = None) - Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"\nand "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.issuescreateRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c04db20>
name='githublargebeta_issueslistcommentsforrepo' description='githublargebeta_issueslistcommentsforrepo(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], direction: typing.Annotated[str, \'Either `asc` or `desc`. Ignored without the `sort` parameter.\'] = None, since: typing.Annotated[str, \'Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, sort_: typing.Annotated[str, \'The property to sort the results by.\'] = \'created\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - You can use the REST API to list comments on issues and pull requests for a repository. Every pull request is an issue, but not every issue is a pull request.\n\nBy default, issue comments are ordered by ascending ID.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.issueslistcommentsforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c04dc60>
name='githublargebeta_issuesgetcomment' description='githublargebeta_issuesgetcomment(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], comment_id: typing.Annotated[int, \'The unique identifier of the comment.\']) - You can use the REST API to get comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.issuesgetcommentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c04dd00>
name='githublargebeta_issuesupdatecomment' description='githublargebeta_issuesupdatecomment(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], comment_id: typing.Annotated[int, \'The unique identifier of the comment.\'], body: typing.Annotated[str, \'The contents of the comment.\']) - You can use the REST API to update comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.issuesupdatecommentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c04da80>
name='githublargebeta_issuesdeletecomment' description="githublargebeta_issuesdeletecomment(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], comment_id: typing.Annotated[int, 'The unique identifier of the comment.']) - You can use the REST API to delete comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request." args_schema=<class 'pydantic.v1.main.issuesdeletecommentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c04e200>
name='githublargebeta_reactionslistforissuecomment' description='githublargebeta_reactionslistforissuecomment(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], comment_id: typing.Annotated[int, \'The unique identifier of the comment.\'], content: typing.Annotated[str, \'Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to an issue comment.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List the reactions to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment).' args_schema=<class 'pydantic.v1.main.reactionslistforissuecommentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c04d800>
name='githublargebeta_reactionscreateforissuecomment' description="githublargebeta_reactionscreateforissuecomment(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], comment_id: typing.Annotated[int, 'The unique identifier of the comment.'], content: typing.Annotated[str, 'The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the issue comment.']) - Create a reaction to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment). A response with an HTTP `200` status means that you already added the reaction type to this issue comment." args_schema=<class 'pydantic.v1.main.reactionscreateforissuecommentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c04d940>
name='githublargebeta_reactionsdeleteforissuecomment' description="githublargebeta_reactionsdeleteforissuecomment(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], comment_id: typing.Annotated[int, 'The unique identifier of the comment.'], reaction_id: typing.Annotated[int, 'The unique identifier of the reaction.']) - **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.\n\nDelete a reaction to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment)." args_schema=<class 'pydantic.v1.main.reactionsdeleteforissuecommentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c04d9e0>
name='githublargebeta_issueslisteventsforrepo' description='githublargebeta_issueslisteventsforrepo(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists events for a repository.' args_schema=<class 'pydantic.v1.main.issueslisteventsforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c04d260>
name='githublargebeta_issuesgetevent' description="githublargebeta_issuesgetevent(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], event_id: typing.Annotated[int, 'event_id']) - Gets a single event by the event id." args_schema=<class 'pydantic.v1.main.issuesgeteventRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c04d440>
name='githublargebeta_issuesget' description='githublargebeta_issuesget(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], issue_number: typing.Annotated[int, \'The number that identifies the issue.\']) - The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api#follow-redirects) if the issue was\n[transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If\nthe issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API\nreturns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read\naccess, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe\nto the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.\n\n**Note**: GitHub\'s REST API considers every pull request an issue, but not every issue is a pull request. For this\nreason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull\nrequest id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.issuesgetRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c04eb60>
name='githublargebeta_issuesupdate' description='githublargebeta_issuesupdate(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], issue_number: typing.Annotated[int, \'The number that identifies the issue.\'], title: typing.Annotated[str, \'The title of the issue.\'] = None, body: typing.Annotated[str, \'The contents of the issue.\'] = None, assignee: typing.Annotated[str, \'Username to assign to this issue. **This field is deprecated.**\'] = None, state: typing.Annotated[str, \'The open or closed state of the issue.\'] = None, state_reason: typing.Annotated[str, \'The reason for the state change. Ignored unless `state` is changed.\'] = None, milestone: typing.Annotated[int, \'The `number` of the milestone to associate this issue with or use `null` to remove the current milestone. Only users with push access can set the milestone for issues. Without push access to the repository, milestone changes are silently dropped.\'] = None, labels: typing.Annotated[composio_langchain.composio_tool_spec.Labels, \'Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.\'] = None, assignees: typing.Annotated[composio_langchain.composio_tool_spec.Assignees, \'Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped.\'] = None) - Issue owners and users with push access can edit an issue.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.issuesupdateRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c084220>
name='githublargebeta_issuesaddassignees' description="githublargebeta_issuesaddassignees(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], issue_number: typing.Annotated[int, 'The number that identifies the issue.'], assignees: typing.Annotated[composio_langchain.composio_tool_spec.Assignees, 'Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._'] = None) - Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced." args_schema=<class 'pydantic.v1.main.issuesaddassigneesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c084b80>
name='githublargebeta_issuesremoveassignees' description="githublargebeta_issuesremoveassignees(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], issue_number: typing.Annotated[int, 'The number that identifies the issue.'], assignees: typing.Annotated[composio_langchain.composio_tool_spec.Assignees, 'Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._'] = None) - Removes one or more assignees from an issue." args_schema=<class 'pydantic.v1.main.issuesremoveassigneesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c0854e0>
name='githublargebeta_issuescheckusercanbeassignedtoissue' description="githublargebeta_issuescheckusercanbeassignedtoissue(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], issue_number: typing.Annotated[int, 'The number that identifies the issue.'], assignee: typing.Annotated[str, 'assignee']) - Checks if a user has permission to be assigned to a specific issue.\n\nIf the `assignee` can be assigned to this issue, a `204` status code with no content is returned.\n\nOtherwise a `404` status code is returned." args_schema=<class 'pydantic.v1.main.issuescheckusercanbeassignedtoissueRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c085440>
name='githublargebeta_issueslistcomments' description='githublargebeta_issueslistcomments(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], issue_number: typing.Annotated[int, \'The number that identifies the issue.\'], since: typing.Annotated[str, \'Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - You can use the REST API to list comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.\n\nIssue comments are ordered by ascending ID.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.issueslistcommentsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c04ff60>
name='githublargebeta_issuescreatecomment' description='githublargebeta_issuescreatecomment(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], issue_number: typing.Annotated[int, \'The number that identifies the issue.\'], body: typing.Annotated[str, \'The contents of the comment.\']) - You can use the REST API to create comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).\nCreating content too quickly using this endpoint may result in secondary rate limiting.\nFor more information, see "[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"\nand "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.issuescreatecommentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c04fe20>
name='githublargebeta_issueslistevents' description='githublargebeta_issueslistevents(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], issue_number: typing.Annotated[int, \'The number that identifies the issue.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all events for an issue.' args_schema=<class 'pydantic.v1.main.issueslisteventsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c04ede0>
name='githublargebeta_issueslistlabelsonissue' description='githublargebeta_issueslistlabelsonissue(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], issue_number: typing.Annotated[int, \'The number that identifies the issue.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all labels for an issue.' args_schema=<class 'pydantic.v1.main.issueslistlabelsonissueRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c0853a0>
name='githublargebeta_issuesaddlabels' description="githublargebeta_issuesaddlabels(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], issue_number: typing.Annotated[int, 'The number that identifies the issue.']) - Adds labels to an issue. If you provide an empty array of labels, all labels are removed from the issue." args_schema=<class 'pydantic.v1.main.issuesaddlabelsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c085120>
name='githublargebeta_issuessetlabels' description="githublargebeta_issuessetlabels(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], issue_number: typing.Annotated[int, 'The number that identifies the issue.']) - Removes any previous labels and sets the new labels for an issue." args_schema=<class 'pydantic.v1.main.issuessetlabelsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c0847c0>
name='githublargebeta_issuesremovealllabels' description="githublargebeta_issuesremovealllabels(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], issue_number: typing.Annotated[int, 'The number that identifies the issue.']) - Removes all labels from an issue." args_schema=<class 'pydantic.v1.main.issuesremovealllabelsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c084180>
name='githublargebeta_issuesremovelabel' description="githublargebeta_issuesremovelabel(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], issue_number: typing.Annotated[int, 'The number that identifies the issue.'], name: typing.Annotated[str, 'name']) - Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist." args_schema=<class 'pydantic.v1.main.issuesremovelabelRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c085300>
name='githublargebeta_issueslock' description='githublargebeta_issueslock(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], issue_number: typing.Annotated[int, \'The number that identifies the issue.\'], lock_reason: typing.Annotated[str, "The reason for locking the issue or pull request conversation. Lock will fail if you don\'t use one of these reasons:   * `off-topic`   * `too heated`   * `resolved`   * `spam`"] = None) - Users with push access can lock an issue or pull request\'s conversation.\n\nNote that, if you choose not to pass any parameters, you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."' args_schema=<class 'pydantic.v1.main.issueslockRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c084040>
name='githublargebeta_issuesunlock' description="githublargebeta_issuesunlock(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], issue_number: typing.Annotated[int, 'The number that identifies the issue.']) - Users with push access can unlock an issue's conversation." args_schema=<class 'pydantic.v1.main.issuesunlockRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c085a80>
name='githublargebeta_reactionslistforissue' description='githublargebeta_reactionslistforissue(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], issue_number: typing.Annotated[int, \'The number that identifies the issue.\'], content: typing.Annotated[str, \'Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to an issue.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List the reactions to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue).' args_schema=<class 'pydantic.v1.main.reactionslistforissueRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c084cc0>
name='githublargebeta_reactionscreateforissue' description="githublargebeta_reactionscreateforissue(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], issue_number: typing.Annotated[int, 'The number that identifies the issue.'], content: typing.Annotated[str, 'The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the issue.']) - Create a reaction to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue). A response with an HTTP `200` status means that you already added the reaction type to this issue." args_schema=<class 'pydantic.v1.main.reactionscreateforissueRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c086020>
name='githublargebeta_reactionsdeleteforissue' description="githublargebeta_reactionsdeleteforissue(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], issue_number: typing.Annotated[int, 'The number that identifies the issue.'], reaction_id: typing.Annotated[int, 'The unique identifier of the reaction.']) - **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.\n\nDelete a reaction to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue)." args_schema=<class 'pydantic.v1.main.reactionsdeleteforissueRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c086840>
name='githublargebeta_issueslisteventsfortimeline' description='githublargebeta_issueslisteventsfortimeline(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], issue_number: typing.Annotated[int, \'The number that identifies the issue.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List all timeline events for an issue.' args_schema=<class 'pydantic.v1.main.issueslisteventsfortimelineRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c086ac0>
name='githublargebeta_reposlistdeploykeys' description='githublargebeta_reposlistdeploykeys(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List deploy keys' args_schema=<class 'pydantic.v1.main.reposlistdeploykeysRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c0867a0>
name='githublargebeta_reposcreatedeploykey' description='githublargebeta_reposcreatedeploykey(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], key: typing.Annotated[str, \'The contents of the key.\'], title: typing.Annotated[str, \'A name for the key.\'] = None, read_only: typing.Annotated[bool, "If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.    Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see \'[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)\' and \'[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/).\'"] = None) - You can create a read-only deploy key.' args_schema=<class 'pydantic.v1.main.reposcreatedeploykeyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c086e80>
name='githublargebeta_reposgetdeploykey' description="githublargebeta_reposgetdeploykey(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], key_id: typing.Annotated[int, 'The unique identifier of the key.']) - Get a deploy key" args_schema=<class 'pydantic.v1.main.reposgetdeploykeyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c0871a0>
name='githublargebeta_reposdeletedeploykey' description="githublargebeta_reposdeletedeploykey(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], key_id: typing.Annotated[int, 'The unique identifier of the key.']) - Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead." args_schema=<class 'pydantic.v1.main.reposdeletedeploykeyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c087560>
name='githublargebeta_issueslistlabelsforrepo' description='githublargebeta_issueslistlabelsforrepo(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all labels for a repository.' args_schema=<class 'pydantic.v1.main.issueslistlabelsforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c086480>
name='githublargebeta_issuescreatelabel' description='githublargebeta_issuescreatelabel(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], name: typing.Annotated[str, "The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \':strawberry:\'). For a full list of available emoji and codes, see \'[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet).\'"], color: typing.Annotated[str, \'The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.\'] = None, description: typing.Annotated[str, \'A short description of the label. Must be 100 characters or fewer.\'] = None) - Creates a label for the specified repository with the given name and color. The name and color parameters are required. The color must be a valid [hexadecimal color code](http://www.color-hex.com/).' args_schema=<class 'pydantic.v1.main.issuescreatelabelRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c087d80>
name='githublargebeta_issuesgetlabel' description="githublargebeta_issuesgetlabel(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], name: typing.Annotated[str, 'name']) - Gets a label using the given name." args_schema=<class 'pydantic.v1.main.issuesgetlabelRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c0cc0e0>
name='githublargebeta_issuesupdatelabel' description='githublargebeta_issuesupdatelabel(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], name: typing.Annotated[str, \'name\'], new_name: typing.Annotated[str, "The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \':strawberry:\'). For a full list of available emoji and codes, see \'[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet).\'"] = None, color: typing.Annotated[str, \'The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.\'] = None, description: typing.Annotated[str, \'A short description of the label. Must be 100 characters or fewer.\'] = None) - Updates a label using the given label name.' args_schema=<class 'pydantic.v1.main.issuesupdatelabelRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c0cc180>
name='githublargebeta_issuesdeletelabel' description="githublargebeta_issuesdeletelabel(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], name: typing.Annotated[str, 'name']) - Deletes a label using the given label name." args_schema=<class 'pydantic.v1.main.issuesdeletelabelRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c0cc040>
name='githublargebeta_reposlistlanguages' description="githublargebeta_reposlistlanguages(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language." args_schema=<class 'pydantic.v1.main.reposlistlanguagesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c0cc400>
name='githublargebeta_licensesgetforrepo' description='githublargebeta_licensesgetforrepo(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], ref: typing.Annotated[str, \'The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.\'] = None) - This method returns the contents of the repository\'s license file, if one is detected.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw contents of the license.\n- **`application/vnd.github.html+json`**: Returns the license contents in HTML. Markup languages are rendered to HTML using GitHub\'s open-source [Markup library](https://github.com/github/markup).' args_schema=<class 'pydantic.v1.main.licensesgetforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c0ccae0>
name='githublargebeta_reposmergeupstream' description="githublargebeta_reposmergeupstream(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], branch: typing.Annotated[str, 'The name of the branch which should be updated to match upstream.']) - Sync a branch of a forked repository to keep it up-to-date with the upstream repository." args_schema=<class 'pydantic.v1.main.reposmergeupstreamRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c0cccc0>
name='githublargebeta_reposmerge' description="githublargebeta_reposmerge(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], base: typing.Annotated[str, 'The name of the base branch that the head will be merged into.'], head: typing.Annotated[str, 'The head to merge. This can be a branch name or a commit SHA1.'], commit_message: typing.Annotated[str, 'Commit message to use for the merge commit. If omitted, a default message will be used.'] = None) - Merge a branch" args_schema=<class 'pydantic.v1.main.reposmergeRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c0cd1c0>
name='githublargebeta_issueslistmilestones' description='githublargebeta_issueslistmilestones(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], state: typing.Annotated[str, \'The state of the milestone. Either `open`, `closed`, or `all`.\'] = \'open\', sort_: typing.Annotated[str, \'What to sort results by. Either `due_on` or `completeness`.\'] = \'due_on\', direction: typing.Annotated[str, \'The direction of the sort. Either `asc` or `desc`.\'] = \'asc\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists milestones for a repository.' args_schema=<class 'pydantic.v1.main.issueslistmilestonesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c0ccf40>
name='githublargebeta_issuescreatemilestone' description="githublargebeta_issuescreatemilestone(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], title: typing.Annotated[str, 'The title of the milestone.'], description: typing.Annotated[str, 'A description of the milestone.'] = None, due_on: typing.Annotated[str, 'The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.'] = None, state: typing.Annotated[str, 'The state of the milestone. Either `open` or `closed`.'] = 'open') - Creates a milestone." args_schema=<class 'pydantic.v1.main.issuescreatemilestoneRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c0cd580>
name='githublargebeta_issuesgetmilestone' description="githublargebeta_issuesgetmilestone(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], milestone_number: typing.Annotated[int, 'The number that identifies the milestone.']) - Gets a milestone using the given milestone number." args_schema=<class 'pydantic.v1.main.issuesgetmilestoneRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c0cdee0>
name='githublargebeta_issuesupdatemilestone' description="githublargebeta_issuesupdatemilestone(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], milestone_number: typing.Annotated[int, 'The number that identifies the milestone.'], title: typing.Annotated[str, 'The title of the milestone.'] = None, description: typing.Annotated[str, 'A description of the milestone.'] = None, due_on: typing.Annotated[str, 'The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.'] = None, state: typing.Annotated[str, 'The state of the milestone. Either `open` or `closed`.'] = 'open') - Update a milestone" args_schema=<class 'pydantic.v1.main.issuesupdatemilestoneRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c0ce160>
name='githublargebeta_issuesdeletemilestone' description="githublargebeta_issuesdeletemilestone(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], milestone_number: typing.Annotated[int, 'The number that identifies the milestone.']) - Deletes a milestone using the given milestone number." args_schema=<class 'pydantic.v1.main.issuesdeletemilestoneRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c0ce660>
name='githublargebeta_issueslistlabelsformilestone' description='githublargebeta_issueslistlabelsformilestone(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], milestone_number: typing.Annotated[int, \'The number that identifies the milestone.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists labels for issues in a milestone.' args_schema=<class 'pydantic.v1.main.issueslistlabelsformilestoneRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c0ce8e0>
name='githublargebeta_activitylistreponotificationsforauthenticateduser' description='githublargebeta_activitylistreponotificationsforauthenticateduser(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], since: typing.Annotated[str, \'Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, before: typing.Annotated[str, \'Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, all: typing.Annotated[bool, \'If `true`, show notifications marked as read.\'] = False, participating: typing.Annotated[bool, \'If `true`, only shows notifications in which the user is directly participating or mentioned.\'] = False, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all notifications for the current user in the specified repository.' args_schema=<class 'pydantic.v1.main.activitylistreponotificationsforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c0cdf80>
name='githublargebeta_activitymarkreponotificationsasread' description='githublargebeta_activitymarkreponotificationsasread(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], last_read_at: typing.Annotated[str, \'Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.\'] = None) - Marks all notifications in a repository as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/activity/notifications#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.' args_schema=<class 'pydantic.v1.main.activitymarkreponotificationsasreadRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c0ce7a0>
name='githublargebeta_reposgetpages' description="githublargebeta_reposgetpages(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Gets information about a GitHub Pages site.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.reposgetpagesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c0ceca0>
name='githublargebeta_reposcreatepagessite' description='githublargebeta_reposcreatepagessite(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], source__branch: typing.Annotated[str, "The repository branch used to publish your site\'s source files.__The source branch and directory used to publish your Pages site.__The source branch and directory used to publish your Pages site."], build_type: typing.Annotated[str, "The process in which the Page will be built. Possible values are `\'legacy\'` and `\'workflow\'`.__The source branch and directory used to publish your Pages site."] = None, source__path: typing.Annotated[str, \'The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`__The source branch and directory used to publish your Pages site.__The source branch and directory used to publish your Pages site.\'] = \'/\') - Configures a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)."\n\nThe authenticated user must be a repository administrator, maintainer, or have the \'manage GitHub Pages settings\' permission.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.reposcreatepagessiteRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c0cf4c0>
name='githublargebeta_reposupdateinformationaboutpagessite' description='githublargebeta_reposupdateinformationaboutpagessite(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], cname: typing.Annotated[str, "Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see \'[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/).\'"] = None, https_enforced: typing.Annotated[bool, \'Specify whether HTTPS should be enforced for the repository.\'] = None, build_type: typing.Annotated[str, \'The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.\'] = None, source: typing.Annotated[str, "Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `\'gh-pages\'`, `\'master\'`, and `\'master /docs\'`."] = None) - Updates information for a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).\n\nThe authenticated user must be a repository administrator, maintainer, or have the \'manage GitHub Pages settings\' permission.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.reposupdateinformationaboutpagessiteRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c0cf240>
name='githublargebeta_reposdeletepagessite' description='githublargebeta_reposdeletepagessite(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\']) - Deletes a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).\n\nThe authenticated user must be a repository administrator, maintainer, or have the \'manage GitHub Pages settings\' permission.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.reposdeletepagessiteRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c0cf6a0>
name='githublargebeta_reposlistpagesbuilds' description='githublargebeta_reposlistpagesbuilds(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists builts of a GitHub Pages site.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.reposlistpagesbuildsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c0cfec0>
name='githublargebeta_reposrequestpagesbuild' description="githublargebeta_reposrequestpagesbuild(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.\n\nBuild requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes." args_schema=<class 'pydantic.v1.main.reposrequestpagesbuildRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2080e0>
name='githublargebeta_reposgetlatestpagesbuild' description="githublargebeta_reposgetlatestpagesbuild(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Gets information about the single most recent build of a GitHub Pages site.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.reposgetlatestpagesbuildRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c208040>
name='githublargebeta_reposgetpagesbuild' description="githublargebeta_reposgetpagesbuild(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], build_id: typing.Annotated[int, 'build_id']) - Gets information about a GitHub Pages build.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.reposgetpagesbuildRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2085e0>
name='githublargebeta_reposcreatepagesdeployment' description="githublargebeta_reposcreatepagesdeployment(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], pages_build_version: typing.Annotated[str, 'A unique string that represents the version of the build for this deployment.__The object used to create GitHub Pages deployment'], oidc_token: typing.Annotated[str, 'The OIDC token issued by GitHub Actions certifying the origin of the deployment.__The object used to create GitHub Pages deployment'], artifact_id: typing.Annotated[float, 'The ID of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. Either `artifact_id` or `artifact_url` are required.__The object used to create GitHub Pages deployment'] = None, artifact_url: typing.Annotated[str, 'The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. Either `artifact_id` or `artifact_url` are required.__The object used to create GitHub Pages deployment'] = None, environment: typing.Annotated[str, 'The target environment for this GitHub Pages deployment.__The object used to create GitHub Pages deployment'] = 'github-pages') - Create a GitHub Pages deployment for a repository.\n\nThe authenticated user must have write permission to the repository." args_schema=<class 'pydantic.v1.main.reposcreatepagesdeploymentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2087c0>
name='githublargebeta_reposgetpagesdeployment' description="githublargebeta_reposgetpagesdeployment(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], pages_deployment_id: typing.Annotated[int, 'The ID of the Pages deployment. You can also give the commit SHA of the deployment.']) - Gets the current status of a GitHub Pages deployment.\n\nThe authenticated user must have read permission for the GitHub Pages site." args_schema=<class 'pydantic.v1.main.reposgetpagesdeploymentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c208400>
name='githublargebeta_reposcancelpagesdeployment' description="githublargebeta_reposcancelpagesdeployment(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], pages_deployment_id: typing.Annotated[int, 'The ID of the Pages deployment. You can also give the commit SHA of the deployment.']) - Cancels a GitHub Pages deployment.\n\nThe authenticated user must have write permissions for the GitHub Pages site." args_schema=<class 'pydantic.v1.main.reposcancelpagesdeploymentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c208f40>
name='githublargebeta_reposgetpageshealthcheck' description="githublargebeta_reposgetpageshealthcheck(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Gets a health check of the DNS settings for the `CNAME` record configured for a repository's GitHub Pages.\n\nThe first request to this endpoint returns a `202 Accepted` status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a `200 OK` status with the health check results in the response.\n\nThe authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.reposgetpageshealthcheckRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c208a40>
name='githublargebeta_reposcheckprivatevulnerabilityreporting' description='githublargebeta_reposcheckprivatevulnerabilityreporting(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\']) - Returns a boolean indicating whether or not private vulnerability reporting is enabled for the repository. For more information, see "[Evaluating the security settings of a repository](https://docs.github.com/code-security/security-advisories/working-with-repository-security-advisories/evaluating-the-security-settings-of-a-repository)".' args_schema=<class 'pydantic.v1.main.reposcheckprivatevulnerabilityreportingRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2091c0>
name='githublargebeta_reposenableprivatevulnerabilityreporting' description='githublargebeta_reposenableprivatevulnerabilityreporting(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\']) - Enables private vulnerability reporting for a repository. The authenticated user must have admin access to the repository. For more information, see "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)."' args_schema=<class 'pydantic.v1.main.reposenableprivatevulnerabilityreportingRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c209440>
name='githublargebeta_reposdisableprivatevulnerabilityreporting' description='githublargebeta_reposdisableprivatevulnerabilityreporting(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\']) - Disables private vulnerability reporting for a repository. The authenticated user must have admin access to the repository. For more information, see "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)".' args_schema=<class 'pydantic.v1.main.reposdisableprivatevulnerabilityreportingRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c209620>
name='githublargebeta_projectslistforrepo' description='githublargebeta_projectslistforrepo(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], state: typing.Annotated[str, \'Indicates the state of the projects to return.\'] = \'open\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.' args_schema=<class 'pydantic.v1.main.projectslistforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2099e0>
name='githublargebeta_projectscreateforrepo' description="githublargebeta_projectscreateforrepo(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], name: typing.Annotated[str, 'The name of the project.'], body: typing.Annotated[str, 'The description of the project.'] = None) - Creates a repository project board. Returns a `410 Gone` status if projects are disabled in the repository or if the repository does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned." args_schema=<class 'pydantic.v1.main.projectscreateforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c209bc0>
name='githublargebeta_reposgetcustompropertiesvalues' description="githublargebeta_reposgetcustompropertiesvalues(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Gets all custom property values that are set for a repository.\nUsers with read access to the repository can use this endpoint." args_schema=<class 'pydantic.v1.main.reposgetcustompropertiesvaluesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c209800>
name='githublargebeta_reposcreateorupdatecustompropertiesvalues' description='githublargebeta_reposcreateorupdatecustompropertiesvalues(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], properties: typing.Annotated[composio_langchain.composio_tool_spec.Properties, \'A list of custom property names and associated values to apply to the repositories.\']) - Create new or update existing custom property values for a repository.\nUsing a value of `null` for a custom property will remove or \'unset\' the property value from the repository.\n\nRepository admins and other users with the repository-level "edit custom property values" fine-grained permission can use this endpoint.' args_schema=<class 'pydantic.v1.main.reposcreateorupdatecustompropertiesvaluesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c20aac0>
name='githublargebeta_pullslist' description='githublargebeta_pullslist(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], head: typing.Annotated[str, \'Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.\'] = None, base: typing.Annotated[str, \'Filter pulls by base branch name. Example: `gh-pages`.\'] = None, direction: typing.Annotated[str, \'The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.\'] = None, state: typing.Annotated[str, \'Either `open`, `closed`, or `all` to filter by state.\'] = \'open\', sort_: typing.Annotated[str, \'What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month.\'] = \'created\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists pull requests in a specified repository.\n\nDraft pull requests are available in public repositories with GitHub\nFree and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing\nplans, and in public and private repositories with GitHub Team and GitHub Enterprise\nCloud. For more information, see [GitHub\'s products](https://docs.github.com/github/getting-started-with-github/githubs-products)\nin the GitHub Help documentation.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.\n- **`application/vnd.github.diff`**: For more information, see "[git-diff](https://git-scm.com/docs/git-diff)" in the Git documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/). Include the repository name and pull request ID in your message.\n- **`application/vnd.github.patch`**: For more information, see "[git-format-patch](https://git-scm.com/docs/git-format-patch)" in the Git documentation.' args_schema=<class 'pydantic.v1.main.pullslistRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c20ac00>
name='githublargebeta_pullscreate' description='githublargebeta_pullscreate(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], head: typing.Annotated[str, \'The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.\'], base: typing.Annotated[str, \'The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.\'], title: typing.Annotated[str, \'The title of the new pull request. Required unless `issue` is specified.\'] = None, head_repo: typing.Annotated[str, \'The name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization.\'] = None, body: typing.Annotated[str, \'The contents of the pull request.\'] = None, maintainer_can_modify: typing.Annotated[bool, \'Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.\'] = None, draft: typing.Annotated[bool, "Indicates whether the pull request is a draft. See \'[Draft Pull Requests](https://docs.github.com/articles/about-pull-requests#draft-pull-requests)\' in the GitHub Help documentation to learn more."] = None, issue: typing.Annotated[int, \'An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified.\'] = None) - Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub\'s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.\n- **`application/vnd.github.diff`**: For more information, see "[git-diff](https://git-scm.com/docs/git-diff)" in the Git documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/). Include the repository name and pull request ID in your message.' args_schema=<class 'pydantic.v1.main.pullscreateRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c20aca0>
name='githublargebeta_pullslistreviewcommentsforrepo' description='githublargebeta_pullslistreviewcommentsforrepo(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], sort_: typing.Annotated[str, \'sort\'] = None, direction: typing.Annotated[str, \'The direction to sort results. Ignored without `sort` parameter.\'] = None, since: typing.Annotated[str, \'Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists review comments for all pull requests in a repository. By default,\nreview comments are in ascending order by ID.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.pullslistreviewcommentsforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c20b2e0>
name='githublargebeta_pullsgetreviewcomment' description='githublargebeta_pullsgetreviewcomment(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], comment_id: typing.Annotated[int, \'The unique identifier of the comment.\']) - Provides details for a specified review comment.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.pullsgetreviewcommentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c20a8e0>
name='githublargebeta_pullsupdatereviewcomment' description='githublargebeta_pullsupdatereviewcomment(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], comment_id: typing.Annotated[int, \'The unique identifier of the comment.\'], body: typing.Annotated[str, \'The text of the reply to the review comment.\']) - Edits the content of a specified review comment.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.pullsupdatereviewcommentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c20a7a0>
name='githublargebeta_pullsdeletereviewcomment' description="githublargebeta_pullsdeletereviewcomment(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], comment_id: typing.Annotated[int, 'The unique identifier of the comment.']) - Deletes a review comment." args_schema=<class 'pydantic.v1.main.pullsdeletereviewcommentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c20b9c0>
name='githublargebeta_reactionslistforpullrequestreviewcomment' description='githublargebeta_reactionslistforpullrequestreviewcomment(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], comment_id: typing.Annotated[int, \'The unique identifier of the comment.\'], content: typing.Annotated[str, \'Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a pull request review comment.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List the reactions to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request).' args_schema=<class 'pydantic.v1.main.reactionslistforpullrequestreviewcommentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c20a480>
name='githublargebeta_reactionscreateforpullrequestreviewcomment' description="githublargebeta_reactionscreateforpullrequestreviewcomment(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], comment_id: typing.Annotated[int, 'The unique identifier of the comment.'], content: typing.Annotated[str, 'The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the pull request review comment.']) - Create a reaction to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment." args_schema=<class 'pydantic.v1.main.reactionscreateforpullrequestreviewcommentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c24c0e0>
name='githublargebeta_reactionsdeleteforpullrequestcomment' description="githublargebeta_reactionsdeleteforpullrequestcomment(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], comment_id: typing.Annotated[int, 'The unique identifier of the comment.'], reaction_id: typing.Annotated[int, 'The unique identifier of the reaction.']) - **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`\n\nDelete a reaction to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request)." args_schema=<class 'pydantic.v1.main.reactionsdeleteforpullrequestcommentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c24c180>
name='githublargebeta_pullsget' description='githublargebeta_pullsget(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], pull_number: typing.Annotated[int, \'The number that identifies the pull request.\']) - Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub\'s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists details of a pull request by providing its number.\n\nWhen you get, [create](https://docs.github.com/rest/pulls/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/pulls/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".\n\nThe value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.\n\nThe value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:\n\n*   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.\n*   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.\n*   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.\n\nPass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.\n- **`application/vnd.github.diff`**: For more information, see "[git-diff](https://git-scm.com/docs/git-diff)" in the Git documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/). Include the repository name and pull request ID in your message.' args_schema=<class 'pydantic.v1.main.pullsgetRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c24cb80>
name='githublargebeta_pullsupdate' description='githublargebeta_pullsupdate(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], pull_number: typing.Annotated[int, \'The number that identifies the pull request.\'], title: typing.Annotated[str, \'The title of the pull request.\'] = None, body: typing.Annotated[str, \'The contents of the pull request.\'] = None, state: typing.Annotated[str, \'State of this Pull Request. Either `open` or `closed`.\'] = None, base: typing.Annotated[str, \'The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.\'] = None, maintainer_can_modify: typing.Annotated[bool, \'Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.\'] = None) - Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub\'s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.\n- **`application/vnd.github.diff`**: For more information, see "[git-diff](https://git-scm.com/docs/git-diff)" in the Git documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/). Include the repository name and pull request ID in your message.' args_schema=<class 'pydantic.v1.main.pullsupdateRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c24c860>
name='githublargebeta_codespacescreatewithprforauthenticateduser' description="githublargebeta_codespacescreatewithprforauthenticateduser(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], pull_number: typing.Annotated[int, 'The number that identifies the pull request.'], location: typing.Annotated[str, 'The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.'] = None, geo: typing.Annotated[str, 'The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated.'] = None, client_ip: typing.Annotated[str, 'IP for location auto-detection when proxying a request'] = None, machine: typing.Annotated[str, 'Machine type to use for this codespace'] = None, devcontainer_path: typing.Annotated[str, 'Path to devcontainer.json config to use for this codespace'] = None, multi_repo_permissions_opt_out: typing.Annotated[bool, 'Whether to authorize requested permissions from devcontainer.json'] = None, working_directory: typing.Annotated[str, 'Working directory for this codespace'] = None, idle_timeout_minutes: typing.Annotated[int, 'Time in minutes before codespace stops from inactivity'] = None, display_name: typing.Annotated[str, 'Display name for this codespace'] = None, retention_period_minutes: typing.Annotated[int, 'Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).'] = None) - Creates a codespace owned by the authenticated user for the specified pull request.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacescreatewithprforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c24c540>
name='githublargebeta_pullslistreviewcomments' description='githublargebeta_pullslistreviewcomments(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], pull_number: typing.Annotated[int, \'The number that identifies the pull request.\'], direction: typing.Annotated[str, \'The direction to sort results. Ignored without `sort` parameter.\'] = None, since: typing.Annotated[str, \'Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, sort_: typing.Annotated[str, \'The property to sort the results by.\'] = \'created\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all review comments for a specified pull request. By default, review comments\nare in ascending order by ID.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.pullslistreviewcommentsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c24dd00>
name='githublargebeta_pullscreatereviewcomment' description='githublargebeta_pullscreatereviewcomment(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], pull_number: typing.Annotated[int, \'The number that identifies the pull request.\'], body: typing.Annotated[str, \'The text of the review comment.\'], commit_id: typing.Annotated[str, \'The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.\'], path: typing.Annotated[str, \'The relative path to the file that necessitates a comment.\'], position: typing.Annotated[int, "**This parameter is deprecated. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. The position value equals the number of lines down from the first \'@@\' hunk header in the file you want to add a comment. The line just below the \'@@\' line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file."] = None, side: typing.Annotated[str, "In a split diff view, the side of the diff that the pull request\'s changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see \'[Diff view options](https://docs.github.com/articles/about-comparing-branches-in-pull-requests#diff-view-options)\' in the GitHub Help documentation."] = None, line: typing.Annotated[int, \'**Required unless using `subject_type:file`**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.\'] = None, start_line: typing.Annotated[int, "**Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see \'[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\' in the GitHub Help documentation."] = None, start_side: typing.Annotated[str, "**Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see \'[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\' in the GitHub Help documentation. See `side` in this table for additional context."] = None, in_reply_to: typing.Annotated[int, "The ID of the review comment to reply to. To find the ID of a review comment with [\'List review comments on a pull request\'](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored."] = None, subject_type: typing.Annotated[str, \'The level at which the comment is targeted.\'] = None) - Creates a review comment on the diff of a specified pull request. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/rest/issues/comments#create-an-issue-comment)."\n\nIf your comment applies to more than one line in the pull request diff, you should use the parameters `line`, `side`, and optionally `start_line` and `start_side` in your request.\n\nThe `position` parameter is deprecated. If you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"\nand "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.pullscreatereviewcommentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c24dc60>
name='githublargebeta_pullscreatereplyforreviewcomment' description='githublargebeta_pullscreatereplyforreviewcomment(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], pull_number: typing.Annotated[int, \'The number that identifies the pull request.\'], comment_id: typing.Annotated[int, \'The unique identifier of the comment.\'], body: typing.Annotated[str, \'The text of the review comment.\']) - Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"\nand "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.pullscreatereplyforreviewcommentRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c24eac0>
name='githublargebeta_pullslistcommits' description='githublargebeta_pullslistcommits(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], pull_number: typing.Annotated[int, \'The number that identifies the pull request.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists a maximum of 250 commits for a pull request. To receive a complete\ncommit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/commits/commits#list-commits)\nendpoint.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.\n- **`application/vnd.github.diff`**: For more information, see "[git-diff](https://git-scm.com/docs/git-diff)" in the Git documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/). Include the repository name and pull request ID in your message.' args_schema=<class 'pydantic.v1.main.pullslistcommitsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c24ec00>
name='githublargebeta_pullslistfiles' description='githublargebeta_pullslistfiles(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], pull_number: typing.Annotated[int, \'The number that identifies the pull request.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the files in a specified pull request.\n\n**Note:** Responses include a maximum of 3000 files. The paginated response\nreturns 30 files per page by default.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.\n- **`application/vnd.github.diff`**: For more information, see "[git-diff](https://git-scm.com/docs/git-diff)" in the Git documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/). Include the repository name and pull request ID in your message.' args_schema=<class 'pydantic.v1.main.pullslistfilesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c24ee80>
name='githublargebeta_pullscheckifmerged' description="githublargebeta_pullscheckifmerged(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], pull_number: typing.Annotated[int, 'The number that identifies the pull request.']) - Checks if a pull request has been merged into the base branch. The HTTP status of the response indicates whether or not the pull request has been merged; the response body is empty." args_schema=<class 'pydantic.v1.main.pullscheckifmergedRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c24f240>
name='githublargebeta_pullsmerge' description='githublargebeta_pullsmerge(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], pull_number: typing.Annotated[int, \'The number that identifies the pull request.\'], commit_title: typing.Annotated[str, \'Title for the automatic commit message.\'] = None, commit_message: typing.Annotated[str, \'Extra detail to append to automatic commit message.\'] = None, sha: typing.Annotated[str, \'SHA that pull request head must match to allow merge.\'] = None, merge_method: typing.Annotated[str, \'The merge method to use.\'] = None) - Merges a pull request into the base branch.\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."' args_schema=<class 'pydantic.v1.main.pullsmergeRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c24f880>
name='githublargebeta_pullslistrequestedreviewers' description="githublargebeta_pullslistrequestedreviewers(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], pull_number: typing.Annotated[int, 'The number that identifies the pull request.']) - Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request) operation." args_schema=<class 'pydantic.v1.main.pullslistrequestedreviewersRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c24f600>
name='githublargebeta_pullsrequestreviewers' description='githublargebeta_pullsrequestreviewers(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], pull_number: typing.Annotated[int, \'The number that identifies the pull request.\'], reviewers: typing.Annotated[composio_langchain.composio_tool_spec.Reviewers, \'An array of user `login`s that will be requested.\'] = None, team_reviewers: typing.Annotated[composio_langchain.composio_tool_spec.TeamReviewers, \'An array of team `slug`s that will be requested.\'] = None) - Requests reviews for a pull request from a given set of users and/or teams.\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."' args_schema=<class 'pydantic.v1.main.pullsrequestreviewersRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c280ea0>
name='githublargebeta_pullsremoverequestedreviewers' description="githublargebeta_pullsremoverequestedreviewers(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], pull_number: typing.Annotated[int, 'The number that identifies the pull request.'], reviewers: typing.Annotated[composio_langchain.composio_tool_spec.Reviewers, 'An array of user `login`s that will be removed.'], team_reviewers: typing.Annotated[composio_langchain.composio_tool_spec.TeamReviewers, 'An array of team `slug`s that will be removed.'] = None) - Removes review requests from a pull request for a given set of users and/or teams." args_schema=<class 'pydantic.v1.main.pullsremoverequestedreviewersRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c281ee0>
name='githublargebeta_pullslistreviews' description='githublargebeta_pullslistreviews(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], pull_number: typing.Annotated[int, \'The number that identifies the pull request.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all reviews for a specified pull request. The list of reviews returns in chronological order.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.pullslistreviewsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c282020>
name='githublargebeta_pullscreatereview' description='githublargebeta_pullscreatereview(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], pull_number: typing.Annotated[int, \'The number that identifies the pull request.\'], commit_id: typing.Annotated[str, \'The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.\'] = None, body: typing.Annotated[str, \'**Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.\'] = None, event: typing.Annotated[str, \'The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request) when you are ready.\'] = None, comments: typing.Annotated[composio_langchain.composio_tool_spec.Comments, \'Use the following table to specify the location, destination, and contents of the draft review comment.\'] = None) - Creates a review on a specified pull request.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."\n\nPull request reviews created in the `PENDING` state are not submitted and therefore do not include the `submitted_at` property in the response. To create a pending review for a pull request, leave the `event` parameter blank. For more information about submitting a `PENDING` review, see "[Submit a review for a pull request](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request)."\n\n**Note:** To comment on a specific line in a file, you need to first determine the position of that line in the diff. To see a pull request diff, add the `application/vnd.github.v3.diff` media type to the `Accept` header of a call to the [Get a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) endpoint.\n\nThe `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.pullscreatereviewRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2818a0>
name='githublargebeta_pullsgetreview' description='githublargebeta_pullsgetreview(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], pull_number: typing.Annotated[int, \'The number that identifies the pull request.\'], review_id: typing.Annotated[int, \'The unique identifier of the review.\']) - Retrieves a pull request review by its ID.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.pullsgetreviewRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2816c0>
name='githublargebeta_pullsupdatereview' description='githublargebeta_pullsupdatereview(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], pull_number: typing.Annotated[int, \'The number that identifies the pull request.\'], review_id: typing.Annotated[int, \'The unique identifier of the review.\'], body: typing.Annotated[str, \'The body text of the pull request review.\']) - Updates the contents of a specified review summary comment.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.pullsupdatereviewRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c281440>
name='githublargebeta_pullsdeletependingreview' description='githublargebeta_pullsdeletependingreview(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], pull_number: typing.Annotated[int, \'The number that identifies the pull request.\'], review_id: typing.Annotated[int, \'The unique identifier of the review.\']) - Deletes a pull request review that has not been submitted. Submitted reviews cannot be deleted.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.pullsdeletependingreviewRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c281800>
name='githublargebeta_pullslistcommentsforreview' description='githublargebeta_pullslistcommentsforreview(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], pull_number: typing.Annotated[int, \'The number that identifies the pull request.\'], review_id: typing.Annotated[int, \'The unique identifier of the review.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists comments for a specific pull request review.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.pullslistcommentsforreviewRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c280b80>
name='githublargebeta_pullsdismissreview' description='githublargebeta_pullsdismissreview(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], pull_number: typing.Annotated[int, \'The number that identifies the pull request.\'], review_id: typing.Annotated[int, \'The unique identifier of the review.\'], message: typing.Annotated[str, \'The message for the pull request review dismissal\'], event: typing.Annotated[str, \'event__\'] = None) - Dismisses a specified review on a pull request.\n\n**Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/branches/branch-protection),\nyou must be a repository administrator or be included in the list of people or teams\nwho can dismiss pull request reviews.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.pullsdismissreviewRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2809a0>
name='githublargebeta_pullssubmitreview' description='githublargebeta_pullssubmitreview(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], pull_number: typing.Annotated[int, \'The number that identifies the pull request.\'], review_id: typing.Annotated[int, \'The unique identifier of the review.\'], event: typing.Annotated[str, \'The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.\'], body: typing.Annotated[str, \'The body text of the pull request review\'] = None) - Submits a pending review for a pull request. For more information about creating a pending review for a pull request, see "[Create a review for a pull request](https://docs.github.com/rest/pulls/reviews#create-a-review-for-a-pull-request)."\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.pullssubmitreviewRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c282ac0>
name='githublargebeta_pullsupdatebranch' description='githublargebeta_pullsupdatebranch(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], pull_number: typing.Annotated[int, \'The number that identifies the pull request.\'], expected_head_sha: typing.Annotated[str, "The expected SHA of the pull request\'s HEAD ref. This is the most recent commit on the pull request\'s branch. If the expected SHA does not match the pull request\'s HEAD, you will receive a `422 Unprocessable Entity` status. You can use the \'[List commits](https://docs.github.com/rest/commits/commits#list-commits)\' endpoint to find the most recent commit SHA. Default: SHA of the pull request\'s current HEAD ref."] = None) - Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.' args_schema=<class 'pydantic.v1.main.pullsupdatebranchRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2828e0>
name='githublargebeta_reposgetreadme' description='githublargebeta_reposgetreadme(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], ref: typing.Annotated[str, \'The name of the commit/branch/tag. Default: the repository’s default branch.\'] = None) - Gets the preferred README for a repository.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw file contents. This is the default if you do not specify a media type.\n- **`application/vnd.github.html+json`**: Returns the README in HTML. Markup languages are rendered to HTML using GitHub\'s open-source [Markup library](https://github.com/github/markup).' args_schema=<class 'pydantic.v1.main.reposgetreadmeRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c281da0>
name='githublargebeta_reposgetreadmeindirectory' description='githublargebeta_reposgetreadmeindirectory(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], dir: typing.Annotated[str, \'The alternate path to look for a README file\'], ref: typing.Annotated[str, \'The name of the commit/branch/tag. Default: the repository’s default branch.\'] = None) - Gets the README from a repository directory.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw file contents. This is the default if you do not specify a media type.\n- **`application/vnd.github.html+json`**: Returns the README in HTML. Markup languages are rendered to HTML using GitHub\'s open-source [Markup library](https://github.com/github/markup).' args_schema=<class 'pydantic.v1.main.reposgetreadmeindirectoryRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c281b20>
name='githublargebeta_reposlistreleases' description='githublargebeta_reposlistreleases(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/repos/repos#list-repository-tags).\n\nInformation about published releases are available to everyone. Only users with push access will receive listings for draft releases.' args_schema=<class 'pydantic.v1.main.reposlistreleasesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c280cc0>
name='githublargebeta_reposcreaterelease' description='githublargebeta_reposcreaterelease(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], tag_name: typing.Annotated[str, \'The name of the tag.\'], target_commitish: typing.Annotated[str, "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository\'s default branch."] = None, name: typing.Annotated[str, \'The name of the release.\'] = None, body: typing.Annotated[str, \'Text describing the contents of the tag.\'] = None, discussion_category_name: typing.Annotated[str, "If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see \'[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).\'"] = None, draft: typing.Annotated[bool, \'`true` to create a draft (unpublished) release, `false` to create a published one.\'] = False, prerelease: typing.Annotated[bool, \'`true` to identify the release as a prerelease. `false` to identify the release as a full release.\'] = False, generate_release_notes: typing.Annotated[bool, \'Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.\'] = False, make_latest: typing.Annotated[str, \'Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.\'] = \'True\') - Users with push access to the repository can create a release.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."' args_schema=<class 'pydantic.v1.main.reposcreatereleaseRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c282fc0>
name='githublargebeta_reposgetreleaseasset' description="githublargebeta_reposgetreleaseasset(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], asset_id: typing.Annotated[int, 'The unique identifier of the asset.']) - To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response." args_schema=<class 'pydantic.v1.main.reposgetreleaseassetRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2832e0>
name='githublargebeta_reposupdatereleaseasset' description="githublargebeta_reposupdatereleaseasset(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], asset_id: typing.Annotated[int, 'The unique identifier of the asset.'], name: typing.Annotated[str, 'The file name of the asset.'] = None, label: typing.Annotated[str, 'An alternate short description of the asset. Used in place of the filename.'] = None, state: typing.Annotated[str, 'state__'] = None) - Users with push access to the repository can edit a release asset." args_schema=<class 'pydantic.v1.main.reposupdatereleaseassetRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c283ce0>
name='githublargebeta_reposdeletereleaseasset' description="githublargebeta_reposdeletereleaseasset(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], asset_id: typing.Annotated[int, 'The unique identifier of the asset.']) - Delete a release asset" args_schema=<class 'pydantic.v1.main.reposdeletereleaseassetRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2c00e0>
name='githublargebeta_reposgeneratereleasenotes' description='githublargebeta_reposgeneratereleasenotes(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], tag_name: typing.Annotated[str, \'The tag name for the release. This can be an existing tag or a new one.\'], target_commitish: typing.Annotated[str, "Specifies the commitish value that will be the target for the release\'s tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists."] = None, previous_tag_name: typing.Annotated[str, \'The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release.\'] = None, configuration_file_path: typing.Annotated[str, "Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at \'.github/release.yml\' or \'.github/release.yaml\' will be used. If that is not present, the default configuration will be used."] = None) - Generate a name and body describing a [release](https://docs.github.com/rest/releases/releases#get-a-release). The body content will be markdown formatted and contain information like the changes since last release and users who contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when creating a new release.' args_schema=<class 'pydantic.v1.main.reposgeneratereleasenotesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2c0180>
name='githublargebeta_reposgetlatestrelease' description="githublargebeta_reposgetlatestrelease(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - View the latest published full release for the repository.\n\nThe latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published." args_schema=<class 'pydantic.v1.main.reposgetlatestreleaseRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2c0040>
name='githublargebeta_reposgetreleasebytag' description="githublargebeta_reposgetreleasebytag(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], tag: typing.Annotated[str, 'tag parameter']) - Get a published release with the specified tag." args_schema=<class 'pydantic.v1.main.reposgetreleasebytagRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2c0860>
name='githublargebeta_reposgetrelease' description='githublargebeta_reposgetrelease(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], release_id: typing.Annotated[int, \'The unique identifier of the release.\']) - Gets a public release with the specified release ID.\n\n**Note:** This returns an `upload_url` key corresponding to the endpoint\nfor uploading release assets. This key is a hypermedia resource. For more information, see\n"[Getting started with the REST API](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia)."' args_schema=<class 'pydantic.v1.main.reposgetreleaseRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2c0a40>
name='githublargebeta_reposupdaterelease' description='githublargebeta_reposupdaterelease(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], release_id: typing.Annotated[int, \'The unique identifier of the release.\'], tag_name: typing.Annotated[str, \'The name of the tag.\'] = None, target_commitish: typing.Annotated[str, "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository\'s default branch."] = None, name: typing.Annotated[str, \'The name of the release.\'] = None, body: typing.Annotated[str, \'Text describing the contents of the tag.\'] = None, draft: typing.Annotated[bool, \'`true` makes the release a draft, and `false` publishes the release.\'] = None, prerelease: typing.Annotated[bool, \'`true` to identify the release as a prerelease, `false` to identify the release as a full release.\'] = None, discussion_category_name: typing.Annotated[str, "If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see \'[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).\'"] = None, make_latest: typing.Annotated[str, \'Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.\'] = \'True\') - Users with push access to the repository can edit a release.' args_schema=<class 'pydantic.v1.main.reposupdatereleaseRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2c0f40>
name='githublargebeta_reposdeleterelease' description="githublargebeta_reposdeleterelease(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], release_id: typing.Annotated[int, 'The unique identifier of the release.']) - Users with push access to the repository can delete a release." args_schema=<class 'pydantic.v1.main.reposdeletereleaseRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2c0cc0>
name='githublargebeta_reposlistreleaseassets' description='githublargebeta_reposlistreleaseassets(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], release_id: typing.Annotated[int, \'The unique identifier of the release.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List release assets' args_schema=<class 'pydantic.v1.main.reposlistreleaseassetsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2c1940>
name='githublargebeta_reposuploadreleaseasset' description='githublargebeta_reposuploadreleaseasset(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], release_id: typing.Annotated[int, \'The unique identifier of the release.\'], name: typing.Annotated[str, \'name\'], label: typing.Annotated[str, \'label\'] = None) - This endpoint makes use of a [Hypermedia relation](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in\nthe response of the [Create a release endpoint](https://docs.github.com/rest/releases/releases#create-a-release) to upload a release asset.\n\nYou need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.\n\nMost libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example: \n\n`application/zip`\n\nGitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,\nyou\'ll still need to pass your authentication to be able to upload an asset.\n\nWhen an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.\n\n**Notes:**\n*   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List release assets](https://docs.github.com/rest/releases/assets#list-release-assets)"\nendpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).\n*   To find the `release_id` query the [`GET /repos/{owner}/{repo}/releases/latest` endpoint](https://docs.github.com/rest/releases/releases#get-the-latest-release). \n*   If you upload an asset with the same filename as another uploaded asset, you\'ll receive an error and must delete the old file before you can re-upload the new asset.' args_schema=<class 'pydantic.v1.main.reposuploadreleaseassetRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2c16c0>
name='githublargebeta_reactionslistforrelease' description='githublargebeta_reactionslistforrelease(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], release_id: typing.Annotated[int, \'The unique identifier of the release.\'], content: typing.Annotated[str, \'Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a release.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List the reactions to a [release](https://docs.github.com/rest/releases/releases#get-a-release).' args_schema=<class 'pydantic.v1.main.reactionslistforreleaseRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2c0400>
name='githublargebeta_reactionscreateforrelease' description="githublargebeta_reactionscreateforrelease(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], release_id: typing.Annotated[int, 'The unique identifier of the release.'], content: typing.Annotated[str, 'The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the release.']) - Create a reaction to a [release](https://docs.github.com/rest/releases/releases#get-a-release). A response with a `Status: 200 OK` means that you already added the reaction type to this release." args_schema=<class 'pydantic.v1.main.reactionscreateforreleaseRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2c1d00>
name='githublargebeta_reactionsdeleteforrelease' description="githublargebeta_reactionsdeleteforrelease(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], release_id: typing.Annotated[int, 'The unique identifier of the release.'], reaction_id: typing.Annotated[int, 'The unique identifier of the reaction.']) - **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`.\n\nDelete a reaction to a [release](https://docs.github.com/rest/releases/releases#get-a-release)." args_schema=<class 'pydantic.v1.main.reactionsdeleteforreleaseRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2c28e0>
name='githublargebeta_reposgetbranchrules' description='githublargebeta_reposgetbranchrules(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], branch: typing.Annotated[str, \'The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Returns all active rules that apply to the specified branch. The branch does not need to exist; rules that would apply\nto a branch with that name will be returned. All active rules that apply will be returned, regardless of the level\nat which they are configured (e.g. repository or organization). Rules in rulesets with "evaluate" or "disabled"\nenforcement statuses are not returned.' args_schema=<class 'pydantic.v1.main.reposgetbranchrulesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2c2b60>
name='githublargebeta_reposgetreporulesets' description='githublargebeta_reposgetreporulesets(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, includes_parents: typing.Annotated[bool, \'Include rulesets configured at higher levels that apply to this repository\'] = True) - Get all the rulesets for a repository.' args_schema=<class 'pydantic.v1.main.reposgetreporulesetsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2c2520>
name='githublargebeta_reposcreatereporuleset' description="githublargebeta_reposcreatereporuleset(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], name: typing.Annotated[str, 'The name of the ruleset.'], enforcement: typing.Annotated[str, 'The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).'], target: typing.Annotated[str, 'The target of the ruleset.'] = None, bypass_actors: typing.Annotated[composio_langchain.composio_tool_spec.BypassActors, 'The actors that can bypass the rules in this ruleset'] = None, conditions__ref_name__include: typing.Annotated[composio_langchain.composio_tool_spec.ConditionsRefNameInclude, 'Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.__ref_name__Parameters for a repository ruleset ref name condition__ref_name__Parameters for a repository ruleset ref name condition__Parameters for a repository ruleset ref name condition__ref_name__Parameters for a repository ruleset ref name condition__Parameters for a repository ruleset ref name condition__Parameters for a repository ruleset ref name condition'] = None, conditions__ref_name__exclude: typing.Annotated[composio_langchain.composio_tool_spec.ConditionsRefNameExclude, 'Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.__ref_name__Parameters for a repository ruleset ref name condition__ref_name__Parameters for a repository ruleset ref name condition__Parameters for a repository ruleset ref name condition__ref_name__Parameters for a repository ruleset ref name condition__Parameters for a repository ruleset ref name condition__Parameters for a repository ruleset ref name condition'] = None, rules: typing.Annotated[composio_langchain.composio_tool_spec.Rules, 'An array of rules within the ruleset.'] = None) - Create a ruleset for a repository." args_schema=<class 'pydantic.v1.main.reposcreatereporulesetRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2c3880>
name='githublargebeta_reposgetreporulesuites' description='githublargebeta_reposgetreporulesuites(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], ref: typing.Annotated[str, \'The name of the ref. Cannot contain wildcard characters. When specified, only rule evaluations triggered for this ref will be returned.\'] = None, actor_name: typing.Annotated[str, \'The handle for the GitHub user account to filter on. When specified, only rule evaluations triggered by this actor will be returned.\'] = None, time_period: typing.Annotated[str, \'The time period to filter by.For example, `day` will filter for rule suites that occurred in the past 24 hours, and `week` will filter for insights that occurred in the past 7 days (168 hours).\'] = \'day\', rule_suite_result: typing.Annotated[str, \'The rule results to filter on. When specified, only suites with this result will be returned.\'] = \'all\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists suites of rule evaluations at the repository level.\nFor more information, see "[Managing rulesets for a repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets)."' args_schema=<class 'pydantic.v1.main.reposgetreporulesuitesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2c32e0>
name='githublargebeta_reposgetreporulesuite' description='githublargebeta_reposgetreporulesuite(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], rule_suite_id: typing.Annotated[int, \'The unique identifier of the rule suite result.To get this ID, you can use [GET /repos/{owner}/{repo}/rulesets/rule-suites](https://docs.github.com/rest/repos/rule-suites#list-repository-rule-suites)for repositories and [GET /orgs/{org}/rulesets/rule-suites](https://docs.github.com/rest/orgs/rule-suites#list-organization-rule-suites)for organizations.\']) - Gets information about a suite of rule evaluations from within a repository.\nFor more information, see "[Managing rulesets for a repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets)."' args_schema=<class 'pydantic.v1.main.reposgetreporulesuiteRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4040e0>
name='githublargebeta_reposgetreporuleset' description="githublargebeta_reposgetreporuleset(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], ruleset_id: typing.Annotated[int, 'The ID of the ruleset.'], includes_parents: typing.Annotated[bool, 'Include rulesets configured at higher levels that apply to this repository'] = True) - Get a ruleset for a repository." args_schema=<class 'pydantic.v1.main.reposgetreporulesetRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c404040>
name='githublargebeta_reposupdatereporuleset' description="githublargebeta_reposupdatereporuleset(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], ruleset_id: typing.Annotated[int, 'The ID of the ruleset.'], enforcement: typing.Annotated[str, 'The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).'], name: typing.Annotated[str, 'The name of the ruleset.'] = None, target: typing.Annotated[str, 'The target of the ruleset.'] = None, bypass_actors: typing.Annotated[composio_langchain.composio_tool_spec.BypassActors, 'The actors that can bypass the rules in this ruleset'] = None, conditions__ref_name__include: typing.Annotated[composio_langchain.composio_tool_spec.ConditionsRefNameInclude, 'Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.__ref_name__Parameters for a repository ruleset ref name condition__ref_name__Parameters for a repository ruleset ref name condition__Parameters for a repository ruleset ref name condition__ref_name__Parameters for a repository ruleset ref name condition__Parameters for a repository ruleset ref name condition__Parameters for a repository ruleset ref name condition__ref_name__Parameters for a repository ruleset ref name condition__Parameters for a repository ruleset ref name condition__Parameters for a repository ruleset ref name condition__Parameters for a repository ruleset ref name condition'] = None, conditions__ref_name__exclude: typing.Annotated[composio_langchain.composio_tool_spec.ConditionsRefNameExclude, 'Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.__ref_name__Parameters for a repository ruleset ref name condition__ref_name__Parameters for a repository ruleset ref name condition__Parameters for a repository ruleset ref name condition__ref_name__Parameters for a repository ruleset ref name condition__Parameters for a repository ruleset ref name condition__Parameters for a repository ruleset ref name condition__ref_name__Parameters for a repository ruleset ref name condition__Parameters for a repository ruleset ref name condition__Parameters for a repository ruleset ref name condition__Parameters for a repository ruleset ref name condition'] = None, rules: typing.Annotated[composio_langchain.composio_tool_spec.Rules, 'An array of rules within the ruleset.'] = None) - Update a ruleset for a repository." args_schema=<class 'pydantic.v1.main.reposupdatereporulesetRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c405260>
name='githublargebeta_reposdeletereporuleset' description="githublargebeta_reposdeletereporuleset(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], ruleset_id: typing.Annotated[int, 'The ID of the ruleset.']) - Delete a ruleset for a repository." args_schema=<class 'pydantic.v1.main.reposdeletereporulesetRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c405080>
name='githublargebeta_secretscanninglistalertsforrepo' description='githublargebeta_secretscanninglistalertsforrepo(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], state: typing.Annotated[str, \'Set to `open` or `resolved` to only list secret scanning alerts in a specific state.\'] = None, secret_type: typing.Annotated[str, "A comma-separated list of secret types to return. By default all secret types are returned.See \'[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\'for a complete list of secret types."] = None, resolution: typing.Annotated[str, \'A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.\'] = None, before: typing.Annotated[str, "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty \'before\' query string."] = None, after: typing.Annotated[str, "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty \'after\' query string."] = None, validity: typing.Annotated[str, \'A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`.\'] = None, sort_: typing.Annotated[str, \'The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.\'] = \'created\', direction: typing.Annotated[str, \'The direction to sort the results by.\'] = \'desc\', page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Lists secret scanning alerts for an eligible repository, from newest to oldest.\n\nThe authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.' args_schema=<class 'pydantic.v1.main.secretscanninglistalertsforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c405300>
name='githublargebeta_secretscanninggetalert' description="githublargebeta_secretscanninggetalert(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], alert_number: typing.Annotated[int, 'The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.']) - Gets a single secret scanning alert detected in an eligible repository.\n\nThe authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead." args_schema=<class 'pydantic.v1.main.secretscanninggetalertRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c404fe0>
name='githublargebeta_secretscanningupdatealert' description="githublargebeta_secretscanningupdatealert(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], alert_number: typing.Annotated[int, 'The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.'], state: typing.Annotated[str, 'Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`.'], resolution: typing.Annotated[str, '**Required when the `state` is `resolved`.** The reason for resolving the alert.'] = None, resolution_comment: typing.Annotated[str, 'An optional comment when closing an alert. Cannot be updated or deleted. Must be `null` when changing `state` to `open`.'] = None) - Updates the status of a secret scanning alert in an eligible repository.\n\nThe authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead." args_schema=<class 'pydantic.v1.main.secretscanningupdatealertRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c404400>
name='githublargebeta_secretscanninglistlocationsforalert' description='githublargebeta_secretscanninglistlocationsforalert(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], alert_number: typing.Annotated[int, \'The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.\'], page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Lists all locations for a given secret scanning alert for an eligible repository.\n\nThe authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.' args_schema=<class 'pydantic.v1.main.secretscanninglistlocationsforalertRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2c3ec0>
name='githublargebeta_securityadvisorieslistrepositoryadvisories' description='githublargebeta_securityadvisorieslistrepositoryadvisories(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], before: typing.Annotated[str, "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = None, after: typing.Annotated[str, "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = None, state: typing.Annotated[str, \'Filter by state of the repository advisories. Only advisories of this state will be returned.\'] = None, direction: typing.Annotated[str, \'The direction to sort the results by.\'] = \'desc\', sort_: typing.Annotated[str, \'The property to sort the results by.\'] = \'created\', per_page: typing.Annotated[int, "The number of advisories to return per page. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Lists security advisories in a repository.\n\nThe authenticated user can access unpublished security advisories from a repository if they are a security manager or administrator of that repository, or if they are a collaborator on any security advisory.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.' args_schema=<class 'pydantic.v1.main.securityadvisorieslistrepositoryadvisoriesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c2c3a60>
name='githublargebeta_securityadvisoriescreaterepositoryadvisory' description="githublargebeta_securityadvisoriescreaterepositoryadvisory(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], summary: typing.Annotated[str, 'A short summary of the advisory.'], description: typing.Annotated[str, 'A detailed description of what the advisory impacts.'], vulnerabilities: typing.Annotated[composio_langchain.composio_tool_spec.Vulnerabilities, 'A product affected by the vulnerability detailed in a repository security advisory.'], cve_id: typing.Annotated[str, 'The Common Vulnerabilities and Exposures (CVE) ID.'] = None, cwe_ids: typing.Annotated[composio_langchain.composio_tool_spec.CweIds, 'A list of Common Weakness Enumeration (CWE) IDs.'] = None, credits: typing.Annotated[composio_langchain.composio_tool_spec.Credits, 'A list of users receiving credit for their participation in the security advisory.'] = None, severity: typing.Annotated[str, 'The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.'] = None, cvss_vector_string: typing.Annotated[str, 'The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.'] = None, start_private_fork: typing.Annotated[bool, 'Whether to create a temporary private fork of the repository to collaborate on a fix.'] = False) - Creates a new repository security advisory.\n\nIn order to create a draft repository security advisory, the authenticated user must be a security manager or administrator of that repository.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.securityadvisoriescreaterepositoryadvisoryRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c407b00>
name='githublargebeta_securityadvisoriescreateprivatevulnerabilityreport' description='githublargebeta_securityadvisoriescreateprivatevulnerabilityreport(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], summary: typing.Annotated[str, \'A short summary of the advisory.\'], description: typing.Annotated[str, \'A detailed description of what the advisory impacts.\'], vulnerabilities: typing.Annotated[composio_langchain.composio_tool_spec.Vulnerabilities, \'An array of products affected by the vulnerability detailed in a repository security advisory.\'] = None, cwe_ids: typing.Annotated[composio_langchain.composio_tool_spec.CweIds, \'A list of Common Weakness Enumeration (CWE) IDs.\'] = None, severity: typing.Annotated[str, \'The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.\'] = None, cvss_vector_string: typing.Annotated[str, \'The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.\'] = None, start_private_fork: typing.Annotated[bool, \'Whether to create a temporary private fork of the repository to collaborate on a fix.\'] = False) - Report a security vulnerability to the maintainers of the repository.\nSee "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)" for more information about private vulnerability reporting.' args_schema=<class 'pydantic.v1.main.securityadvisoriescreateprivatevulnerabilityreportRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4051c0>
name='githublargebeta_securityadvisoriesgetrepositoryadvisory' description="githublargebeta_securityadvisoriesgetrepositoryadvisory(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], ghsa_id: typing.Annotated[str, 'The GHSA (GitHub Security Advisory) identifier of the advisory.']) - Get a repository security advisory using its GitHub Security Advisory (GHSA) identifier.\n\nAnyone can access any published security advisory on a public repository.\n\nThe authenticated user can access an unpublished security advisory from a repository if they are a security manager or administrator of that repository, or if they are a\ncollaborator on the security advisory.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to." args_schema=<class 'pydantic.v1.main.securityadvisoriesgetrepositoryadvisoryRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c407ce0>
name='githublargebeta_securityadvisoriesupdaterepositoryadvisory' description="githublargebeta_securityadvisoriesupdaterepositoryadvisory(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], ghsa_id: typing.Annotated[str, 'The GHSA (GitHub Security Advisory) identifier of the advisory.'], summary: typing.Annotated[str, 'A short summary of the advisory.'] = None, description: typing.Annotated[str, 'A detailed description of what the advisory impacts.'] = None, cve_id: typing.Annotated[str, 'The Common Vulnerabilities and Exposures (CVE) ID.'] = None, vulnerabilities: typing.Annotated[composio_langchain.composio_tool_spec.Vulnerabilities, 'A product affected by the vulnerability detailed in a repository security advisory.'] = None, cwe_ids: typing.Annotated[composio_langchain.composio_tool_spec.CweIds, 'A list of Common Weakness Enumeration (CWE) IDs.'] = None, credits: typing.Annotated[composio_langchain.composio_tool_spec.Credits, 'A list of users receiving credit for their participation in the security advisory.'] = None, severity: typing.Annotated[str, 'The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.'] = None, cvss_vector_string: typing.Annotated[str, 'The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.'] = None, state: typing.Annotated[str, 'The state of the advisory.'] = None, collaborating_users: typing.Annotated[composio_langchain.composio_tool_spec.CollaboratingUsers, 'A list of usernames who have been granted write access to the advisory.'] = None, collaborating_teams: typing.Annotated[composio_langchain.composio_tool_spec.CollaboratingTeams, 'A list of team slugs which have been granted write access to the advisory.'] = None) - Update a repository security advisory using its GitHub Security Advisory (GHSA) identifier.\n\nIn order to update any security advisory, the authenticated user must be a security manager or administrator of that repository,\nor a collaborator on the repository security advisory.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.securityadvisoriesupdaterepositoryadvisoryRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c441260>
name='githublargebeta_securityadvisoriescreaterepositoryadvisorycverequest' description='githublargebeta_securityadvisoriescreaterepositoryadvisorycverequest(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], ghsa_id: typing.Annotated[str, \'The GHSA (GitHub Security Advisory) identifier of the advisory.\']) - If you want a CVE identification number for the security vulnerability in your project, and don\'t already have one, you can request a CVE identification number from GitHub. For more information see "[Requesting a CVE identification number](https://docs.github.com/code-security/security-advisories/repository-security-advisories/publishing-a-repository-security-advisory#requesting-a-cve-identification-number-optional)."\n\nYou may request a CVE for public repositories, but cannot do so for private repositories.\n\nIn order to request a CVE for a repository security advisory, the authenticated user must be a security manager or administrator of that repository.\n\nOAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.securityadvisoriescreaterepositoryadvisorycverequestRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4413a0>
name='githublargebeta_securityadvisoriescreatefork' description="githublargebeta_securityadvisoriescreatefork(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], ghsa_id: typing.Annotated[str, 'The GHSA (GitHub Security Advisory) identifier of the advisory.']) - Create a temporary private fork to collaborate on fixing a security vulnerability in your repository.\n\n**Note**: Forking a repository happens asynchronously. You may have to wait up to 5 minutes before you can access the fork." args_schema=<class 'pydantic.v1.main.securityadvisoriescreateforkRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4416c0>
name='githublargebeta_activityliststargazersforrepo' description='githublargebeta_activityliststargazersforrepo(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the people that have starred the repository.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.' args_schema=<class 'pydantic.v1.main.activityliststargazersforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4411c0>
name='githublargebeta_reposgetcodefrequencystats' description="githublargebeta_reposgetcodefrequencystats(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Returns a weekly aggregate of the number of additions and deletions pushed to a repository.\n\n**Note:** This endpoint can only be used for repositories with fewer than 10,000 commits. If the repository contains\n10,000 or more commits, a 422 status code will be returned." args_schema=<class 'pydantic.v1.main.reposgetcodefrequencystatsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c441940>
name='githublargebeta_reposgetcommitactivitystats' description="githublargebeta_reposgetcommitactivitystats(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`." args_schema=<class 'pydantic.v1.main.reposgetcommitactivitystatsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4079c0>
name='githublargebeta_reposgetcontributorsstats' description="githublargebeta_reposgetcontributorsstats(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:\n\n*   `w` - Start of the week, given as a [Unix timestamp](https://en.wikipedia.org/wiki/Unix_time).\n*   `a` - Number of additions\n*   `d` - Number of deletions\n*   `c` - Number of commits\n\n**Note:** This endpoint will return `0` values for all addition and deletion counts in repositories with 10,000 or more commits." args_schema=<class 'pydantic.v1.main.reposgetcontributorsstatsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c407920>
name='githublargebeta_reposgetparticipationstats' description="githublargebeta_reposgetparticipationstats(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.\n\nThe array order is oldest week (index 0) to most recent week.\n\nThe most recent week is seven days ago at UTC midnight to today at UTC midnight." args_schema=<class 'pydantic.v1.main.reposgetparticipationstatsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4077e0>
name='githublargebeta_reposgetpunchcardstats' description="githublargebeta_reposgetpunchcardstats(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Each array contains the day number, hour number, and number of commits:\n\n*   `0-6`: Sunday - Saturday\n*   `0-23`: Hour of day\n*   Number of commits\n\nFor example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits." args_schema=<class 'pydantic.v1.main.reposgetpunchcardstatsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c407100>
name='githublargebeta_reposcreatecommitstatus' description="githublargebeta_reposcreatecommitstatus(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], sha: typing.Annotated[str, 'sha'], state: typing.Annotated[str, 'The state of the status.'], target_url: typing.Annotated[str, 'The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.  For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:  `http://ci.example.com/user/repo/build/sha`'] = None, description: typing.Annotated[str, 'A short description of the status.'] = None, context: typing.Annotated[str, 'A string label to differentiate this status from the status of other systems. This field is case-insensitive.'] = 'default') - Users with push access in a repository can create commit statuses for a given SHA.\n\nNote: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error." args_schema=<class 'pydantic.v1.main.reposcreatecommitstatusRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c406f20>
name='githublargebeta_activitylistwatchersforrepo' description='githublargebeta_activitylistwatchersforrepo(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the people watching the specified repository.' args_schema=<class 'pydantic.v1.main.activitylistwatchersforrepoRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c406b60>
name='githublargebeta_activitygetreposubscription' description="githublargebeta_activitygetreposubscription(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Gets information about whether the authenticated user is subscribed to the repository." args_schema=<class 'pydantic.v1.main.activitygetreposubscriptionRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c441080>
name='githublargebeta_activitysetreposubscription' description="githublargebeta_activitysetreposubscription(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], subscribed: typing.Annotated[bool, 'Determines if notifications should be received from this repository.'] = None, ignored: typing.Annotated[bool, 'Determines if all notifications should be blocked from this repository.'] = None) - If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/activity/watching#delete-a-repository-subscription) completely." args_schema=<class 'pydantic.v1.main.activitysetreposubscriptionRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c441300>
name='githublargebeta_activitydeletereposubscription' description="githublargebeta_activitydeletereposubscription(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/activity/watching#set-a-repository-subscription)." args_schema=<class 'pydantic.v1.main.activitydeletereposubscriptionRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c440e00>
name='githublargebeta_reposlisttags' description='githublargebeta_reposlisttags(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List repository tags' args_schema=<class 'pydantic.v1.main.reposlisttagsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c440b80>
name='githublargebeta_reposlisttagprotection' description="githublargebeta_reposlisttagprotection(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - This returns the tag protection states of a repository.\n\nThis information is only available to repository administrators." args_schema=<class 'pydantic.v1.main.reposlisttagprotectionRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c440860>
name='githublargebeta_reposcreatetagprotection' description="githublargebeta_reposcreatetagprotection(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], pattern: typing.Annotated[str, 'An optional glob pattern to match against when enforcing tag protection.']) - This creates a tag protection state for a repository.\nThis endpoint is only available to repository administrators." args_schema=<class 'pydantic.v1.main.reposcreatetagprotectionRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c441ee0>
name='githublargebeta_reposdeletetagprotection' description="githublargebeta_reposdeletetagprotection(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], tag_protection_id: typing.Annotated[int, 'The unique identifier of the tag protection.']) - This deletes a tag protection state for a repository.\nThis endpoint is only available to repository administrators." args_schema=<class 'pydantic.v1.main.reposdeletetagprotectionRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c442340>
name='githublargebeta_reposdownloadtarballarchive' description="githublargebeta_reposdownloadtarballarchive(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], ref: typing.Annotated[str, 'ref']) - Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually\n`main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use\nthe `Location` header to make a second `GET` request.\n**Note**: For private repositories, these links are temporary and expire after five minutes." args_schema=<class 'pydantic.v1.main.reposdownloadtarballarchiveRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4425c0>
name='githublargebeta_reposlistteams' description='githublargebeta_reposlistteams(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the teams that have access to the specified repository and that are also visible to the authenticated user.\n\nFor a public repository, a team is listed only if that team added the public repository explicitly.\n\nOAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to use this endpoint with a public repository, and `repo` scope to use this endpoint with a private repository.' args_schema=<class 'pydantic.v1.main.reposlistteamsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c440a40>
name='githublargebeta_reposgetalltopics' description='githublargebeta_reposgetalltopics(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Get all repository topics' args_schema=<class 'pydantic.v1.main.reposgetalltopicsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4420c0>
name='githublargebeta_reposreplacealltopics' description="githublargebeta_reposreplacealltopics(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], names: typing.Annotated[composio_langchain.composio_tool_spec.Names, 'An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters.']) - Replace all repository topics" args_schema=<class 'pydantic.v1.main.reposreplacealltopicsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c443560>
name='githublargebeta_reposgetclones' description="githublargebeta_reposgetclones(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], per: typing.Annotated[str, 'The time frame to display results for.'] = 'day') - Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday." args_schema=<class 'pydantic.v1.main.reposgetclonesRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4436a0>
name='githublargebeta_reposgettoppaths' description="githublargebeta_reposgettoppaths(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Get the top 10 popular contents over the last 14 days." args_schema=<class 'pydantic.v1.main.reposgettoppathsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4434c0>
name='githublargebeta_reposgettopreferrers' description="githublargebeta_reposgettopreferrers(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Get the top 10 referrers over the last 14 days." args_schema=<class 'pydantic.v1.main.reposgettopreferrersRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4439c0>
name='githublargebeta_reposgetviews' description="githublargebeta_reposgetviews(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], per: typing.Annotated[str, 'The time frame to display results for.'] = 'day') - Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday." args_schema=<class 'pydantic.v1.main.reposgetviewsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c443ba0>
name='githublargebeta_repostransfer' description="githublargebeta_repostransfer(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], new_owner: typing.Annotated[str, 'The username or organization name the repository will be transferred to.'], new_name: typing.Annotated[str, 'The new name to be given to the repository.'] = None, team_ids: typing.Annotated[composio_langchain.composio_tool_spec.TeamIds, 'ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.'] = None) - A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/)." args_schema=<class 'pydantic.v1.main.repostransferRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c48c860>
name='githublargebeta_reposcheckvulnerabilityalerts' description='githublargebeta_reposcheckvulnerabilityalerts(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\']) - Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin read access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".' args_schema=<class 'pydantic.v1.main.reposcheckvulnerabilityalertsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c48cae0>
name='githublargebeta_reposenablevulnerabilityalerts' description='githublargebeta_reposenablevulnerabilityalerts(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\']) - Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".' args_schema=<class 'pydantic.v1.main.reposenablevulnerabilityalertsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c48c9a0>
name='githublargebeta_reposdisablevulnerabilityalerts' description='githublargebeta_reposdisablevulnerabilityalerts(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\']) - Disables dependency alerts and the dependency graph for a repository.\nThe authenticated user must have admin access to the repository. For more information,\nsee "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".' args_schema=<class 'pydantic.v1.main.reposdisablevulnerabilityalertsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c443420>
name='githublargebeta_reposdownloadzipballarchive' description="githublargebeta_reposdownloadzipballarchive(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.'], ref: typing.Annotated[str, 'ref']) - Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually\n`main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use\nthe `Location` header to make a second `GET` request.\n\n**Note**: For private repositories, these links are temporary and expire after five minutes. If the repository is empty, you will receive a 404 when you follow the redirect." args_schema=<class 'pydantic.v1.main.reposdownloadzipballarchiveRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c443740>
name='githublargebeta_reposcreateusingtemplate' description="githublargebeta_reposcreateusingtemplate(template_owner: typing.Annotated[str, 'The account owner of the template repository. The name is not case sensitive.'], template_repo: typing.Annotated[str, 'The name of the template repository without the `.git` extension. The name is not case sensitive.'], name: typing.Annotated[str, 'The name of the new repository.'], owner: typing.Annotated[str, 'The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.'] = None, description: typing.Annotated[str, 'A short description of the new repository.'] = None, include_all_branches: typing.Annotated[bool, 'Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.'] = False, private: typing.Annotated[bool, 'Either `true` to create a new private repository or `false` to create a new public one.'] = False) - Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. If the repository is not public, the authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/repos/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.\n\nOAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository." args_schema=<class 'pydantic.v1.main.reposcreateusingtemplateRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c442b60>
name='githublargebeta_reposlistpublic' description="githublargebeta_reposlistpublic(since: typing.Annotated[int, 'A repository ID. Only return repositories with an ID greater than this ID.'] = None) - Lists all public repositories in the order that they were created.\n\nNote:\n- For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.\n- Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of repositories." args_schema=<class 'pydantic.v1.main.reposlistpublicRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c48c720>
name='githublargebeta_searchcode' description='githublargebeta_searchcode(q: typing.Annotated[str, "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See \'[Searching code](https://docs.github.com/search-github/searching-on-github/searching-code)\' for a detailed list of qualifiers."], sort_: typing.Annotated[str, \'**This field is deprecated.** Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)\'] = None, order: typing.Annotated[str, \'**This field is deprecated.** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. \'] = \'desc\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).\n\nWhen searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).\n\nFor example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:\n\n`q=addClass+in:file+language:js+repo:jquery/jquery`\n\nThis query searches for the keyword `addClass` within a file\'s contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.\n\nConsiderations for code search:\n\nDue to the complexity of searching code, there are a few restrictions on how searches are performed:\n\n*   Only the _default branch_ is considered. In most cases, this will be the `master` branch.\n*   Only files smaller than 384 KB are searchable.\n*   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing\nlanguage:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.\n\nThis endpoint requires you to authenticate and limits you to 10 requests per minute.' args_schema=<class 'pydantic.v1.main.searchcodeRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c48c400>
name='githublargebeta_searchcommits' description='githublargebeta_searchcommits(q: typing.Annotated[str, "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See \'[Searching commits](https://docs.github.com/search-github/searching-on-github/searching-commits)\' for a detailed list of qualifiers."], sort_: typing.Annotated[str, \'Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)\'] = None, order: typing.Annotated[str, \'Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.\'] = \'desc\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Find commits via various criteria on the default branch (usually `main`). This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).\n\nWhen searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match\nmetadata](https://docs.github.com/rest/search/search#text-match-metadata).\n\nFor example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:\n\n`q=repo:octocat/Spoon-Knife+css`' args_schema=<class 'pydantic.v1.main.searchcommitsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c48c0e0>
name='githublargebeta_searchissuesandpullrequests' description='githublargebeta_searchissuesandpullrequests(q: typing.Annotated[str, "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See \'[Searching issues and pull requests](https://docs.github.com/search-github/searching-on-github/searching-issues-and-pull-requests)\' for a detailed list of qualifiers."], sort_: typing.Annotated[str, \'Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)\'] = None, order: typing.Annotated[str, \'Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.\'] = \'desc\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).\n\nWhen searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted\nsearch results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).\n\nFor example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.\n\n`q=windows+label:bug+language:python+state:open&sort=created&order=asc`\n\nThis query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.\n\n**Note:** For requests made by GitHub Apps with a user access token, you can\'t retrieve a combination of issues and pull requests in a single query. Requests that don\'t include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."' args_schema=<class 'pydantic.v1.main.searchissuesandpullrequestsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c48cfe0>
name='githublargebeta_searchlabels' description='githublargebeta_searchlabels(repository_id: typing.Annotated[int, \'The id of the repository.\'], q: typing.Annotated[str, \'The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query).\'], sort_: typing.Annotated[str, \'Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)\'] = None, order: typing.Annotated[str, \'Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.\'] = \'desc\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).\n\nWhen searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).\n\nFor example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:\n\n`q=bug+defect+enhancement&repository_id=64778136`\n\nThe labels that best match the query appear first in the search results.' args_schema=<class 'pydantic.v1.main.searchlabelsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c48c900>
name='githublargebeta_searchrepos' description='githublargebeta_searchrepos(q: typing.Annotated[str, "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See \'[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)\' for a detailed list of qualifiers."], sort_: typing.Annotated[str, \'Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)\'] = None, order: typing.Annotated[str, \'Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.\'] = \'desc\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).\n\nWhen searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).\n\nFor example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:\n\n`q=tetris+language:assembly&sort=stars&order=desc`\n\nThis query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.' args_schema=<class 'pydantic.v1.main.searchreposRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c48d760>
name='githublargebeta_searchtopics' description='githublargebeta_searchtopics(q: typing.Annotated[str, \'The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query).\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api). See "[Searching topics](https://docs.github.com/articles/searching-topics/)" for a detailed list of qualifiers.\n\nWhen searching for topics, you can get text match metadata for the topic\'s **short\\_description**, **description**, **name**, or **display\\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).\n\nFor example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:\n\n`q=ruby+is:featured`\n\nThis query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.' args_schema=<class 'pydantic.v1.main.searchtopicsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c48dbc0>
name='githublargebeta_searchusers' description='githublargebeta_searchusers(q: typing.Annotated[str, "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See \'[Searching users](https://docs.github.com/search-github/searching-on-github/searching-users)\' for a detailed list of qualifiers."], sort_: typing.Annotated[str, \'Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)\'] = None, order: typing.Annotated[str, \'Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.\'] = \'desc\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).\n\nWhen searching for users, you can get text match metadata for the issue **login**, public **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).\n\nFor example, if you\'re looking for a list of popular users, you might try this query:\n\n`q=tom+repos:%3E42+followers:%3E1000`\n\nThis query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.\n\nThis endpoint does not accept authentication and will only include publicly visible users. As an alternative, you can use the GraphQL API. The GraphQL API requires authentication and will return private users, including Enterprise Managed Users (EMUs), that you are authorized to view. For more information, see "[GraphQL Queries](https://docs.github.com/graphql/reference/queries#search)."' args_schema=<class 'pydantic.v1.main.searchusersRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c48df80>
name='githublargebeta_teamsgetlegacy' description="githublargebeta_teamsgetlegacy(team_id: typing.Annotated[int, 'The unique identifier of the team.']) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/teams/teams#get-a-team-by-name) endpoint." args_schema=<class 'pydantic.v1.main.teamsgetlegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c48e200>
name='githublargebeta_teamsupdatelegacy' description="githublargebeta_teamsupdatelegacy(team_id: typing.Annotated[int, 'The unique identifier of the team.'], name: typing.Annotated[str, 'The name of the team.'], description: typing.Annotated[str, 'The description of the team.'] = None, privacy: typing.Annotated[str, 'The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  **For a non-nested team:**   * `secret` - only visible to organization owners and members of this team.   * `closed` - visible to all members of this organization.  **For a parent or child team:**   * `closed` - visible to all members of this organization.'] = None, notification_setting: typing.Annotated[str, 'The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are:  * `notifications_enabled` - team members receive notifications when the team is @mentioned.   * `notifications_disabled` - no one receives notifications.'] = None, parent_team_id: typing.Annotated[int, 'The ID of a team to set as the parent team.'] = None, permission: typing.Annotated[str, '**Deprecated**. The permission that new repositories will be added to the team with when none is specified.'] = 'pull') - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/teams/teams#update-a-team) endpoint.\n\nTo edit a team, the authenticated user must either be an organization owner or a team maintainer.\n\n**Note:** With nested teams, the `privacy` for parent teams cannot be `secret`." args_schema=<class 'pydantic.v1.main.teamsupdatelegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c48e5c0>
name='githublargebeta_teamsdeletelegacy' description="githublargebeta_teamsdeletelegacy(team_id: typing.Annotated[int, 'The unique identifier of the team.']) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/teams/teams#delete-a-team) endpoint.\n\nTo delete a team, the authenticated user must be an organization owner or team maintainer.\n\nIf you are an organization owner, deleting a parent team will delete all of its child teams as well." args_schema=<class 'pydantic.v1.main.teamsdeletelegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c48d3a0>
name='githublargebeta_teamslistdiscussionslegacy' description='githublargebeta_teamslistdiscussionslegacy(team_id: typing.Annotated[int, \'The unique identifier of the team.\'], direction: typing.Annotated[str, \'The direction to sort the results by.\'] = \'desc\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/teams/discussions#list-discussions) endpoint.\n\nList all discussions on a team\'s page.\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.teamslistdiscussionslegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c48eca0>
name='githublargebeta_teamscreatediscussionlegacy' description='githublargebeta_teamscreatediscussionlegacy(team_id: typing.Annotated[int, \'The unique identifier of the team.\'], title: typing.Annotated[str, "The discussion post\'s title."], body: typing.Annotated[str, "The discussion post\'s body text."], private: typing.Annotated[bool, \'Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.\'] = False) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/teams/discussions#create-a-discussion) endpoint.\n\nCreates a new discussion post on a team\'s page.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.teamscreatediscussionlegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c48ec00>
name='githublargebeta_teamsgetdiscussionlegacy' description="githublargebeta_teamsgetdiscussionlegacy(team_id: typing.Annotated[int, 'The unique identifier of the team.'], discussion_number: typing.Annotated[int, 'The number that identifies the discussion.']) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion) endpoint.\n\nGet a specific discussion on a team's page.\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.teamsgetdiscussionlegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c48f060>
name='githublargebeta_teamsupdatediscussionlegacy' description='githublargebeta_teamsupdatediscussionlegacy(team_id: typing.Annotated[int, \'The unique identifier of the team.\'], discussion_number: typing.Annotated[int, \'The number that identifies the discussion.\'], title: typing.Annotated[str, "The discussion post\'s title."] = None, body: typing.Annotated[str, "The discussion post\'s body text."] = None) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/teams/discussions#update-a-discussion) endpoint.\n\nEdits the title and body text of a discussion post. Only the parameters you provide are updated.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.teamsupdatediscussionlegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c48ed40>
name='githublargebeta_teamsdeletediscussionlegacy' description="githublargebeta_teamsdeletediscussionlegacy(team_id: typing.Annotated[int, 'The unique identifier of the team.'], discussion_number: typing.Annotated[int, 'The number that identifies the discussion.']) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/teams/discussions#delete-a-discussion) endpoint.\n\nDelete a discussion from a team's page.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.teamsdeletediscussionlegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c48f380>
name='githublargebeta_teamslistdiscussioncommentslegacy' description='githublargebeta_teamslistdiscussioncommentslegacy(team_id: typing.Annotated[int, \'The unique identifier of the team.\'], discussion_number: typing.Annotated[int, \'The number that identifies the discussion.\'], direction: typing.Annotated[str, \'The direction to sort the results by.\'] = \'desc\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/teams/discussion-comments#list-discussion-comments) endpoint.\n\nList all comments on a team discussion.\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.teamslistdiscussioncommentslegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c48f880>
name='githublargebeta_teamscreatediscussioncommentlegacy' description='githublargebeta_teamscreatediscussioncommentlegacy(team_id: typing.Annotated[int, \'The unique identifier of the team.\'], discussion_number: typing.Annotated[int, \'The number that identifies the discussion.\'], body: typing.Annotated[str, "The discussion comment\'s body text."]) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/teams/discussion-comments#create-a-discussion-comment) endpoint.\n\nCreates a new comment on a team discussion.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.teamscreatediscussioncommentlegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c48f560>
name='githublargebeta_teamsgetdiscussioncommentlegacy' description="githublargebeta_teamsgetdiscussioncommentlegacy(team_id: typing.Annotated[int, 'The unique identifier of the team.'], discussion_number: typing.Annotated[int, 'The number that identifies the discussion.'], comment_number: typing.Annotated[int, 'The number that identifies the comment.']) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment) endpoint.\n\nGet a specific comment on a team discussion.\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.teamsgetdiscussioncommentlegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c48fe20>
name='githublargebeta_teamsupdatediscussioncommentlegacy' description='githublargebeta_teamsupdatediscussioncommentlegacy(team_id: typing.Annotated[int, \'The unique identifier of the team.\'], discussion_number: typing.Annotated[int, \'The number that identifies the discussion.\'], comment_number: typing.Annotated[int, \'The number that identifies the comment.\'], body: typing.Annotated[str, "The discussion comment\'s body text."]) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/teams/discussion-comments#update-a-discussion-comment) endpoint.\n\nEdits the body text of a discussion comment.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.teamsupdatediscussioncommentlegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4cc0e0>
name='githublargebeta_teamsdeletediscussioncommentlegacy' description="githublargebeta_teamsdeletediscussioncommentlegacy(team_id: typing.Annotated[int, 'The unique identifier of the team.'], discussion_number: typing.Annotated[int, 'The number that identifies the discussion.'], comment_number: typing.Annotated[int, 'The number that identifies the comment.']) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/teams/discussion-comments#delete-a-discussion-comment) endpoint.\n\nDeletes a comment on a team discussion.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.teamsdeletediscussioncommentlegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4cc040>
name='githublargebeta_reactionslistforteamdiscussioncommentlegacy' description='githublargebeta_reactionslistforteamdiscussioncommentlegacy(team_id: typing.Annotated[int, \'The unique identifier of the team.\'], discussion_number: typing.Annotated[int, \'The number that identifies the discussion.\'], comment_number: typing.Annotated[int, \'The number that identifies the comment.\'], content: typing.Annotated[str, \'Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion comment.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion-comment) endpoint.\n\nList the reactions to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.reactionslistforteamdiscussioncommentlegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4cc360>
name='githublargebeta_reactionscreateforteamdiscussioncommentlegacy' description='githublargebeta_reactionscreateforteamdiscussioncommentlegacy(team_id: typing.Annotated[int, \'The unique identifier of the team.\'], discussion_number: typing.Annotated[int, \'The number that identifies the discussion.\'], comment_number: typing.Annotated[int, \'The number that identifies the comment.\'], content: typing.Annotated[str, \'The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion comment.\']) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.\n\nCreate a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).\n\nA response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.reactionscreateforteamdiscussioncommentlegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4cc900>
name='githublargebeta_reactionslistforteamdiscussionlegacy' description='githublargebeta_reactionslistforteamdiscussionlegacy(team_id: typing.Annotated[int, \'The unique identifier of the team.\'], discussion_number: typing.Annotated[int, \'The number that identifies the discussion.\'], content: typing.Annotated[str, \'Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion) endpoint.\n\nList the reactions to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).\n\nOAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.reactionslistforteamdiscussionlegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4ccd60>
name='githublargebeta_reactionscreateforteamdiscussionlegacy' description="githublargebeta_reactionscreateforteamdiscussionlegacy(team_id: typing.Annotated[int, 'The unique identifier of the team.'], discussion_number: typing.Annotated[int, 'The number that identifies the discussion.'], content: typing.Annotated[str, 'The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion.']) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion) endpoint.\n\nCreate a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).\n\nA response with an HTTP `200` status means that you already added the reaction type to this team discussion.\n\nOAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.reactionscreateforteamdiscussionlegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4cd080>
name='githublargebeta_teamslistpendinginvitationslegacy' description='githublargebeta_teamslistpendinginvitationslegacy(team_id: typing.Annotated[int, \'The unique identifier of the team.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/teams/members#list-pending-team-invitations) endpoint.\n\nThe return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.' args_schema=<class 'pydantic.v1.main.teamslistpendinginvitationslegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4cd440>
name='githublargebeta_teamslistmemberslegacy' description='githublargebeta_teamslistmemberslegacy(team_id: typing.Annotated[int, \'The unique identifier of the team.\'], role: typing.Annotated[str, \'Filters members returned by their role in the team.\'] = \'all\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/teams/members#list-team-members) endpoint.\n\nTeam members will include the members of child teams.' args_schema=<class 'pydantic.v1.main.teamslistmemberslegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4cc680>
name='githublargebeta_teamsgetmemberlegacy' description='githublargebeta_teamsgetmemberlegacy(team_id: typing.Annotated[int, \'The unique identifier of the team.\'], username: typing.Annotated[str, \'The handle for the GitHub user account.\']) - The "Get team member" endpoint (described below) is deprecated.\n\nWe recommend using the [Get team membership for a user](https://docs.github.com/rest/teams/members#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.\n\nTo list members in a team, the team must be visible to the authenticated user.' args_schema=<class 'pydantic.v1.main.teamsgetmemberlegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4cd6c0>
name='githublargebeta_teamsaddmemberlegacy' description='githublargebeta_teamsaddmemberlegacy(team_id: typing.Annotated[int, \'The unique identifier of the team.\'], username: typing.Annotated[str, \'The handle for the GitHub user account.\']) - The "Add team member" endpoint (described below) is deprecated.\n\nWe recommend using the [Add or update team membership for a user](https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub\'s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they\'re changing. The person being added to the team must be a member of the team\'s organization.\n\n**Note:** When you have team synchronization set up for a team with your organization\'s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team\'s membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."\n\nNote that you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."' args_schema=<class 'pydantic.v1.main.teamsaddmemberlegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4cdc60>
name='githublargebeta_teamsremovememberlegacy' description='githublargebeta_teamsremovememberlegacy(team_id: typing.Annotated[int, \'The unique identifier of the team.\'], username: typing.Annotated[str, \'The handle for the GitHub user account.\']) - The "Remove team member" endpoint (described below) is deprecated.\n\nWe recommend using the [Remove team membership for a user](https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub\'s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo remove a team member, the authenticated user must have \'admin\' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.\n\n**Note:** When you have team synchronization set up for a team with your organization\'s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team\'s membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."' args_schema=<class 'pydantic.v1.main.teamsremovememberlegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4cd940>
name='githublargebeta_teamsgetmembershipforuserlegacy' description="githublargebeta_teamsgetmembershipforuserlegacy(team_id: typing.Annotated[int, 'The unique identifier of the team.'], username: typing.Annotated[str, 'The handle for the GitHub user account.']) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/teams/members#get-team-membership-for-a-user) endpoint.\n\nTeam members will include the members of child teams.\n\nTo get a user's membership with a team, the team must be visible to the authenticated user.\n\n**Note:**\nThe response contains the `state` of the membership and the member's `role`.\n\nThe `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/teams/teams#create-a-team)." args_schema=<class 'pydantic.v1.main.teamsgetmembershipforuserlegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4cde40>
name='githublargebeta_teamsaddorupdatemembershipforuserlegacy' description='githublargebeta_teamsaddorupdatemembershipforuserlegacy(team_id: typing.Annotated[int, \'The unique identifier of the team.\'], username: typing.Annotated[str, \'The handle for the GitHub user account.\'], role: typing.Annotated[str, \'The role that this user should have in the team.\'] = \'member\') - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user) endpoint.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub\'s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nIf the user is already a member of the team\'s organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.\n\n**Note:** When you have team synchronization set up for a team with your organization\'s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team\'s membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."\n\nIf the user is unaffiliated with the team\'s organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.\n\nIf the user is already a member of the team, this endpoint will update the role of the team member\'s role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.' args_schema=<class 'pydantic.v1.main.teamsaddorupdatemembershipforuserlegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4ce200>
name='githublargebeta_teamsremovemembershipforuserlegacy' description='githublargebeta_teamsremovemembershipforuserlegacy(team_id: typing.Annotated[int, \'The unique identifier of the team.\'], username: typing.Annotated[str, \'The handle for the GitHub user account.\']) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user) endpoint.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub\'s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo remove a membership between a user and a team, the authenticated user must have \'admin\' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.\n\n**Note:** When you have team synchronization set up for a team with your organization\'s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team\'s membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."' args_schema=<class 'pydantic.v1.main.teamsremovemembershipforuserlegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4ce3e0>
name='githublargebeta_teamslistprojectslegacy' description='githublargebeta_teamslistprojectslegacy(team_id: typing.Annotated[int, \'The unique identifier of the team.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/teams/teams#list-team-projects) endpoint.\n\nLists the organization projects for a team.' args_schema=<class 'pydantic.v1.main.teamslistprojectslegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4ce020>
name='githublargebeta_teamscheckpermissionsforprojectlegacy' description="githublargebeta_teamscheckpermissionsforprojectlegacy(team_id: typing.Annotated[int, 'The unique identifier of the team.'], project_id: typing.Annotated[int, 'The unique identifier of the project.']) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-project) endpoint.\n\nChecks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team." args_schema=<class 'pydantic.v1.main.teamscheckpermissionsforprojectlegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4ce660>
name='githublargebeta_teamsaddorupdateprojectpermissionslegacy' description='githublargebeta_teamsaddorupdateprojectpermissionslegacy(team_id: typing.Annotated[int, \'The unique identifier of the team.\'], project_id: typing.Annotated[int, \'The unique identifier of the project.\'], permission: typing.Annotated[str, "The permission to grant to the team for this project. Default: the team\'s `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you\'ll need to set `Content-Length` to zero when calling this endpoint. For more information, see \'[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\'"] = None) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/teams/teams#add-or-update-team-project-permissions) endpoint.\n\nAdds an organization project to a team. To add a project to a team or update the team\'s permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.' args_schema=<class 'pydantic.v1.main.teamsaddorupdateprojectpermissionslegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4ceac0>
name='githublargebeta_teamsremoveprojectlegacy' description="githublargebeta_teamsremoveprojectlegacy(team_id: typing.Annotated[int, 'The unique identifier of the team.'], project_id: typing.Annotated[int, 'The unique identifier of the project.']) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/teams/teams#remove-a-project-from-a-team) endpoint.\n\nRemoves an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it." args_schema=<class 'pydantic.v1.main.teamsremoveprojectlegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4ce840>
name='githublargebeta_teamslistreposlegacy' description='githublargebeta_teamslistreposlegacy(team_id: typing.Annotated[int, \'The unique identifier of the team.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/teams/teams#list-team-repositories) endpoint.' args_schema=<class 'pydantic.v1.main.teamslistreposlegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4cef20>
name='githublargebeta_teamscheckpermissionsforrepolegacy' description="githublargebeta_teamscheckpermissionsforrepolegacy(team_id: typing.Annotated[int, 'The unique identifier of the team.'], owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - **Note**: Repositories inherited through a parent team will also be checked.\n\n**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-repository) endpoint.\n\nYou can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:" args_schema=<class 'pydantic.v1.main.teamscheckpermissionsforrepolegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4cf100>
name='githublargebeta_teamsaddorupdaterepopermissionslegacy' description='githublargebeta_teamsaddorupdaterepopermissionslegacy(team_id: typing.Annotated[int, \'The unique identifier of the team.\'], owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\'], permission: typing.Annotated[str, "The permission to grant the team on this repository. If no permission is specified, the team\'s `permission` attribute will be used to determine what permission to grant the team on this repository."] = None) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/rest/teams/teams#add-or-update-team-repository-permissions)" endpoint.\n\nTo add a repository to a team or update the team\'s permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.\n\nNote that, if you choose not to pass any parameters, you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."' args_schema=<class 'pydantic.v1.main.teamsaddorupdaterepopermissionslegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4ceca0>
name='githublargebeta_teamsremoverepolegacy' description="githublargebeta_teamsremoverepolegacy(team_id: typing.Annotated[int, 'The unique identifier of the team.'], owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/teams/teams#remove-a-repository-from-a-team) endpoint.\n\nIf the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team." args_schema=<class 'pydantic.v1.main.teamsremoverepolegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4cf600>
name='githublargebeta_teamslistchildlegacy' description='githublargebeta_teamslistchildlegacy(team_id: typing.Annotated[int, \'The unique identifier of the team.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/teams/teams#list-child-teams) endpoint.' args_schema=<class 'pydantic.v1.main.teamslistchildlegacyRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4cf920>
name='githublargebeta_usersgetauthenticated' description='githublargebeta_usersgetauthenticated() - OAuth app tokens and personal access tokens (classic) need the `user` scope in order for the response to include private profile information.' args_schema=<class 'pydantic.v1.main.usersgetauthenticatedRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4cf380>
name='githublargebeta_usersupdateauthenticated' description="githublargebeta_usersupdateauthenticated(name: typing.Annotated[str, 'The new name of the user.'] = None, email: typing.Annotated[str, 'The publicly visible email address of the user.'] = None, blog: typing.Annotated[str, 'The new blog URL of the user.'] = None, twitter_username: typing.Annotated[str, 'The new Twitter username of the user.'] = None, company: typing.Annotated[str, 'The new company of the user.'] = None, location: typing.Annotated[str, 'The new location of the user.'] = None, hireable: typing.Annotated[bool, 'The new hiring availability of the user.'] = None, bio: typing.Annotated[str, 'The new short biography of the user.'] = None) - **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API." args_schema=<class 'pydantic.v1.main.usersupdateauthenticatedRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c4cfec0>
name='githublargebeta_userslistblockedbyauthenticateduser' description='githublargebeta_userslistblockedbyauthenticateduser(per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List the users you\'ve blocked on your personal account.' args_schema=<class 'pydantic.v1.main.userslistblockedbyauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5140e0>
name='githublargebeta_userscheckblocked' description="githublargebeta_userscheckblocked(username: typing.Annotated[str, 'The handle for the GitHub user account.']) - Returns a 204 if the given user is blocked by the authenticated user. Returns a 404 if the given user is not blocked by the authenticated user, or if the given user account has been identified as spam by GitHub." args_schema=<class 'pydantic.v1.main.userscheckblockedRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5144a0>
name='githublargebeta_usersblock' description="githublargebeta_usersblock(username: typing.Annotated[str, 'The handle for the GitHub user account.']) - Blocks the given user and returns a 204. If the authenticated user cannot block the given user a 422 is returned." args_schema=<class 'pydantic.v1.main.usersblockRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5147c0>
name='githublargebeta_usersunblock' description="githublargebeta_usersunblock(username: typing.Annotated[str, 'The handle for the GitHub user account.']) - Unblocks the given user and returns a 204." args_schema=<class 'pydantic.v1.main.usersunblockRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c514900>
name='githublargebeta_codespaceslistforauthenticateduser' description='githublargebeta_codespaceslistforauthenticateduser(repository_id: typing.Annotated[int, \'ID of the Repository to filter on\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the authenticated user\'s codespaces.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.codespaceslistforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c514a40>
name='githublargebeta_codespacescreateforauthenticateduser' description="githublargebeta_codespacescreateforauthenticateduser(repository_id: typing.Annotated[int, 'Repository id for this codespace'], ref: typing.Annotated[str, 'Git ref (typically a branch name) for this codespace'] = None, location: typing.Annotated[str, 'The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.'] = None, geo: typing.Annotated[str, 'The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated.'] = None, client_ip: typing.Annotated[str, 'IP for location auto-detection when proxying a request'] = None, machine: typing.Annotated[str, 'Machine type to use for this codespace'] = None, devcontainer_path: typing.Annotated[str, 'Path to devcontainer.json config to use for this codespace'] = None, multi_repo_permissions_opt_out: typing.Annotated[bool, 'Whether to authorize requested permissions from devcontainer.json'] = None, working_directory: typing.Annotated[str, 'Working directory for this codespace'] = None, idle_timeout_minutes: typing.Annotated[int, 'Time in minutes before codespace stops from inactivity'] = None, display_name: typing.Annotated[str, 'Display name for this codespace'] = None, retention_period_minutes: typing.Annotated[int, 'Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).'] = None) - Creates a new codespace, owned by the authenticated user.\n\nThis endpoint requires either a `repository_id` OR a `pull_request` but not both.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacescreateforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c514040>
name='githublargebeta_codespaceslistsecretsforauthenticateduser' description='githublargebeta_codespaceslistsecretsforauthenticateduser(per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all development environment secrets available for a user\'s codespaces without revealing their\nencrypted values.\n\nThe authenticated user must have Codespaces access to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.codespaceslistsecretsforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c515580>
name='githublargebeta_codespacesgetpublickeyforauthenticateduser' description='githublargebeta_codespacesgetpublickeyforauthenticateduser() - Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.\n\nThe authenticated user must have Codespaces access to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.codespacesgetpublickeyforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c514cc0>
name='githublargebeta_codespacesgetsecretforauthenticateduser' description="githublargebeta_codespacesgetsecretforauthenticateduser(secret_name: typing.Annotated[str, 'The name of the secret.']) - Gets a development environment secret available to a user's codespaces without revealing its encrypted value.\n\nThe authenticated user must have Codespaces access to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacesgetsecretforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5156c0>
name='githublargebeta_codespacescreateorupdatesecretforauthenticateduser' description='githublargebeta_codespacescreateorupdatesecretforauthenticateduser(secret_name: typing.Annotated[str, \'The name of the secret.\'], key_id: typing.Annotated[str, \'ID of the key you used to encrypt the secret.\'], encrypted_value: typing.Annotated[str, \'Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/codespaces/secrets#get-public-key-for-the-authenticated-user) endpoint.\'] = None, selected_repository_ids: typing.Annotated[composio_langchain.composio_tool_spec.SelectedRepositoryIds, \'An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints.\'] = None) - Creates or updates a development environment secret for a user\'s codespace with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."\n\nThe authenticated user must have Codespaces access to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.codespacescreateorupdatesecretforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c515f80>
name='githublargebeta_codespacesdeletesecretforauthenticateduser' description="githublargebeta_codespacesdeletesecretforauthenticateduser(secret_name: typing.Annotated[str, 'The name of the secret.']) - Deletes a development environment secret from a user's codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.\n\nThe authenticated user must have Codespaces access to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacesdeletesecretforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5160c0>
name='githublargebeta_codespaceslistrepositoriesforsecretforauthenticateduser' description="githublargebeta_codespaceslistrepositoriesforsecretforauthenticateduser(secret_name: typing.Annotated[str, 'The name of the secret.']) - List the repositories that have been granted the ability to use a user's development environment secret.\n\nThe authenticated user must have Codespaces access to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespaceslistrepositoriesforsecretforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c516160>
name='githublargebeta_codespacessetrepositoriesforsecretforauthenticateduser' description="githublargebeta_codespacessetrepositoriesforsecretforauthenticateduser(secret_name: typing.Annotated[str, 'The name of the secret.'], selected_repository_ids: typing.Annotated[composio_langchain.composio_tool_spec.SelectedRepositoryIds, 'An array of repository ids for which a codespace can access the secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Add a selected repository to a user secret](https://docs.github.com/rest/codespaces/secrets#add-a-selected-repository-to-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints.']) - Select the repositories that will use a user's development environment secret.\n\nThe authenticated user must have Codespaces access to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacessetrepositoriesforsecretforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c516a20>
name='githublargebeta_codespacesaddrepositoryforsecretforauthenticateduser' description="githublargebeta_codespacesaddrepositoryforsecretforauthenticateduser(secret_name: typing.Annotated[str, 'The name of the secret.'], repository_id: typing.Annotated[int, 'repository_id']) - Adds a repository to the selected repositories for a user's development environment secret.\n\nThe authenticated user must have Codespaces access to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacesaddrepositoryforsecretforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c516980>
name='githublargebeta_codespacesremoverepositoryforsecretforauthenticateduser' description="githublargebeta_codespacesremoverepositoryforsecretforauthenticateduser(secret_name: typing.Annotated[str, 'The name of the secret.'], repository_id: typing.Annotated[int, 'repository_id']) - Removes a repository from the selected repositories for a user's development environment secret.\n\nThe authenticated user must have Codespaces access to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacesremoverepositoryforsecretforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c516b60>
name='githublargebeta_codespacesgetforauthenticateduser' description="githublargebeta_codespacesgetforauthenticateduser(codespace_name: typing.Annotated[str, 'The name of the codespace.']) - Gets information about a user's codespace.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacesgetforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c516de0>
name='githublargebeta_codespacesupdateforauthenticateduser' description="githublargebeta_codespacesupdateforauthenticateduser(codespace_name: typing.Annotated[str, 'The name of the codespace.'], machine: typing.Annotated[str, 'A valid machine to transition this codespace to.'] = None, display_name: typing.Annotated[str, 'Display name for this codespace'] = None, recent_folders: typing.Annotated[composio_langchain.composio_tool_spec.RecentFolders, 'Recently opened folders inside the codespace. It is currently used by the clients to determine the folder path to load the codespace in.'] = None) - Updates a codespace owned by the authenticated user. Currently only the codespace's machine type and recent folders can be modified using this endpoint.\n\nIf you specify a new machine type it will be applied the next time your codespace is started.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacesupdateforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c515da0>
name='githublargebeta_codespacesdeleteforauthenticateduser' description="githublargebeta_codespacesdeleteforauthenticateduser(codespace_name: typing.Annotated[str, 'The name of the codespace.']) - Deletes a user's codespace.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacesdeleteforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c515d00>
name='githublargebeta_codespacesexportforauthenticateduser' description="githublargebeta_codespacesexportforauthenticateduser(codespace_name: typing.Annotated[str, 'The name of the codespace.']) - Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.\n\nIf changes cannot be pushed to the codespace's repository, they will be pushed to a new or previously-existing fork instead.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacesexportforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c515bc0>
name='githublargebeta_codespacesgetexportdetailsforauthenticateduser' description="githublargebeta_codespacesgetexportdetailsforauthenticateduser(codespace_name: typing.Annotated[str, 'The name of the codespace.'], export_id: typing.Annotated[str, 'The ID of the export operation, or `latest`. Currently only `latest` is currently supported.']) - Gets information about an export of a codespace.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacesgetexportdetailsforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c515e40>
name='githublargebeta_codespacescodespacemachinesforauthenticateduser' description="githublargebeta_codespacescodespacemachinesforauthenticateduser(codespace_name: typing.Annotated[str, 'The name of the codespace.']) - List the machine types a codespace can transition to use.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacescodespacemachinesforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5154e0>
name='githublargebeta_codespacespublishforauthenticateduser' description="githublargebeta_codespacespublishforauthenticateduser(codespace_name: typing.Annotated[str, 'The name of the codespace.'], name: typing.Annotated[str, 'A name for the new repository.'] = None, private: typing.Annotated[bool, 'Whether the new repository should be private.'] = False) - Publishes an unpublished codespace, creating a new repository and assigning it to the codespace.\n\nThe codespace's token is granted write permissions to the repository, allowing the user to push their changes.\n\nThis will fail for a codespace that is already published, meaning it has an associated repository.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacespublishforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c517240>
name='githublargebeta_codespacesstartforauthenticateduser' description="githublargebeta_codespacesstartforauthenticateduser(codespace_name: typing.Annotated[str, 'The name of the codespace.']) - Starts a user's codespace.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacesstartforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c517600>
name='githublargebeta_codespacesstopforauthenticateduser' description="githublargebeta_codespacesstopforauthenticateduser(codespace_name: typing.Annotated[str, 'The name of the codespace.']) - Stops a user's codespace.\n\nOAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.codespacesstopforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c517380>
name='githublargebeta_packageslistdockermigrationconflictingpackagesforauthenticateduser' description="githublargebeta_packageslistdockermigrationconflictingpackagesforauthenticateduser() - Lists all packages that are owned by the authenticated user within the user's namespace, and that encountered a conflict during a Docker migration.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.packageslistdockermigrationconflictingpackagesforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5158a0>
name='githublargebeta_userssetprimaryemailvisibilityforauthenticateduser' description="githublargebeta_userssetprimaryemailvisibilityforauthenticateduser(visibility: typing.Annotated[str, 'Denotes whether an email is publicly visible.']) - Sets the visibility for your primary email addresses." args_schema=<class 'pydantic.v1.main.userssetprimaryemailvisibilityforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c517880>
name='githublargebeta_userslistemailsforauthenticateduser' description='githublargebeta_userslistemailsforauthenticateduser(per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all of your email addresses, and specifies which one is visible\nto the public.\n\nOAuth app tokens and personal access tokens (classic) need the `user:email` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.userslistemailsforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c516020>
name='githublargebeta_usersaddemailforauthenticateduser' description='githublargebeta_usersaddemailforauthenticateduser() - OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.usersaddemailforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5162a0>
name='githublargebeta_usersdeleteemailforauthenticateduser' description='githublargebeta_usersdeleteemailforauthenticateduser() - OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.usersdeleteemailforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c517920>
name='githublargebeta_userslistfollowersforauthenticateduser' description='githublargebeta_userslistfollowersforauthenticateduser(per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the people following the authenticated user.' args_schema=<class 'pydantic.v1.main.userslistfollowersforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c515ee0>
name='githublargebeta_userslistfollowedbyauthenticateduser' description='githublargebeta_userslistfollowedbyauthenticateduser(per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the people who the authenticated user follows.' args_schema=<class 'pydantic.v1.main.userslistfollowedbyauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5167a0>
name='githublargebeta_userscheckpersonisfollowedbyauthenticated' description="githublargebeta_userscheckpersonisfollowedbyauthenticated(username: typing.Annotated[str, 'The handle for the GitHub user account.']) - Check if a person is followed by the authenticated user" args_schema=<class 'pydantic.v1.main.userscheckpersonisfollowedbyauthenticatedRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5168e0>
name='githublargebeta_usersfollow' description='githublargebeta_usersfollow(username: typing.Annotated[str, \'The handle for the GitHub user account.\']) - Note that you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."\n\nOAuth app tokens and personal access tokens (classic) need the `user:follow` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.usersfollowRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c517c40>
name='githublargebeta_usersunfollow' description="githublargebeta_usersunfollow(username: typing.Annotated[str, 'The handle for the GitHub user account.']) - OAuth app tokens and personal access tokens (classic) need the `user:follow` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.usersunfollowRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c517d80>
name='githublargebeta_userslistgpgkeysforauthenticateduser' description='githublargebeta_userslistgpgkeysforauthenticateduser(per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the current user\'s GPG keys.\n\nOAuth app tokens and personal access tokens (classic) need the `read:gpg_key` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.userslistgpgkeysforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c517100>
name='githublargebeta_userscreategpgkeyforauthenticateduser' description="githublargebeta_userscreategpgkeyforauthenticateduser(armored_public_key: typing.Annotated[str, 'A GPG key in ASCII-armored format.'], name: typing.Annotated[str, 'A descriptive name for the new key.'] = None) - Adds a GPG key to the authenticated user's GitHub account.\n\nOAuth app tokens and personal access tokens (classic) need the `write:gpg_key` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.userscreategpgkeyforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c517b00>
name='githublargebeta_usersgetgpgkeyforauthenticateduser' description="githublargebeta_usersgetgpgkeyforauthenticateduser(gpg_key_id: typing.Annotated[int, 'The unique identifier of the GPG key.']) - View extended details for a single GPG key.\n\nOAuth app tokens and personal access tokens (classic) need the `read:gpg_key` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.usersgetgpgkeyforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5682c0>
name='githublargebeta_usersdeletegpgkeyforauthenticateduser' description="githublargebeta_usersdeletegpgkeyforauthenticateduser(gpg_key_id: typing.Annotated[int, 'The unique identifier of the GPG key.']) - Removes a GPG key from the authenticated user's GitHub account.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:gpg_key` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.usersdeletegpgkeyforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c568400>
name='githublargebeta_appslistinstallationsforauthenticateduser' description='githublargebeta_appslistinstallationsforauthenticateduser(per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n\nYou can find the permissions for the installation under the `permissions` key.' args_schema=<class 'pydantic.v1.main.appslistinstallationsforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5680e0>
name='githublargebeta_appslistinstallationreposforauthenticateduser' description='githublargebeta_appslistinstallationreposforauthenticateduser(installation_id: typing.Annotated[int, \'The unique identifier of the installation.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n\nThe access the user has to each repository is included in the hash under the `permissions` key.' args_schema=<class 'pydantic.v1.main.appslistinstallationreposforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c568040>
name='githublargebeta_appsaddrepotoinstallationforauthenticateduser' description="githublargebeta_appsaddrepotoinstallationforauthenticateduser(installation_id: typing.Annotated[int, 'The unique identifier of the installation.'], repository_id: typing.Annotated[int, 'The unique identifier of the repository.']) - Add a single repository to an installation. The authenticated user must have admin access to the repository." args_schema=<class 'pydantic.v1.main.appsaddrepotoinstallationforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c568540>
name='githublargebeta_appsremoverepofrominstallationforauthenticateduser' description="githublargebeta_appsremoverepofrominstallationforauthenticateduser(installation_id: typing.Annotated[int, 'The unique identifier of the installation.'], repository_id: typing.Annotated[int, 'The unique identifier of the repository.']) - Remove a single repository from an installation. The authenticated user must have admin access to the repository. The installation must have the `repository_selection` of `selected`." args_schema=<class 'pydantic.v1.main.appsremoverepofrominstallationforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c568720>
name='githublargebeta_interactionsgetrestrictionsforauthenticateduser' description='githublargebeta_interactionsgetrestrictionsforauthenticateduser() - Shows which type of GitHub user can interact with your public repositories and when the restriction expires.' args_schema=<class 'pydantic.v1.main.interactionsgetrestrictionsforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c568b80>
name='githublargebeta_interactionssetrestrictionsforauthenticateduser' description="githublargebeta_interactionssetrestrictionsforauthenticateduser(limit: typing.Annotated[str, 'The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect.__Limit interactions to a specific type of user for a specified duration__Limit interactions to a specific type of user for a specified duration__Limit interactions to a specific type of user for a specified duration'], expiry: typing.Annotated[str, 'The duration of the interaction restriction. Default: `one_day`.__Limit interactions to a specific type of user for a specified duration__Limit interactions to a specific type of user for a specified duration__Limit interactions to a specific type of user for a specified duration'] = None) - Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user." args_schema=<class 'pydantic.v1.main.interactionssetrestrictionsforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c568d60>
name='githublargebeta_interactionsremoverestrictionsforauthenticateduser' description='githublargebeta_interactionsremoverestrictionsforauthenticateduser() - Removes any interaction restrictions from your public repositories.' args_schema=<class 'pydantic.v1.main.interactionsremoverestrictionsforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5689a0>
name='githublargebeta_issueslistforauthenticateduser' description='githublargebeta_issueslistforauthenticateduser(labels: typing.Annotated[str, \'A list of comma separated label names. Example: `bug,ui,@high`\'] = None, since: typing.Annotated[str, \'Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, filter: typing.Annotated[str, "Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you\'re subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation."] = \'assigned\', state: typing.Annotated[str, \'Indicates the state of the issues to return.\'] = \'open\', sort_: typing.Annotated[str, \'What to sort results by.\'] = \'created\', direction: typing.Annotated[str, \'The direction to sort the results by.\'] = \'desc\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List issues across owned and member repositories assigned to the authenticated user.\n\n**Note**: GitHub\'s REST API considers every pull request an issue, but not every issue is a pull request. For this\nreason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull\nrequest id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.\n- **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.\n- **`application/vnd.github.html+json`**: Returns HTML rendered from the body\'s markdown. Response will include `body_html`.\n- **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.' args_schema=<class 'pydantic.v1.main.issueslistforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c568e00>
name='githublargebeta_userslistpublicsshkeysforauthenticateduser' description='githublargebeta_userslistpublicsshkeysforauthenticateduser(per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the public SSH keys for the authenticated user\'s GitHub account.\n\nOAuth app tokens and personal access tokens (classic) need the `read:public_key` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.userslistpublicsshkeysforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c569620>
name='githublargebeta_userscreatepublicsshkeyforauthenticateduser' description="githublargebeta_userscreatepublicsshkeyforauthenticateduser(key: typing.Annotated[str, 'The public SSH key to add to your GitHub account.'], title: typing.Annotated[str, 'A descriptive name for the new key.'] = None) - Adds a public SSH key to the authenticated user's GitHub account.\n\nOAuth app tokens and personal access tokens (classic) need the `write:gpg_key` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.userscreatepublicsshkeyforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c568fe0>
name='githublargebeta_usersgetpublicsshkeyforauthenticateduser' description="githublargebeta_usersgetpublicsshkeyforauthenticateduser(key_id: typing.Annotated[int, 'The unique identifier of the key.']) - View extended details for a single public SSH key.\n\nOAuth app tokens and personal access tokens (classic) need the `read:public_key` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.usersgetpublicsshkeyforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5699e0>
name='githublargebeta_usersdeletepublicsshkeyforauthenticateduser' description="githublargebeta_usersdeletepublicsshkeyforauthenticateduser(key_id: typing.Annotated[int, 'The unique identifier of the key.']) - Removes a public SSH key from the authenticated user's GitHub account.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:public_key` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.usersdeletepublicsshkeyforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c569800>
name='githublargebeta_appslistsubscriptionsforauthenticateduser' description='githublargebeta_appslistsubscriptionsforauthenticateduser(per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the active subscriptions for the authenticated user.' args_schema=<class 'pydantic.v1.main.appslistsubscriptionsforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c569080>
name='githublargebeta_appslistsubscriptionsforauthenticateduserstubbed' description='githublargebeta_appslistsubscriptionsforauthenticateduserstubbed(per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the active subscriptions for the authenticated user.' args_schema=<class 'pydantic.v1.main.appslistsubscriptionsforauthenticateduserstubbedRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c569b20>
name='githublargebeta_orgslistmembershipsforauthenticateduser' description='githublargebeta_orgslistmembershipsforauthenticateduser(state: typing.Annotated[str, \'Indicates the state of the memberships to return. If not specified, the API returns both active and pending memberships.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all of the authenticated user\'s organization memberships.' args_schema=<class 'pydantic.v1.main.orgslistmembershipsforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c569e40>
name='githublargebeta_orgsgetmembershipforauthenticateduser' description="githublargebeta_orgsgetmembershipforauthenticateduser(org: typing.Annotated[str, 'The organization name. The name is not case sensitive.']) - If the authenticated user is an active or pending member of the organization, this endpoint will return the user's membership. If the authenticated user is not affiliated with the organization, a `404` is returned. This endpoint will return a `403` if the request is made by a GitHub App that is blocked by the organization." args_schema=<class 'pydantic.v1.main.orgsgetmembershipforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c56a020>
name='githublargebeta_orgsupdatemembershipforauthenticateduser' description='githublargebeta_orgsupdatemembershipforauthenticateduser(org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], state: typing.Annotated[str, "The state that the membership should be in. Only `\'active\'` will be accepted."]) - Converts the authenticated user to an active member of the organization, if that user has a pending invitation from the organization.' args_schema=<class 'pydantic.v1.main.orgsupdatemembershipforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c569c60>
name='githublargebeta_migrationslistforauthenticateduser' description='githublargebeta_migrationslistforauthenticateduser(per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all migrations a user has started.' args_schema=<class 'pydantic.v1.main.migrationslistforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c56a3e0>
name='githublargebeta_migrationsstartforauthenticateduser' description="githublargebeta_migrationsstartforauthenticateduser(repositories: typing.Annotated[composio_langchain.composio_tool_spec.Repositories, 'repositories__'], lock_repositories: typing.Annotated[bool, 'Lock the repositories being migrated at the start of the migration'] = None, exclude_metadata: typing.Annotated[bool, 'Indicates whether metadata should be excluded and only git source should be included for the migration.'] = None, exclude_git_data: typing.Annotated[bool, 'Indicates whether the repository git data should be excluded from the migration.'] = None, exclude_attachments: typing.Annotated[bool, 'Do not include attachments in the migration'] = None, exclude_releases: typing.Annotated[bool, 'Do not include releases in the migration'] = None, exclude_owner_projects: typing.Annotated[bool, 'Indicates whether projects owned by the organization or users should be excluded.'] = None, exclude: typing.Annotated[composio_langchain.composio_tool_spec.Exclude, 'Exclude attributes from the API response to improve performance'] = None, org_metadata_only: typing.Annotated[bool, 'Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).'] = False) - Initiates the generation of a user migration archive." args_schema=<class 'pydantic.v1.main.migrationsstartforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c56b880>
name='githublargebeta_migrationsgetstatusforauthenticateduser' description="githublargebeta_migrationsgetstatusforauthenticateduser(migration_id: typing.Annotated[int, 'The unique identifier of the migration.'], exclude: typing.Annotated[composio_langchain.composio_tool_spec.Exclude, 'exclude'] = None) - Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:\n\n*   `pending` - the migration hasn't started yet.\n*   `exporting` - the migration is in progress.\n*   `exported` - the migration finished successfully.\n*   `failed` - the migration failed.\n\nOnce the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/migrations/users#download-a-user-migration-archive)." args_schema=<class 'pydantic.v1.main.migrationsgetstatusforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5b40e0>
name='githublargebeta_migrationsgetarchiveforauthenticateduser' description="githublargebeta_migrationsgetarchiveforauthenticateduser(migration_id: typing.Annotated[int, 'The unique identifier of the migration.']) - Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:\n\n*   attachments\n*   bases\n*   commit\\_comments\n*   issue\\_comments\n*   issue\\_events\n*   issues\n*   milestones\n*   organizations\n*   projects\n*   protected\\_branches\n*   pull\\_request\\_reviews\n*   pull\\_requests\n*   releases\n*   repositories\n*   review\\_comments\n*   schema\n*   users\n\nThe archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data." args_schema=<class 'pydantic.v1.main.migrationsgetarchiveforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5b42c0>
name='githublargebeta_migrationsdeletearchiveforauthenticateduser' description="githublargebeta_migrationsdeletearchiveforauthenticateduser(migration_id: typing.Annotated[int, 'The unique identifier of the migration.']) - Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/migrations/users#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/migrations/users#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted." args_schema=<class 'pydantic.v1.main.migrationsdeletearchiveforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5b4400>
name='githublargebeta_migrationsunlockrepoforauthenticateduser' description="githublargebeta_migrationsunlockrepoforauthenticateduser(migration_id: typing.Annotated[int, 'The unique identifier of the migration.'], repo_name: typing.Annotated[str, 'repo_name parameter']) - Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/migrations/users#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/repos/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked." args_schema=<class 'pydantic.v1.main.migrationsunlockrepoforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5b4220>
name='githublargebeta_migrationslistreposforauthenticateduser' description='githublargebeta_migrationslistreposforauthenticateduser(migration_id: typing.Annotated[int, \'The unique identifier of the migration.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all the repositories for this user migration.' args_schema=<class 'pydantic.v1.main.migrationslistreposforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5b4040>
name='githublargebeta_orgslistforauthenticateduser' description='githublargebeta_orgslistforauthenticateduser(per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List organizations for the authenticated user.\n\nFor OAuth app tokens and personal access tokens (classic), this endpoint only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope for OAuth app tokens and personal access tokens (classic). Requests with insufficient scope will receive a `403 Forbidden` response.' args_schema=<class 'pydantic.v1.main.orgslistforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c56bd80>
name='githublargebeta_packageslistpackagesforauthenticateduser' description='githublargebeta_packageslistpackagesforauthenticateduser(package_type: typing.Annotated[str, "The type of supported package. Packages in GitHub\'s Gradle registry have the type `maven`. Docker images pushed to GitHub\'s Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub\'s Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry."], visibility: typing.Annotated[str, "The selected visibility of the packages.  This parameter is optional and only filters an existing result set.The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.For the list of GitHub Packages registries that support granular permissions, see \'[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\'"] = None, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Lists packages owned by the authenticated user within the user\'s namespace.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."' args_schema=<class 'pydantic.v1.main.packageslistpackagesforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c56bf60>
name='githublargebeta_packagesgetpackageforauthenticateduser' description='githublargebeta_packagesgetpackageforauthenticateduser(package_type: typing.Annotated[str, "The type of supported package. Packages in GitHub\'s Gradle registry have the type `maven`. Docker images pushed to GitHub\'s Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub\'s Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry."], package_name: typing.Annotated[str, \'The name of the package.\']) - Gets a specific package for a package owned by the authenticated user.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."' args_schema=<class 'pydantic.v1.main.packagesgetpackageforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c56be20>
name='githublargebeta_packagesdeletepackageforauthenticateduser' description='githublargebeta_packagesdeletepackageforauthenticateduser(package_type: typing.Annotated[str, "The type of supported package. Packages in GitHub\'s Gradle registry have the type `maven`. Docker images pushed to GitHub\'s Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub\'s Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry."], package_name: typing.Annotated[str, \'The name of the package.\']) - Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, `repo` scope is also required. For the list these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."' args_schema=<class 'pydantic.v1.main.packagesdeletepackageforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c56bc40>
name='githublargebeta_packagesrestorepackageforauthenticateduser' description='githublargebeta_packagesrestorepackageforauthenticateduser(package_type: typing.Annotated[str, "The type of supported package. Packages in GitHub\'s Gradle registry have the type `maven`. Docker images pushed to GitHub\'s Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub\'s Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry."], package_name: typing.Annotated[str, \'The name of the package.\'], token: typing.Annotated[str, \'package token\'] = None) - Restores a package owned by the authenticated user.\n\nYou can restore a deleted package under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package\'s namespace first.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."' args_schema=<class 'pydantic.v1.main.packagesrestorepackageforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c56b4c0>
name='githublargebeta_packagesgetallpackageversionsforpackageownedbyauthenticateduser' description='githublargebeta_packagesgetallpackageversionsforpackageownedbyauthenticateduser(package_type: typing.Annotated[str, "The type of supported package. Packages in GitHub\'s Gradle registry have the type `maven`. Docker images pushed to GitHub\'s Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub\'s Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry."], package_name: typing.Annotated[str, \'The name of the package.\'], page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, state: typing.Annotated[str, \'The state of the package, either active or deleted.\'] = \'active\') - Lists package versions for a package owned by the authenticated user.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."' args_schema=<class 'pydantic.v1.main.packagesgetallpackageversionsforpackageownedbyauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c56b380>
name='githublargebeta_packagesgetpackageversionforauthenticateduser' description='githublargebeta_packagesgetpackageversionforauthenticateduser(package_type: typing.Annotated[str, "The type of supported package. Packages in GitHub\'s Gradle registry have the type `maven`. Docker images pushed to GitHub\'s Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub\'s Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry."], package_name: typing.Annotated[str, \'The name of the package.\'], package_version_id: typing.Annotated[int, \'Unique identifier of the package version.\']) - Gets a specific package version for a package owned by the authenticated user.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."' args_schema=<class 'pydantic.v1.main.packagesgetpackageversionforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c56a7a0>
name='githublargebeta_packagesdeletepackageversionforauthenticateduser' description='githublargebeta_packagesdeletepackageversionforauthenticateduser(package_type: typing.Annotated[str, "The type of supported package. Packages in GitHub\'s Gradle registry have the type `maven`. Docker images pushed to GitHub\'s Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub\'s Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry."], package_name: typing.Annotated[str, \'The name of the package.\'], package_version_id: typing.Annotated[int, \'Unique identifier of the package version.\']) - Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.\n\nThe authenticated user must have admin permissions in the organization to use this endpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."' args_schema=<class 'pydantic.v1.main.packagesdeletepackageversionforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c56b100>
name='githublargebeta_packagesrestorepackageversionforauthenticateduser' description='githublargebeta_packagesrestorepackageversionforauthenticateduser(package_type: typing.Annotated[str, "The type of supported package. Packages in GitHub\'s Gradle registry have the type `maven`. Docker images pushed to GitHub\'s Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub\'s Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry."], package_name: typing.Annotated[str, \'The name of the package.\'], package_version_id: typing.Annotated[int, \'Unique identifier of the package version.\']) - Restores a package version owned by the authenticated user.\n\nYou can restore a deleted package version under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package\'s namespace first.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."' args_schema=<class 'pydantic.v1.main.packagesrestorepackageversionforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5b4180>
name='githublargebeta_projectscreateforauthenticateduser' description="githublargebeta_projectscreateforauthenticateduser(name: typing.Annotated[str, 'Name of the project'], body: typing.Annotated[str, 'Body of the project'] = None) - Creates a user project board. Returns a `410 Gone` status if the user does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned." args_schema=<class 'pydantic.v1.main.projectscreateforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5b49a0>
name='githublargebeta_userslistpublicemailsforauthenticateduser' description='githublargebeta_userslistpublicemailsforauthenticateduser(per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists your publicly visible email address, which you can set with the\n[Set primary email visibility for the authenticated user](https://docs.github.com/rest/users/emails#set-primary-email-visibility-for-the-authenticated-user)\nendpoint.\n\nOAuth app tokens and personal access tokens (classic) need the `user:email` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.userslistpublicemailsforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5b4ae0>
name='githublargebeta_reposlistforauthenticateduser' description='githublargebeta_reposlistforauthenticateduser(direction: typing.Annotated[str, \'The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.\'] = None, since: typing.Annotated[str, \'Only show repositories updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, before: typing.Annotated[str, \'Only show repositories updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, visibility: typing.Annotated[str, \'Limit results to repositories with the specified visibility.\'] = \'all\', affiliation: typing.Annotated[str, \'Comma-separated list of values. Can include:   * `owner`: Repositories that are owned by the authenticated user.   * `collaborator`: Repositories that the user has been added to as a collaborator.   * `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.\'] = \'owner,collaborator,organization_member\', type: typing.Annotated[str, \'Limit results to repositories of the specified type. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.\'] = \'all\', sort_: typing.Annotated[str, \'The property to sort the results by.\'] = \'full_name\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.' args_schema=<class 'pydantic.v1.main.reposlistforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5b4f40>
name='githublargebeta_reposcreateforauthenticateduser' description='githublargebeta_reposcreateforauthenticateduser(name: typing.Annotated[str, \'The name of the repository.\'], description: typing.Annotated[str, \'A short description of the repository.\'] = None, homepage: typing.Annotated[str, \'A URL with more information about the repository.\'] = None, team_id: typing.Annotated[int, \'The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.\'] = None, gitignore_template: typing.Annotated[str, \'The desired language or platform to apply to the .gitignore.\'] = None, license_template: typing.Annotated[str, \'The license keyword of the open source license for this repository.\'] = None, squash_merge_commit_title: typing.Annotated[str, "The default value for a squash merge commit title:- `PR_TITLE` - default to the pull request\'s title.- `COMMIT_OR_PR_TITLE` - default to the commit\'s title (if only one commit) or the pull request\'s title (when more than one commit)."] = None, squash_merge_commit_message: typing.Annotated[str, "The default value for a squash merge commit message:- `PR_BODY` - default to the pull request\'s body.- `COMMIT_MESSAGES` - default to the branch\'s commit messages.- `BLANK` - default to a blank commit message."] = None, merge_commit_title: typing.Annotated[str, "The default value for a merge commit title.- `PR_TITLE` - default to the pull request\'s title.- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name)."] = None, merge_commit_message: typing.Annotated[str, "The default value for a merge commit message.- `PR_TITLE` - default to the pull request\'s title.- `PR_BODY` - default to the pull request\'s body.- `BLANK` - default to a blank commit message."] = None, private: typing.Annotated[bool, \'Whether the repository is private.\'] = False, has_issues: typing.Annotated[bool, \'Whether issues are enabled.\'] = True, has_projects: typing.Annotated[bool, \'Whether projects are enabled.\'] = True, has_wiki: typing.Annotated[bool, \'Whether the wiki is enabled.\'] = True, has_discussions: typing.Annotated[bool, \'Whether discussions are enabled.\'] = False, auto_init: typing.Annotated[bool, \'Whether the repository is initialized with a minimal README.\'] = False, allow_squash_merge: typing.Annotated[bool, \'Whether to allow squash merges for pull requests.\'] = True, allow_merge_commit: typing.Annotated[bool, \'Whether to allow merge commits for pull requests.\'] = True, allow_rebase_merge: typing.Annotated[bool, \'Whether to allow rebase merges for pull requests.\'] = True, allow_auto_merge: typing.Annotated[bool, \'Whether to allow Auto-merge to be used on pull requests.\'] = False, delete_branch_on_merge: typing.Annotated[bool, \'Whether to delete head branches when pull requests are merged\'] = False, has_downloads: typing.Annotated[bool, \'Whether downloads are enabled.\'] = True, is_template: typing.Annotated[bool, \'Whether this repository acts as a template that can be used to generate new repositories.\'] = False) - Creates a new repository for the authenticated user.\n\nOAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.' args_schema=<class 'pydantic.v1.main.reposcreateforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5b5120>
name='githublargebeta_reposlistinvitationsforauthenticateduser' description='githublargebeta_reposlistinvitationsforauthenticateduser(per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - When authenticating as a user, this endpoint will list all currently open repository invitations for that user.' args_schema=<class 'pydantic.v1.main.reposlistinvitationsforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5b6660>
name='githublargebeta_reposacceptinvitationforauthenticateduser' description="githublargebeta_reposacceptinvitationforauthenticateduser(invitation_id: typing.Annotated[int, 'The unique identifier of the invitation.']) - Accept a repository invitation" args_schema=<class 'pydantic.v1.main.reposacceptinvitationforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5b5760>
name='githublargebeta_reposdeclineinvitationforauthenticateduser' description="githublargebeta_reposdeclineinvitationforauthenticateduser(invitation_id: typing.Annotated[int, 'The unique identifier of the invitation.']) - Decline a repository invitation" args_schema=<class 'pydantic.v1.main.reposdeclineinvitationforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5b6980>
name='githublargebeta_userslistsocialaccountsforauthenticateduser' description='githublargebeta_userslistsocialaccountsforauthenticateduser(per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists all of your social accounts.' args_schema=<class 'pydantic.v1.main.userslistsocialaccountsforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5b4d60>
name='githublargebeta_usersaddsocialaccountforauthenticateduser' description="githublargebeta_usersaddsocialaccountforauthenticateduser(account_urls: typing.Annotated[composio_langchain.composio_tool_spec.AccountUrls, 'Full URLs for the social media profiles to add.']) - Add one or more social accounts to the authenticated user's profile.\n\nOAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.usersaddsocialaccountforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5b7240>
name='githublargebeta_usersdeletesocialaccountforauthenticateduser' description="githublargebeta_usersdeletesocialaccountforauthenticateduser(account_urls: typing.Annotated[composio_langchain.composio_tool_spec.AccountUrls, 'Full URLs for the social media profiles to delete.']) - Deletes one or more social accounts from the authenticated user's profile.\n\nOAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.usersdeletesocialaccountforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5b79c0>
name='githublargebeta_userslistsshsigningkeysforauthenticateduser' description='githublargebeta_userslistsshsigningkeysforauthenticateduser(per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the SSH signing keys for the authenticated user\'s GitHub account.\n\nOAuth app tokens and personal access tokens (classic) need the `read:ssh_signing_key` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.userslistsshsigningkeysforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5b7920>
name='githublargebeta_userscreatesshsigningkeyforauthenticateduser' description='githublargebeta_userscreatesshsigningkeyforauthenticateduser(key: typing.Annotated[str, "The public SSH key to add to your GitHub account. For more information, see \'[Checking for existing SSH keys](https://docs.github.com/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys).\'"], title: typing.Annotated[str, \'A descriptive name for the new key.\'] = None) - Creates an SSH signing key for the authenticated user\'s GitHub account.\n\nOAuth app tokens and personal access tokens (classic) need the `write:ssh_signing_key` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.userscreatesshsigningkeyforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5b7b00>
name='githublargebeta_usersgetsshsigningkeyforauthenticateduser' description="githublargebeta_usersgetsshsigningkeyforauthenticateduser(ssh_signing_key_id: typing.Annotated[int, 'The unique identifier of the SSH signing key.']) - Gets extended details for an SSH signing key.\n\nOAuth app tokens and personal access tokens (classic) need the `read:ssh_signing_key` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.usersgetsshsigningkeyforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5b77e0>
name='githublargebeta_usersdeletesshsigningkeyforauthenticateduser' description="githublargebeta_usersdeletesshsigningkeyforauthenticateduser(ssh_signing_key_id: typing.Annotated[int, 'The unique identifier of the SSH signing key.']) - Deletes an SSH signing key from the authenticated user's GitHub account.\n\nOAuth app tokens and personal access tokens (classic) need the `admin:ssh_signing_key` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.usersdeletesshsigningkeyforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5b7740>
name='githublargebeta_activitylistreposstarredbyauthenticateduser' description='githublargebeta_activitylistreposstarredbyauthenticateduser(sort_: typing.Annotated[str, \'The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.\'] = \'created\', direction: typing.Annotated[str, \'The direction to sort the results by.\'] = \'desc\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists repositories the authenticated user has starred.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.' args_schema=<class 'pydantic.v1.main.activitylistreposstarredbyauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5b76a0>
name='githublargebeta_activitycheckrepoisstarredbyauthenticateduser' description="githublargebeta_activitycheckrepoisstarredbyauthenticateduser(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Whether the authenticated user has starred the repository." args_schema=<class 'pydantic.v1.main.activitycheckrepoisstarredbyauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5b7420>
name='githublargebeta_activitystarrepoforauthenticateduser' description='githublargebeta_activitystarrepoforauthenticateduser(owner: typing.Annotated[str, \'The account owner of the repository. The name is not case sensitive.\'], repo: typing.Annotated[str, \'The name of the repository without the `.git` extension. The name is not case sensitive.\']) - Note that you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."' args_schema=<class 'pydantic.v1.main.activitystarrepoforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5b7060>
name='githublargebeta_activityunstarrepoforauthenticateduser' description="githublargebeta_activityunstarrepoforauthenticateduser(owner: typing.Annotated[str, 'The account owner of the repository. The name is not case sensitive.'], repo: typing.Annotated[str, 'The name of the repository without the `.git` extension. The name is not case sensitive.']) - Unstar a repository that the authenticated user has previously starred." args_schema=<class 'pydantic.v1.main.activityunstarrepoforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5b7880>
name='githublargebeta_activitylistwatchedreposforauthenticateduser' description='githublargebeta_activitylistwatchedreposforauthenticateduser(per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists repositories the authenticated user is watching.' args_schema=<class 'pydantic.v1.main.activitylistwatchedreposforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5b6fc0>
name='githublargebeta_teamslistforauthenticateduser' description='githublargebeta_teamslistforauthenticateduser(per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List all of the teams across all of the organizations to which the authenticated\nuser belongs.\n\nOAuth app tokens and personal access tokens (classic) need the `user`, `repo`, or `read:org` scope to use this endpoint.\n\nWhen using a fine-grained personal access token, the resource owner of the token must be a single organization, and the response will only include the teams from that organization.' args_schema=<class 'pydantic.v1.main.teamslistforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5b7f60>
name='githublargebeta_userslist' description='githublargebeta_userslist(since: typing.Annotated[int, \'A user ID. Only return users with an ID greater than this ID.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.\n\nNote: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of users.' args_schema=<class 'pydantic.v1.main.userslistRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5fc180>
name='githublargebeta_usersgetbyusername' description='githublargebeta_usersgetbyusername(username: typing.Annotated[str, \'The handle for the GitHub user account.\']) - Provides publicly available information about someone with a GitHub account.\n\nThe `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).\n\nThe Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/users/emails)".' args_schema=<class 'pydantic.v1.main.usersgetbyusernameRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5fc220>
name='githublargebeta_packageslistdockermigrationconflictingpackagesforuser' description="githublargebeta_packageslistdockermigrationconflictingpackagesforuser(username: typing.Annotated[str, 'The handle for the GitHub user account.']) - Lists all packages that are in a specific user's namespace, that the requesting user has access to, and that encountered a conflict during Docker migration.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint." args_schema=<class 'pydantic.v1.main.packageslistdockermigrationconflictingpackagesforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5fc540>
name='githublargebeta_activitylisteventsforauthenticateduser' description='githublargebeta_activitylisteventsforauthenticateduser(username: typing.Annotated[str, \'The handle for the GitHub user account.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - If you are authenticated as the given user, you will see your private events. Otherwise, you\'ll only see public events.' args_schema=<class 'pydantic.v1.main.activitylisteventsforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5fc680>
name='githublargebeta_activitylistorgeventsforauthenticateduser' description='githublargebeta_activitylistorgeventsforauthenticateduser(username: typing.Annotated[str, \'The handle for the GitHub user account.\'], org: typing.Annotated[str, \'The organization name. The name is not case sensitive.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - This is the user\'s organization dashboard. You must be authenticated as the user to view this.' args_schema=<class 'pydantic.v1.main.activitylistorgeventsforauthenticateduserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5fc0e0>
name='githublargebeta_activitylistpubliceventsforuser' description='githublargebeta_activitylistpubliceventsforuser(username: typing.Annotated[str, \'The handle for the GitHub user account.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List public events for a user' args_schema=<class 'pydantic.v1.main.activitylistpubliceventsforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5fc900>
name='githublargebeta_userslistfollowersforuser' description='githublargebeta_userslistfollowersforuser(username: typing.Annotated[str, \'The handle for the GitHub user account.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the people following the specified user.' args_schema=<class 'pydantic.v1.main.userslistfollowersforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5fcc20>
name='githublargebeta_userslistfollowingforuser' description='githublargebeta_userslistfollowingforuser(username: typing.Annotated[str, \'The handle for the GitHub user account.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the people who the specified user follows.' args_schema=<class 'pydantic.v1.main.userslistfollowingforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5fcea0>
name='githublargebeta_userscheckfollowingforuser' description="githublargebeta_userscheckfollowingforuser(username: typing.Annotated[str, 'The handle for the GitHub user account.'], target_user: typing.Annotated[str, 'target_user']) - Check if a user follows another user" args_schema=<class 'pydantic.v1.main.userscheckfollowingforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5fc400>
name='githublargebeta_gistslistforuser' description='githublargebeta_gistslistforuser(username: typing.Annotated[str, \'The handle for the GitHub user account.\'], since: typing.Annotated[str, \'Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\'] = None, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists public gists for the specified user:' args_schema=<class 'pydantic.v1.main.gistslistforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5fd120>
name='githublargebeta_userslistgpgkeysforuser' description='githublargebeta_userslistgpgkeysforuser(username: typing.Annotated[str, \'The handle for the GitHub user account.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the GPG keys for a user. This information is accessible by anyone.' args_schema=<class 'pydantic.v1.main.userslistgpgkeysforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5fd580>
name='githublargebeta_usersgetcontextforuser' description='githublargebeta_usersgetcontextforuser(username: typing.Annotated[str, \'The handle for the GitHub user account.\'], subject_type: typing.Annotated[str, "Identifies which additional information you\'d like to receive about the person\'s hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`."] = None, subject_id: typing.Annotated[str, \'Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.\'] = None) - Provides hovercard information. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.\n\n  The `subject_type` and `subject_id` parameters provide context for the person\'s hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository, you would use a `subject_type` value of `repository` and a `subject_id` value of `1300192` (the ID of the `Spoon-Knife` repository).\n\nOAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.usersgetcontextforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5fd8a0>
name='githublargebeta_appsgetuserinstallation' description="githublargebeta_appsgetuserinstallation(username: typing.Annotated[str, 'The handle for the GitHub user account.']) - Enables an authenticated GitHub App to find the user’s installation information.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint." args_schema=<class 'pydantic.v1.main.appsgetuserinstallationRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5fdb20>
name='githublargebeta_userslistpublickeysforuser' description='githublargebeta_userslistpublickeysforuser(username: typing.Annotated[str, \'The handle for the GitHub user account.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the _verified_ public SSH keys for a user. This is accessible by anyone.' args_schema=<class 'pydantic.v1.main.userslistpublickeysforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5fdee0>
name='githublargebeta_orgslistforuser' description='githublargebeta_orgslistforuser(username: typing.Annotated[str, \'The handle for the GitHub user account.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.\n\nThis method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/orgs/orgs#list-organizations-for-the-authenticated-user) API instead.' args_schema=<class 'pydantic.v1.main.orgslistforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5fdda0>
name='githublargebeta_packageslistpackagesforuser' description='githublargebeta_packageslistpackagesforuser(username: typing.Annotated[str, \'The handle for the GitHub user account.\'], package_type: typing.Annotated[str, "The type of supported package. Packages in GitHub\'s Gradle registry have the type `maven`. Docker images pushed to GitHub\'s Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub\'s Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry."], visibility: typing.Annotated[str, "The selected visibility of the packages.  This parameter is optional and only filters an existing result set.The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.For the list of GitHub Packages registries that support granular permissions, see \'[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\'"] = None, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1, per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30) - Lists all packages in a user\'s namespace for which the requesting user has access.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."' args_schema=<class 'pydantic.v1.main.packageslistpackagesforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5fe160>
name='githublargebeta_packagesgetpackageforuser' description='githublargebeta_packagesgetpackageforuser(package_type: typing.Annotated[str, "The type of supported package. Packages in GitHub\'s Gradle registry have the type `maven`. Docker images pushed to GitHub\'s Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub\'s Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry."], package_name: typing.Annotated[str, \'The name of the package.\'], username: typing.Annotated[str, \'The handle for the GitHub user account.\']) - Gets a specific package metadata for a public package owned by a user.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."' args_schema=<class 'pydantic.v1.main.packagesgetpackageforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5fe3e0>
name='githublargebeta_packagesdeletepackageforuser' description='githublargebeta_packagesdeletepackageforuser(package_type: typing.Annotated[str, "The type of supported package. Packages in GitHub\'s Gradle registry have the type `maven`. Docker images pushed to GitHub\'s Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub\'s Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry."], package_name: typing.Annotated[str, \'The name of the package.\'], username: typing.Annotated[str, \'The handle for the GitHub user account.\']) - Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.\n\nIf the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."' args_schema=<class 'pydantic.v1.main.packagesdeletepackageforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5fe7a0>
name='githublargebeta_packagesrestorepackageforuser' description='githublargebeta_packagesrestorepackageforuser(package_type: typing.Annotated[str, "The type of supported package. Packages in GitHub\'s Gradle registry have the type `maven`. Docker images pushed to GitHub\'s Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub\'s Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry."], package_name: typing.Annotated[str, \'The name of the package.\'], username: typing.Annotated[str, \'The handle for the GitHub user account.\'], token: typing.Annotated[str, \'package token\'] = None) - Restores an entire package for a user.\n\nYou can restore a deleted package under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package\'s namespace first.\n\nIf the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."' args_schema=<class 'pydantic.v1.main.packagesrestorepackageforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5fd3a0>
name='githublargebeta_packagesgetallpackageversionsforpackageownedbyuser' description='githublargebeta_packagesgetallpackageversionsforpackageownedbyuser(package_type: typing.Annotated[str, "The type of supported package. Packages in GitHub\'s Gradle registry have the type `maven`. Docker images pushed to GitHub\'s Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub\'s Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry."], package_name: typing.Annotated[str, \'The name of the package.\'], username: typing.Annotated[str, \'The handle for the GitHub user account.\']) - Lists package versions for a public package owned by a specified user.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."' args_schema=<class 'pydantic.v1.main.packagesgetallpackageversionsforpackageownedbyuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5feca0>
name='githublargebeta_packagesgetpackageversionforuser' description='githublargebeta_packagesgetpackageversionforuser(package_type: typing.Annotated[str, "The type of supported package. Packages in GitHub\'s Gradle registry have the type `maven`. Docker images pushed to GitHub\'s Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub\'s Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry."], package_name: typing.Annotated[str, \'The name of the package.\'], package_version_id: typing.Annotated[int, \'Unique identifier of the package version.\'], username: typing.Annotated[str, \'The handle for the GitHub user account.\']) - Gets a specific package version for a public package owned by a specified user.\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."' args_schema=<class 'pydantic.v1.main.packagesgetpackageversionforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5fea20>
name='githublargebeta_packagesdeletepackageversionforuser' description='githublargebeta_packagesdeletepackageversionforuser(package_type: typing.Annotated[str, "The type of supported package. Packages in GitHub\'s Gradle registry have the type `maven`. Docker images pushed to GitHub\'s Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub\'s Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry."], package_name: typing.Annotated[str, \'The name of the package.\'], username: typing.Annotated[str, \'The handle for the GitHub user account.\'], package_version_id: typing.Annotated[int, \'Unique identifier of the package version.\']) - Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.\n\nIf the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."' args_schema=<class 'pydantic.v1.main.packagesdeletepackageversionforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5fefc0>
name='githublargebeta_packagesrestorepackageversionforuser' description='githublargebeta_packagesrestorepackageversionforuser(package_type: typing.Annotated[str, "The type of supported package. Packages in GitHub\'s Gradle registry have the type `maven`. Docker images pushed to GitHub\'s Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub\'s Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry."], package_name: typing.Annotated[str, \'The name of the package.\'], username: typing.Annotated[str, \'The handle for the GitHub user account.\'], package_version_id: typing.Annotated[int, \'Unique identifier of the package version.\']) - Restores a specific package version for a user.\n\nYou can restore a deleted package under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package\'s namespace first.\n\nIf the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."\n\nOAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."' args_schema=<class 'pydantic.v1.main.packagesrestorepackageversionforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5ff560>
name='githublargebeta_projectslistforuser' description='githublargebeta_projectslistforuser(username: typing.Annotated[str, \'The handle for the GitHub user account.\'], state: typing.Annotated[str, \'Indicates the state of the projects to return.\'] = \'open\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists projects for a user.' args_schema=<class 'pydantic.v1.main.projectslistforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5ff880>
name='githublargebeta_activitylistreceivedeventsforuser' description='githublargebeta_activitylistreceivedeventsforuser(username: typing.Annotated[str, \'The handle for the GitHub user account.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - These are events that you\'ve received by watching repositories and following users. If you are authenticated as the given user, you will see private events. Otherwise, you\'ll only see public events.' args_schema=<class 'pydantic.v1.main.activitylistreceivedeventsforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c5ffec0>
name='githublargebeta_activitylistreceivedpubliceventsforuser' description='githublargebeta_activitylistreceivedpubliceventsforuser(username: typing.Annotated[str, \'The handle for the GitHub user account.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - List public events received by a user' args_schema=<class 'pydantic.v1.main.activitylistreceivedpubliceventsforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c73c0e0>
name='githublargebeta_reposlistforuser' description='githublargebeta_reposlistforuser(username: typing.Annotated[str, \'The handle for the GitHub user account.\'], direction: typing.Annotated[str, \'The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.\'] = None, type: typing.Annotated[str, \'Limit results to repositories of the specified type.\'] = \'owner\', sort_: typing.Annotated[str, \'The property to sort the results by.\'] = \'full_name\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists public repositories for the specified user.' args_schema=<class 'pydantic.v1.main.reposlistforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c73c180>
name='githublargebeta_billinggetgithubactionsbillinguser' description='githublargebeta_billinggetgithubactionsbillinguser(username: typing.Annotated[str, \'The handle for the GitHub user account.\']) - Gets the summary of the free and paid GitHub Actions minutes used.\n\nPaid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".\n\nOAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.billinggetgithubactionsbillinguserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c73c040>
name='githublargebeta_billinggetgithubpackagesbillinguser' description='githublargebeta_billinggetgithubpackagesbillinguser(username: typing.Annotated[str, \'The handle for the GitHub user account.\']) - Gets the free and paid storage used for GitHub Packages in gigabytes.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."\n\nOAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.billinggetgithubpackagesbillinguserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c73c9a0>
name='githublargebeta_billinggetsharedstoragebillinguser' description='githublargebeta_billinggetsharedstoragebillinguser(username: typing.Annotated[str, \'The handle for the GitHub user account.\']) - Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."\n\nOAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.' args_schema=<class 'pydantic.v1.main.billinggetsharedstoragebillinguserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c73cae0>
name='githublargebeta_userslistsocialaccountsforuser' description='githublargebeta_userslistsocialaccountsforuser(username: typing.Annotated[str, \'The handle for the GitHub user account.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists social media accounts for a user. This endpoint is accessible by anyone.' args_schema=<class 'pydantic.v1.main.userslistsocialaccountsforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c73cc20>
name='githublargebeta_userslistsshsigningkeysforuser' description='githublargebeta_userslistsshsigningkeysforuser(username: typing.Annotated[str, \'The handle for the GitHub user account.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists the SSH signing keys for a user. This operation is accessible by anyone.' args_schema=<class 'pydantic.v1.main.userslistsshsigningkeysforuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c73c860>
name='githublargebeta_activitylistreposstarredbyuser' description='githublargebeta_activitylistreposstarredbyuser(username: typing.Annotated[str, \'The handle for the GitHub user account.\'], sort_: typing.Annotated[str, \'The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.\'] = \'created\', direction: typing.Annotated[str, \'The direction to sort the results by.\'] = \'desc\', per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists repositories a user has starred.\n\nThis endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."\n\n- **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.' args_schema=<class 'pydantic.v1.main.activitylistreposstarredbyuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c73cea0>
name='githublargebeta_activitylistreposwatchedbyuser' description='githublargebeta_activitylistreposwatchedbyuser(username: typing.Annotated[str, \'The handle for the GitHub user account.\'], per_page: typing.Annotated[int, "The number of results per page (max 100). For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 30, page: typing.Annotated[int, "The page number of the results to fetch. For more information, see \'[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\'"] = 1) - Lists repositories a user is watching.' args_schema=<class 'pydantic.v1.main.activitylistreposwatchedbyuserRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c73c400>
name='githublargebeta_metagetallversions' description='githublargebeta_metagetallversions() - Get all supported GitHub API versions.' args_schema=<class 'pydantic.v1.main.metagetallversionsRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c73d120>
name='githublargebeta_metagetzen' description='githublargebeta_metagetzen() - Get a random sentence from the Zen of GitHub' args_schema=<class 'pydantic.v1.main.metagetzenRequest'> func=<function ComposioTool.<locals>.<lambda> at 0x13c73d4e0>
